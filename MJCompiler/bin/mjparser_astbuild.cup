

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {: errorDetected = false; :}

/**************************************************************
*********************** (Non)Terminals ************************
**************************************************************/

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal INTERFACE, DOT, CLASS, BREAK, NEW, L, OR, MM, CONST, LE, MOD, LSQUARE, READ, DIV, GE, ENUM, TIMES, DIF, G;
terminal MINUS, RSQUARE, SAME, CONTINUE, AND, PP, EXTENDS, IMPLEMENTS, FOR;

terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal String BOOLCONST;
terminal String IDENT;
terminal IF, ELSE;

nonterminal DeclList DeclList;
nonterminal DeclItem DeclItem ;
nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclList ConstDeclList ;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarItem VarItem;
nonterminal OptArraySq OptArraySq ; 
nonterminal ClassDecl ClassDecl;
nonterminal Extend Extend;
nonterminal Implement Implement;
nonterminal InterfaceList InterfaceList;
nonterminal OptVarDecl OptVarDecl;
nonterminal OptMethodDecl OptMethodDecl;
nonterminal ClassMethods ClassMethods ;
nonterminal InterfaceDecl InterfaceDecl;
nonterminal InterfaceMethodDeclList InterfaceMethodDeclList;
nonterminal OptInterfaceMethodDeclList OptInterfaceMethodDeclList;
nonterminal InterfaceMethodDecl InterfaceMethodDecl;
nonterminal OptFormPars OptFormPars;
nonterminal TypeIdent TypeIdent ;
nonterminal OptStmt OptStmt;
nonterminal Statement Statement;
nonterminal FormPars FormPars ;
nonterminal DesignatorStatement DesignatorStatement ;
nonterminal OptActPars OptActPars;
nonterminal ActPars ActPars;
nonterminal OptMinus OptMinus;
nonterminal OptMethodCall OptMethodCall;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal Relop Relop;
nonterminal Assignop Assignop ;
nonterminal OptNumConst OptNumConst ;
nonterminal OptElse OptElse;
nonterminal OptDesignStmt OptDesignStmt;
nonterminal OptForDesignStmt OptForDesignStmt ;

nonterminal ConstItem ConstItem;
nonterminal EnumDecl EnumDecl;
nonterminal EnumDeclList EnumDeclList;
nonterminal EnumItem EnumItem;
nonterminal GlobalMethDecl GlobalMethDecl;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Initializer ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj EnumName ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj InterfaceName ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDeclList, MethDeclTypeName, FormParsItem;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesigName ;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr, Term, Factor, OptAddTerms, OptMulTerms, OptRetExpr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondTerm, CondFact, OptCond, IfCondition;

precedence left ELSE;

/**************************************************************
*********************** Program *******************************
**************************************************************/

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE GlobalMethDecl:G2  RBRACE {: RESULT=new Program(p, D1, G2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :}
;

GlobalMethDecl ::= (GlobalMeths) OptMethodDecl:O1 {: RESULT=new GlobalMeths(O1); RESULT.setLine(O1left); :}
;

/********************** Var Declaration ***********************
**************************************************************/

DeclList ::= (VarDeclLists) DeclList:D1 DeclItem:D2 {: RESULT=new VarDeclLists(D1, D2); RESULT.setLine(D1left); :} 
			 |
			 (NoVarDecl) {: RESULT=new NoVarDecl(); :}/* epsilon */ 
			 ;
				
DeclItem ::= (ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
			 |
			 (EnumDeclaration) EnumDecl:E1 {: RESULT=new EnumDeclaration(E1); RESULT.setLine(E1left); :}
			 |
			 (VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
			 |
			 (ClasstDeclaration) ClassDecl:C1 {: RESULT=new ClasstDeclaration(C1); RESULT.setLine(C1left); :}
			 |
			 (InterfaceDeclaration) InterfaceDecl:I1 {: RESULT=new InterfaceDeclaration(I1); RESULT.setLine(I1left); :}
			 ;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
;

/********************** Consts Declaration ***********************/

ConstDecl ::= (ConstDeclarations) CONST Type:T1 ConstDeclList:C2 SEMI {: RESULT=new ConstDeclarations(T1, C2); RESULT.setLine(T1left); :}
;

ConstDeclList ::= (MultipleConsts) ConstDeclList:C1 COMMA ConstItem:C2 {: RESULT=new MultipleConsts(C1, C2); RESULT.setLine(C1left); :}
				  | 
				  (SingleConst) ConstItem:C1 {: RESULT=new SingleConst(C1); RESULT.setLine(C1left); :}
				  ;

ConstItem ::= (ConstItem) IDENT:id EQUAL Initializer:I1 {: RESULT=new ConstItem(id, I1); RESULT.setLine(idleft); :}
;

Initializer ::= (InitializerNum) NUMCONST:value {: RESULT=new InitializerNum(value); RESULT.setLine(valueleft); :}
			    |
			    (InitializerChar) CHARCONST:value {: RESULT=new InitializerChar(value); RESULT.setLine(valueleft); :}
			    |
			    (InitializerBool) BOOLCONST:value {: RESULT=new InitializerBool(value); RESULT.setLine(valueleft); :}
			    ;
			   

/********************** Enums Declaration ***********************/

EnumDecl ::= (EnumDeclarations) ENUM EnumName:E1 LBRACE EnumDeclList:E2 RBRACE {: RESULT=new EnumDeclarations(E1, E2); RESULT.setLine(E1left); :}
;

EnumName ::= (EnumNamed) IDENT:name {: RESULT=new EnumNamed(name); RESULT.setLine(nameleft); :}
;

EnumDeclList ::= (MultipleEnums) EnumDeclList:E1 COMMA EnumItem:E2 {: RESULT=new MultipleEnums(E1, E2); RESULT.setLine(E1left); :}
				 | 
				 (SingleEnum) EnumItem:E1 {: RESULT=new SingleEnum(E1); RESULT.setLine(E1left); :}
				 ;

EnumItem ::= (InitEnum) IDENT:name EQUAL NUMCONST:value {: RESULT=new InitEnum(name, value); RESULT.setLine(nameleft); :}
			 |
			 (NoInitEnum) IDENT:name {: RESULT=new NoInitEnum(name); RESULT.setLine(nameleft); :}
			 ;


/********************** Vars Declaration ***********************/

VarDecl ::= (VarDeclarations) Type:varType VarDeclList:V1 SEMI {: RESULT=new VarDeclarations(varType, V1); RESULT.setLine(varTypeleft); :}
;

VarDeclList ::= (MultipleVars) VarDeclList:V1 COMMA VarItem:V2 {: RESULT=new MultipleVars(V1, V2); RESULT.setLine(V1left); :}
				|
				(SingleVar) VarItem:V1 {: RESULT=new SingleVar(V1); RESULT.setLine(V1left); :}
				;

VarItem ::= (Var) IDENT:varName OptArraySq:O1 {: RESULT=new Var(varName, O1); RESULT.setLine(varNameleft); :}
			|
			(VarDefError) error:e
			{: parser.report_error("Greska pri definiciji globalne promenljive. Izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new VarDefError(); :}
			;

OptArraySq ::= (ArrayVar) LSQUARE RSQUARE {: RESULT=new ArrayVar(); :}
			   | 
			   (NoArrayVar) {: RESULT=new NoArrayVar(); :} /* epsilon */
			   ;

/********************** Class Declaration ***********************/

ClassDecl ::= (ClassDeclaration) CLASS ClassName:cname Extend:E1 Implement:I2 LBRACE OptVarDecl:O3 ClassMethods:C4 RBRACE {: RESULT=new ClassDeclaration(cname, E1, I2, O3, C4); RESULT.setLine(cnameleft); :}
;

ClassName ::= (ClassName) IDENT:name {: RESULT=new ClassName(name); RESULT.setLine(nameleft); :}
;

ClassMethods ::= (ClassMethodDecl) LBRACE OptMethodDecl:O1 RBRACE {: RESULT=new ClassMethodDecl(O1); RESULT.setLine(O1left); :}
				 |
				 (NoClassMethodDecl) {: RESULT=new NoClassMethodDecl(); :} /* epsilon */
				 ;

Extend ::= (SuperClass) EXTENDS Type:T1 {: RESULT=new SuperClass(T1); RESULT.setLine(T1left); :}
		   |
		   (ExtendsError) error:e
		   {: parser.report_error("Greska pri deklaraciji prosirenja natklase. Izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new ExtendsError(); :}
		   |
		   (NoSuperClass) {: RESULT=new NoSuperClass(); :} /* epsilon */
		   ;

Implement ::= (ImplInteraces) IMPLEMENTS InterfaceList:I1 {: RESULT=new ImplInteraces(I1); RESULT.setLine(I1left); :}
			   |
			   (NoImplInteraces) {: RESULT=new NoImplInteraces(); :} /* epsilon */
			   ;

InterfaceList ::= (InterfList) InterfaceList:I1 COMMA Type:T2 {: RESULT=new InterfList(I1, T2); RESULT.setLine(I1left); :}
				  |
				  (NoInterfList) Type:T1 {: RESULT=new NoInterfList(T1); RESULT.setLine(T1left); :} /* epsilon */
				  ;			   

OptVarDecl ::= (OptVars) OptVarDecl:O1 VarDecl:V2 {: RESULT=new OptVars(O1, V2); RESULT.setLine(O1left); :}
			   |
			   (NoOptVars) {: RESULT=new NoOptVars(); :} /* epsilon */
			   ;

OptMethodDecl ::= (OptMethods) OptMethodDecl:O1 MethodDeclList:M2 {: RESULT=new OptMethods(O1, M2); RESULT.setLine(O1left); :}
				  |
				  (NoOptMethods) {: RESULT=new NoOptMethods(); :} /* epsilon */
				  ;

/********************** Interface Declaration ***********************/				  

InterfaceDecl ::= (InterfaceDeclarations) INTERFACE InterfaceName:I1 LBRACE OptInterfaceMethodDeclList:O2 RBRACE {: RESULT=new InterfaceDeclarations(I1, O2); RESULT.setLine(I1left); :}
;

InterfaceName ::= (InterName) IDENT:name {: RESULT=new InterName(name); RESULT.setLine(nameleft); :}
;

OptInterfaceMethodDeclList ::=  (OptInterMethodDeclList) InterfaceMethodDeclList:I1 {: RESULT=new OptInterMethodDeclList(I1); RESULT.setLine(I1left); :}
								|
								(NoOptInterMethodDeclList) {: RESULT=new NoOptInterMethodDeclList(); :} /* epsilon */
								;

InterfaceMethodDeclList ::= (InterfaceMethodDeclarations) InterfaceMethodDeclList:I1 InterfaceMethodDecl:I2 {: RESULT=new InterfaceMethodDeclarations(I1, I2); RESULT.setLine(I1left); :}
							| 
							(SingleInterfaceMethodDeclaration) InterfaceMethodDecl:I1 {: RESULT=new SingleInterfaceMethodDeclaration(I1); RESULT.setLine(I1left); :}
							;
							
InterfaceMethodDecl ::= (InterfaceMethodDeclaration) TypeIdent:T1 IDENT:name LPAREN OptFormPars:O2 RPAREN SEMI {: RESULT=new InterfaceMethodDeclaration(T1, name, O2); RESULT.setLine(T1left); :}
;

TypeIdent ::= (TypeIdentificator) Type:retType {: RESULT=new TypeIdentificator(retType); RESULT.setLine(retTypeleft); :}
			  | 
			  (VoidIdentificator) VOID:retType {: RESULT=new VoidIdentificator(); :}
			  ;


/********************** Method Declaration ********************
**************************************************************/

MethodDeclList ::= (MethodDeclarations) MethDeclTypeName:M1 LPAREN OptFormPars:O2 RPAREN OptVarDecl:O3 LBRACE OptStmt:O4 RBRACE {: RESULT=new MethodDeclarations(M1, O2, O3, O4); RESULT.setLine(M1left); :}
;

MethDeclTypeName ::= (MethodDeclTypeName) TypeIdent:retType IDENT:methodName {: RESULT=new MethodDeclTypeName(retType, methodName); RESULT.setLine(retTypeleft); :}
;

OptStmt ::= (OptionalStmt) OptStmt:O1 Statement:S2 {: RESULT=new OptionalStmt(O1, S2); RESULT.setLine(O1left); :}
			| 
			(NoOptionalStmt) {: RESULT=new NoOptionalStmt(); :} /* epsilon */
			;

OptFormPars ::= (OptionalFormPars) FormPars:F1 {: RESULT=new OptionalFormPars(F1); RESULT.setLine(F1left); :}
				|
				(NoOptionalFormPars) {: RESULT=new NoOptionalFormPars(); :} /* epsilon */
				;			
			
			
FormPars ::= (MultipleFormPars) FormPars:F1 COMMA FormParsItem:F2 {: RESULT=new MultipleFormPars(F1, F2); RESULT.setLine(F1left); :}
			 |
			 (SingleFormPars) FormParsItem:F1 {: RESULT=new SingleFormPars(F1); RESULT.setLine(F1left); :}
			 |
			 (FormParamError) error:e
			 {: parser.report_error("Greska pri deklaraciji formalnog parametra funkcije. Izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new FormParamError(); :}
			 ;
			 
FormParsItem ::= (FormParItem) Type:typeIdent IDENT:paramName OptArraySq:O1 {: RESULT=new FormParItem(typeIdent, paramName, O1); RESULT.setLine(typeIdentleft); :}
;				  	
			 

/**************************************************************
*********************** Statements ****************************
**************************************************************/


Statement ::= (DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (IfStmt) IF LPAREN IfCondition:I1 RPAREN Statement:S2 OptElse:O3 {: RESULT=new IfStmt(I1, S2, O3); RESULT.setLine(I1left); :}
			  |
			  (ForStmt) FOR LPAREN OptForDesignStmt:O1 SEMI OptCond:O2 SEMI OptDesignStmt:O3 RPAREN Statement:S4 {: RESULT=new ForStmt(O1, O2, O3, S4); RESULT.setLine(O1left); :}
			  |
			  (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			  |
			  (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			  | 
			  (ReturnStmt) RETURN OptRetExpr:O1 SEMI {: RESULT=new ReturnStmt(O1); RESULT.setLine(O1left); :}
			  |
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr:E1 OptNumConst:O2 RPAREN SEMI {: RESULT=new PrintStmt(E1, O2); RESULT.setLine(E1left); :}
			  |
			  (BlockStmt) LBRACE OptStmt:O1 RBRACE {: RESULT=new BlockStmt(O1); RESULT.setLine(O1left); :}
			  |
			  (ErrorStmt) error:e
			  {: parser.report_error("Greska pri Statement. Izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new ErrorStmt(); :}		
			  ;

OptForDesignStmt ::= (OptForStmt) OptDesignStmt:O1 {: RESULT=new OptForStmt(O1); RESULT.setLine(O1left); :};		  

IfCondition ::= (IfCond) Condition:C1 {: RESULT=new IfCond(C1); RESULT.setLine(C1left); :}
				|
				(IfError) error:e
				{: parser.report_error("Greska u logickom iskazu IF konstrukcije. Izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new IfError(); :}
				;

OptRetExpr ::= (RetExpr) Expr:E1 {: RESULT=new RetExpr(E1); RESULT.setLine(E1left); :}
			   |
			   (NoRet) {: RESULT=new NoRet(); :} /* epsilon */
			   ;

OptNumConst ::= COMMA NUMCONST:N1 {: RESULT=new OptNumConstDerived1(N1); RESULT.setLine(N1left); :}
				| {: RESULT=new OptNumConstDerived2(); :}
				/* epsilon */ 
				;		

OptElse ::= ELSE Statement:S1 {: RESULT=new OptElseDerived1(S1); RESULT.setLine(S1left); :}
			| {: RESULT=new OptElseDerived2(); :}
			/* epsilon */
			;

OptDesignStmt ::= DesignatorStatement:D1 {: RESULT=new OptDesignStmtDerived1(D1); RESULT.setLine(D1left); :}
				  | {: RESULT=new OptDesignStmtDerived2(); :}
				  /* epsilon */
				  ;

OptCond ::= (ForCond) Condition:C1 {: RESULT=new ForCond(C1); RESULT.setLine(C1left); :}
			|
			(NoForCond) {: RESULT=new NoForCond(); :} /* epsilon */
			;				  

/*********************** Designators **************************
**************************************************************/

DesignatorStatement ::= (AssignOper) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new AssignOper(D1, A2, E3); RESULT.setLine(D1left); :}
			  			|
			  			(ProcCall) Designator:D1 LPAREN OptActPars:O2 RPAREN {: RESULT=new ProcCall(D1, O2); RESULT.setLine(D1left); :}
			  			|
			  			(PlusPlusSideEff) Designator:D1 PP {: RESULT=new PlusPlusSideEff(D1); RESULT.setLine(D1left); :}
			  			|
			  			(MinusMinusSideEff) Designator:D1 MM {: RESULT=new MinusMinusSideEff(D1); RESULT.setLine(D1left); :}
			  			|
			  			(AssignErr) Designator:D1 Assignop:A2 error:e
			  			{: parser.report_error("Greska pri konstrukciji iskaza dodele. Uspesno izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new AssignErr(D1, A2); RESULT.setLine(D1left); :}
			  			|
			  			(AssignError) Designator:D1 error:e
			  			{: parser.report_error("Greska pri konstrukciji iskaza dodele. Uspesno izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new AssignError(D1); RESULT.setLine(D1left); :}
			  			;


OptActPars ::= (WithActPars) ActPars:A1 {: RESULT=new WithActPars(A1); RESULT.setLine(A1left); :}
			   |
			   (NoActPars) {: RESULT=new NoActPars(); :} /* epsilon */
			   ;			  

ActPars ::= (MultiActPars) ActPars:A1 COMMA Expr:E2 {: RESULT=new MultiActPars(A1, E2); RESULT.setLine(A1left); :}
			|
			(SingleActPars) Expr:E1 {: RESULT=new SingleActPars(E1); RESULT.setLine(E1left); :}
			;

	
Designator ::= (DesignVar) DesigName:D1 {: RESULT=new DesignVar(D1); RESULT.setLine(D1left); :} 
			   |
			   (DesignArr) Designator:D1 LSQUARE Expr:E2 RSQUARE {: RESULT=new DesignArr(D1, E2); RESULT.setLine(D1left); :}
			   |
			   (DesignError) Designator:D1 LSQUARE error:e RSQUARE
			   {: parser.report_error("Greska prilikom pristupa objektu. Uspesno izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new DesignError(D1); RESULT.setLine(D1left); :}
			   |
			   (DesignFld) Designator:D1 DOT IDENT:id {: RESULT=new DesignFld(D1, id); RESULT.setLine(D1left); :}
			   ;


DesigName ::= (DesignatorName) IDENT:id {: RESULT=new DesignatorName(id); RESULT.setLine(idleft); :}
;


Expr ::= (Expression) OptMinus:O1 Term:term OptAddTerms:O2 {: RESULT=new Expression(O1, term, O2); RESULT.setLine(O1left); :}
;

OptMinus ::= (Negative) MINUS {: RESULT=new Negative(); :}
			 |
			 (Positive) {: RESULT=new Positive(); :} /* epsilon */
			 ;

OptAddTerms ::= (WithAddTerms) OptAddTerms:O1 Addop:A2 Term:T3 {: RESULT=new WithAddTerms(O1, A2, T3); RESULT.setLine(O1left); :}
				|
				(NoAddTerms) {: RESULT=new NoAddTerms(); :} /* epsilon */ 
				;

Term ::= (Terms) Factor:F1 OptMulTerms:O2 {: RESULT=new Terms(F1, O2); RESULT.setLine(F1left); :}
;

OptMulTerms ::= (WithMulFacts) OptMulTerms:O1 Mulop:M2 Factor:F3 {: RESULT=new WithMulFacts(O1, M2, F3); RESULT.setLine(O1left); :}
				|
				(NoMulFacts) {: RESULT=new NoMulFacts(); :} /* epsilon */
				;

Factor ::= (DesignFactor) Designator:D1 OptMethodCall:O2 {: RESULT=new DesignFactor(D1, O2); RESULT.setLine(D1left); :}
		   |
		   (NumFactor) NUMCONST:N1 {: RESULT=new NumFactor(N1); RESULT.setLine(N1left); :}
		   |
		   (CharFactor) CHARCONST:C1 {: RESULT=new CharFactor(C1); RESULT.setLine(C1left); :}
		   |
		   (BoolFactor) BOOLCONST:B1 {: RESULT=new BoolFactor(B1); RESULT.setLine(B1left); :}
		   |
		   (NewFactor) NEW Type:T1 {: RESULT=new NewFactor(T1); RESULT.setLine(T1left); :}
		   |
		   (NewArrFactor) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new NewArrFactor(T1, E2); RESULT.setLine(T1left); :}
		   |
		   (ExprFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ExprFactor(E1); RESULT.setLine(E1left); :}
		   ;


OptMethodCall ::= (WithMethodCall) LPAREN OptActPars:O1 RPAREN {: RESULT=new WithMethodCall(O1); RESULT.setLine(O1left); :}
				  |
				  (NoMethodCall) {: RESULT=new NoMethodCall(); :} /* epsilon */
				  ;	

/*********************** Condition ****************************
**************************************************************/

Condition ::= (Conditions) Condition:C1 OR CondTerm:C2 {: RESULT=new Conditions(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (ConditionSingle) CondTerm:C1 {: RESULT=new ConditionSingle(C1); RESULT.setLine(C1left); :}
			  ;

CondTerm ::= (CondTerms) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTerms(C1, C2); RESULT.setLine(C1left); :}
			 |
			 (CondTermSingle) CondFact:C1 {: RESULT=new CondTermSingle(C1); RESULT.setLine(C1left); :}
			 ;

CondFact ::= (CondFacts) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFacts(E1, R2, E3); RESULT.setLine(E1left); :}
			 |
			 (CondFactSingle) Expr:E1 {: RESULT=new CondFactSingle(E1); RESULT.setLine(E1left); :}
			 ;


/* *********************************************** */

Assignop ::= (AssignOperation) EQUAL {: RESULT=new AssignOperation(); :};

Relop ::= (RelSame) SAME {: RESULT=new RelSame(); :}
		  |
		  (RelDif) DIF {: RESULT=new RelDif(); :}
		  |
		  (RelGreather) G {: RESULT=new RelGreather(); :}
		  |
		  (RelGreatherEq) GE {: RESULT=new RelGreatherEq(); :}
		  |
		  (RelLess) L {: RESULT=new RelLess(); :}
		  |
		  (RelLessEq) LE {: RESULT=new RelLessEq(); :}
		  ;

Addop ::= (PlusOp) PLUS {: RESULT=new PlusOp(); :}
		  |
		  (MinusOp) MINUS {: RESULT=new MinusOp(); :}
		  ;

Mulop ::= (MultOp) TIMES {: RESULT=new MultOp(); :} 
		  |
		  (DivOp) DIV {: RESULT=new DivOp(); :}
		  |
		  (ModOp) MOD {: RESULT=new ModOp(); :}
		  ;		  
