

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {: errorDetected = false; :}

/**************************************************************
*********************** (Non)Terminals ************************
**************************************************************/

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal INTERFACE, DOT, CLASS, BREAK, NEW, L, OR, MM, CONST, LE, MOD, LSQUARE, READ, DIV, GE, ENUM, TIMES, DIF, G;
terminal MINUS, RSQUARE, SAME, CONTINUE, AND, PP, EXTENDS, IMPLEMENTS, FOR;

terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal String BOOLCONST;
terminal String IDENT;
terminal IF, ELSE;

nonterminal DeclList, DeclItem ;
nonterminal ConstDecl, ConstDeclList ;
nonterminal VarDecl, VarDeclList, VarItem, OptArraySq ; 
nonterminal ClassDecl, Extend, Implement, InterfaceList, OptVarDecl, OptMethodDecl, ClassMethods ;
nonterminal InterfaceDecl, InterfaceMethodDeclList, OptInterfaceMethodDeclList, InterfaceMethodDecl, OptFormPars, TypeIdent ;
nonterminal OptStmt, Statement, FormPars ;
nonterminal DesignatorStatement ;
nonterminal OptActPars, ActPars, OptMinus, OptMethodCall, OptExpr ;
nonterminal Mulop, Addop, Relop, Assignop ;
nonterminal OptNumConst ;
nonterminal Condition, CondTerm, CondFact, OptRelExpr, OptElse, OptDesignStmt, OptCond, IfCondition ;

nonterminal ConstItem;
nonterminal EnumDecl, EnumDeclList, EnumItem;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Initializer ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj EnumName ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj InterfaceName ;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDeclList, MethodDeclTypeName, FormParsItem;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesigName ;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr, Term, Factor, OptAddTerms, OptMulTerms, OptRetExpr;

precedence left ELSE;

/**************************************************************
*********************** Program *******************************
**************************************************************/

Program ::= (Program) PROG ProgName:p DeclList LBRACE OptMethodDecl  RBRACE 
;

ProgName ::= (ProgName) IDENT:pName
;

/********************** Var Declaration ***********************
**************************************************************/

DeclList ::= (VarDeclLists) DeclList DeclItem 
			 |
			 (NoVarDecl)/* epsilon */ 
			 ;
				
DeclItem ::= (ConstDeclaration) ConstDecl
			 |
			 (EnumDeclaration) EnumDecl
			 |
			 (VarDeclaration) VarDecl
			 |
			 (ClasstDeclaration) ClassDecl
			 |
			 (InterfaceDeclaration) InterfaceDecl
			 ;

Type ::= (Type) IDENT:typeName 
;

/********************** Consts Declaration ***********************/

ConstDecl ::= (ConstDeclarations) CONST Type ConstDeclList SEMI
;

ConstDeclList ::= (MultipleConsts) ConstDeclList COMMA ConstItem
				  | 
				  (SingleConst) ConstItem
				  ;

ConstItem ::= (ConstItem) IDENT:id EQUAL Initializer
;

Initializer ::= (InitializerNum) NUMCONST:value
			    |
			    (InitializerChar) CHARCONST:value
			    |
			    (InitializerBool) BOOLCONST:value
			    ;
			   

/********************** Enums Declaration ***********************/

EnumDecl ::= (EnumDeclarations) ENUM EnumName LBRACE EnumDeclList RBRACE
;

EnumName ::= (EnumNamed) IDENT:name
;

EnumDeclList ::= (MultipleEnums) EnumDeclList COMMA EnumItem
				 | 
				 (SingleEnum) EnumItem
				 ;

EnumItem ::= (InitEnum) IDENT:name EQUAL NUMCONST:value
			 |
			 (NoInitEnum) IDENT:name
			 ;


/********************** Vars Declaration ***********************/

VarDecl ::= (VarDeclarations) Type:varType VarDeclList SEMI
;

VarDeclList ::= (MultipleVars) VarDeclList COMMA VarItem
				|
				(SingleVar) VarItem
				;

VarItem ::= (Var) IDENT:varName OptArraySq
			|
			(VarDefError) error:e
			{: parser.report_error("Greska pri definiciji globalne promenljive. Izvrsen oporavak u liniji " + eleft , null); :}
			;

OptArraySq ::= (ArrayVar) LSQUARE RSQUARE
			   | 
			   (NoArrayVar) /* epsilon */
			   ;

/********************** Class Declaration ***********************/

ClassDecl ::= (ClassDeclaration) CLASS ClassName:cname Extend Implement LBRACE OptVarDecl ClassMethods RBRACE
;

ClassName ::= (ClassName) IDENT:name
;

ClassMethods ::= (ClassMethodDecl) LBRACE OptMethodDecl RBRACE
				 |
				 (NoClassMethodDecl) /* epsilon */
				 ;

Extend ::= (SuperClass) EXTENDS Type
		   |
		   (ExtendsError) error:e
		   {: parser.report_error("Greska pri deklaraciji prosirenja natklase. Izvrsen oporavak u liniji " + eleft , null); :}
		   |
		   (NoSuperClass) /* epsilon */
		   ;

Implement ::= (ImplInteraces) IMPLEMENTS InterfaceList
			   |
			   (NoImplInteraces) /* epsilon */
			   ;

InterfaceList ::= (InterfList) InterfaceList COMMA Type
				  |
				  (NoInterfList) Type /* epsilon */
				  ;			   

OptVarDecl ::= (OptVars) OptVarDecl VarDecl
			   |
			   (NoOptVars) /* epsilon */
			   ;

OptMethodDecl ::= (OptMethods) OptMethodDecl MethodDeclList
				  |
				  (NoOptMethods) /* epsilon */
				  ;

/********************** Interface Declaration ***********************/				  

InterfaceDecl ::= (InterfaceDeclarations) INTERFACE InterfaceName LBRACE OptInterfaceMethodDeclList RBRACE
;

InterfaceName ::= (InterName) IDENT:name
;

OptInterfaceMethodDeclList ::=  (OptInterMethodDeclList) InterfaceMethodDeclList
								|
								(NoOptInterMethodDeclList) /* epsilon */
								;

InterfaceMethodDeclList ::= (InterfaceMethodDeclarations) InterfaceMethodDeclList InterfaceMethodDecl
							| 
							(SingleInterfaceMethodDeclaration) InterfaceMethodDecl
							;
							
InterfaceMethodDecl ::= (InterfaceMethodDeclaration) TypeIdent IDENT:name LPAREN OptFormPars RPAREN SEMI
;

TypeIdent ::= (TypeIdentificator) Type:retType
			  | 
			  (VoidIdentificator) VOID:retType
			  ;


/********************** Method Declaration ********************
**************************************************************/

MethodDeclList ::= (MethodDeclarations) MethodDeclTypeName LPAREN OptFormPars RPAREN OptVarDecl LBRACE OptStmt RBRACE
;

MethodDeclTypeName ::= (MethodDeclTypeName) TypeIdent:retType IDENT:methodName
;

OptStmt ::= (OptionalStmt) OptStmt Statement
			| 
			(NoOptionalStmt) /* epsilon */
			;

OptFormPars ::= (OptionalFormPars) FormPars
				|
				(NoOptionalFormPars) /* epsilon */
				;			
			
			
FormPars ::= (MultipleFormPars) FormPars COMMA FormParsItem
			 |
			 (SingleFormPars) FormParsItem
			 |
			 (FormParamError) error:e
			 {: parser.report_error("Greska pri deklaraciji formalnog parametra funkcije. Izvrsen oporavak u liniji " + eleft , null); :}
			 ;
			 
FormParsItem ::= (FormParItem) Type:typeIdent IDENT:paramName OptArraySq
;				  	
			 

/**************************************************************
*********************** Statements ****************************
**************************************************************/


Statement ::= (DesignatorStmt) DesignatorStatement SEMI
			  |
			  (IfStmt) IF LPAREN IfCondition RPAREN Statement OptElse
			  |
			  (ForStmt) FOR LPAREN OptDesignStmt SEMI OptCond SEMI OptDesignStmt RPAREN Statement
			  |
			  (BreakStmt) BREAK SEMI
			  |
			  (ContinueStmt) CONTINUE SEMI
			  | 
			  (ReturnStmt) RETURN OptRetExpr SEMI
			  |
			  (ReadStmt) READ LPAREN Designator RPAREN SEMI
			  |
			  (PrintStmt) PRINT LPAREN Expr OptNumConst RPAREN SEMI
			  |
			  (BlockStmt) LBRACE OptStmt RBRACE
			  |
			  (ErrorStmt) LBRACE error:e RBRACE
			  {: parser.report_error("Greska pri Statement. Izvrsen oporavak u liniji " + eleft , null); :}
	/*		  |
			  (ErrorStmt) error:e
			  {: parser.report_error("Greska pri Statement. Izvrsen oporavak u liniji " + eleft , null); :}		*/
			  ;

IfCondition ::= (IfCond) Condition
				|
				(IfError) error:e
				{: parser.report_error("Greska u logickom iskazu IF konstrukcije. Izvrsen oporavak u liniji " + eleft , null); :}
				;

OptRetExpr ::= (RetExpr) Expr
			   |
			   (NoRet) /* epsilon */
			   ;

OptNumConst ::= COMMA NUMCONST
				|
				/* epsilon */ 
				;		

OptElse ::= ELSE Statement
			|
			/* epsilon */
			;

OptDesignStmt ::= DesignatorStatement
				  |
				  /* epsilon */
				  ;

OptCond ::= Condition
			|
			/* epsilon */
			;				  

/*********************** Designators **************************
**************************************************************/

DesignatorStatement ::= (AssignOper) Designator Assignop Expr
			  			|
			  			(ProcCall) Designator LPAREN OptActPars RPAREN
			  			|
			  			(PlusPlusSideEff) Designator PP
			  			|
			  			(MinusMinusSideEff) Designator MM
			  			|
			  			(AssignErr) Designator Assignop error:e
			  			{: parser.report_error("Greska pri konstrukciji iskaza dodele. Uspesno izvrsen oporavak u liniji " + eleft , null); :}
			  			|
			  			(AssignError) Designator error:e
			  			{: parser.report_error("Greska pri konstrukciji iskaza dodele. Uspesno izvrsen oporavak u liniji " + eleft , null); :}
			  			;


OptActPars ::= (WithActPars) ActPars
			   |
			   (NoActPars) /* epsilon */
			   ;			  

ActPars ::= (MultiActPars) ActPars COMMA Expr
			|
			(SingleActPars) Expr
			;

	
Designator ::= (DesignVar) DesigName 
			   |
			   (DesignArr) Designator LSQUARE Expr RSQUARE
			   |
			   (DesignError) Designator LSQUARE error:e RSQUARE
			   {: parser.report_error("Greska prilikom pristupa objektu. Uspesno izvrsen oporavak u liniji " + eleft , null); :}
			   |
			   (DesignFld) Designator DOT IDENT:id
			   ;


DesigName ::= (DesignatorName) IDENT:id
;


Expr ::= (Expression) OptMinus Term:term OptAddTerms
;

OptMinus ::= (Negative) MINUS
			 |
			 (Positive) /* epsilon */
			 ;

OptAddTerms ::= (WithAddTerms) OptAddTerms Addop Term
				|
				(NoAddTerms) /* epsilon */ 
				;

Term ::= (Terms) Factor OptMulTerms
;

OptMulTerms ::= (WithMulFacts) OptMulTerms Mulop Factor
				|
				(NoMulFacts) /* epsilon */
				;

Factor ::= (DesignFactor) Designator OptMethodCall
		   |
		   (NumFactor) NUMCONST
		   |
		   (CharFactor) CHARCONST
		   |
		   (BoolFactor) BOOLCONST
		   |
		   (NewFactor) NEW Type
		   |
		   (NewArrFactor) NEW Type LSQUARE Expr RSQUARE
		   |
		   (ExprFactor) LPAREN Expr RPAREN
		   ;


OptMethodCall ::= (WithMethodCall) LPAREN OptActPars RPAREN
				  |
				  (NoMethodCall) /* epsilon */
				  ;	

OptExpr ::= (WithExpr) LSQUARE Expr RSQUARE
			|
			(NoExpr) /* epsilon */
			;				  			


/*********************** Condition ****************************
**************************************************************/

Condition ::= Condition OR CondTerm
			  |
			  CondTerm
			  ;

CondTerm ::= CondTerm AND CondFact
			 |
			 CondFact
			 ;

CondFact ::= Expr OptRelExpr
;

OptRelExpr ::= Relop Expr
			   |
			   /* epsilon */
			   ;


/* *********************************************** */

Assignop ::= (AssignOperation) EQUAL;

Relop ::= (RelSame) SAME
		  |
		  (RelDif) DIF
		  |
		  (RelGreather) G
		  |
		  (RelGreatherEq) GE
		  |
		  (RelLess) L
		  |
		  (RelLessEq) LE
		  ;

Addop ::= (PlusOp) PLUS
		  |
		  (MinusOp) MINUS
		  ;

Mulop ::= (MultOp) TIMES 
		  |
		  (DivOp) DIV
		  |
		  (ModOp) MOD
		  ;		  
