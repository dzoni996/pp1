INFO  23:55:58,475 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  23:55:58,593 - #2 program
INFO  23:55:58,594 - #45 SemanticTest
INFO  23:55:58,595 - #22 const
INFO  23:55:58,596 - #45 int
INFO  23:55:58,596 - #45 x
INFO  23:55:58,597 - #12 =
INFO  23:55:58,598 - #42 5
INFO  23:55:58,598 - #8 ,
INFO  23:55:58,598 - #45 init
INFO  23:55:58,598 - #12 =
INFO  23:55:58,598 - #42 0
INFO  23:55:58,598 - #5 ;
INFO  23:55:58,598 - #22 const
INFO  23:55:58,598 - #45 bool
INFO  23:55:58,598 - #45 b
INFO  23:55:58,602 - #12 =
INFO  23:55:58,603 - #44 false
INFO  23:55:58,603 - #5 ;
INFO  23:55:58,605 - #45 int
INFO  23:55:58,605 - #45 x1
INFO  23:55:58,606 - #5 ;
INFO  23:55:58,608 - #45 int
INFO  23:55:58,609 - #45 x2
INFO  23:55:58,609 - #25 [
INFO  23:55:58,609 - #34 ]
INFO  23:55:58,609 - #5 ;
INFO  23:55:58,610 - #29 enum
INFO  23:55:58,611 - #45 nums
INFO  23:55:58,611 - #3 {
INFO  23:55:58,611 - #45 ONE
INFO  23:55:58,611 - #12 =
INFO  23:55:58,611 - #42 1
INFO  23:55:58,611 - #8 ,
INFO  23:55:58,612 - #45 TWO
INFO  23:55:58,612 - #12 =
INFO  23:55:58,612 - #42 5
INFO  23:55:58,612 - #8 ,
INFO  23:55:58,612 - #45 THREE
INFO  23:55:58,612 - #4 }
INFO  23:55:58,612 - #16 class
INFO  23:55:58,612 - #45 A
INFO  23:55:58,612 - #3 {
INFO  23:55:58,616 - #45 int
INFO  23:55:58,617 - #45 fld1
INFO  23:55:58,618 - #5 ;
INFO  23:55:58,618 - #13 void
ERROR 23:55:58,618 - 
Sintaksna greska na liniji 14
INFO  23:55:58,618 - #45 meth1
INFO  23:55:58,618 - #6 (
INFO  23:55:58,618 - #7 )
INFO  23:55:58,618 - #5 ;
INFO  23:55:58,618 - #4 }
INFO  23:55:58,620 - #14 interface
INFO  23:55:58,620 - #45 I
ERROR 23:55:58,620 - Greska pri definiciji globalne promenljive. Izvrsen oporavak u liniji 13
INFO  23:55:58,621 - #3 {
INFO  23:55:58,623 - #45 int
INFO  23:55:58,623 - #45 x
INFO  23:55:58,623 - #6 (
INFO  23:55:58,623 - #7 )
INFO  23:55:58,624 - #5 ;
INFO  23:55:58,624 - #13 void
INFO  23:55:58,625 - #45 p
INFO  23:55:58,626 - #6 (
INFO  23:55:58,626 - #7 )
INFO  23:55:58,626 - #5 ;
INFO  23:55:58,627 - #4 }
INFO  23:55:58,627 - #3 {
INFO  23:55:58,628 - #45 int
INFO  23:55:58,628 - #45 inc
INFO  23:55:58,628 - #6 (
INFO  23:55:58,629 - #45 int
INFO  23:55:58,629 - #45 n
INFO  23:55:58,629 - #8 ,
INFO  23:55:58,630 - #45 char
INFO  23:55:58,630 - #45 add
INFO  23:55:58,630 - #7 )
INFO  23:55:58,630 - #3 {
INFO  23:55:58,630 - #10 return
INFO  23:55:58,631 - #45 n
INFO  23:55:58,632 - #11 +
INFO  23:55:58,638 - #42 1
INFO  23:55:58,639 - #5 ;
INFO  23:55:58,640 - #4 }
INFO  23:55:58,640 - #13 void
INFO  23:55:58,640 - #45 printf
INFO  23:55:58,640 - #6 (
INFO  23:55:58,642 - #45 int
INFO  23:55:58,642 - #45 a
INFO  23:55:58,642 - #7 )
INFO  23:55:58,642 - #3 {
INFO  23:55:58,642 - #9 print
INFO  23:55:58,642 - #6 (
INFO  23:55:58,642 - #45 a
INFO  23:55:58,643 - #7 )
INFO  23:55:58,644 - #5 ;
INFO  23:55:58,644 - #4 }
INFO  23:55:58,644 - #45 int
INFO  23:55:58,644 - #45 main
INFO  23:55:58,645 - #6 (
INFO  23:55:58,652 - #7 )
INFO  23:55:58,652 - #45 A
INFO  23:55:58,653 - #45 a
INFO  23:55:58,653 - #5 ;
INFO  23:55:58,654 - #3 {
INFO  23:55:58,654 - #45 a
INFO  23:55:58,654 - #12 =
INFO  23:55:58,654 - #18 new
INFO  23:55:58,656 - #45 A
INFO  23:55:58,656 - #5 ;
INFO  23:55:58,657 - #45 x1
INFO  23:55:58,657 - #12 =
INFO  23:55:58,657 - #45 nums
INFO  23:55:58,657 - #15 .
INFO  23:55:58,657 - #45 TWO
INFO  23:55:58,657 - #5 ;
INFO  23:55:58,657 - #45 x2
INFO  23:55:58,657 - #25 [
INFO  23:55:58,658 - #42 0
INFO  23:55:58,658 - #34 ]
INFO  23:55:58,658 - #12 =
INFO  23:55:58,658 - #45 nums
INFO  23:55:58,658 - #15 .
INFO  23:55:58,658 - #45 ONE
INFO  23:55:58,658 - #5 ;
INFO  23:55:58,659 - #45 x2
INFO  23:55:58,659 - #25 [
INFO  23:55:58,659 - #42 1
INFO  23:55:58,659 - #34 ]
INFO  23:55:58,660 - #12 =
INFO  23:55:58,660 - #45 inc
INFO  23:55:58,660 - #6 (
INFO  23:55:58,660 - #42 2
INFO  23:55:58,660 - #8 ,
INFO  23:55:58,661 - #43 a
INFO  23:55:58,661 - #7 )
INFO  23:55:58,661 - #5 ;
INFO  23:55:58,662 - #46 if
INFO  23:55:58,662 - #6 (
INFO  23:55:58,662 - #45 x2
INFO  23:55:58,662 - #25 [
INFO  23:55:58,662 - #42 0
INFO  23:55:58,663 - #34 ]
INFO  23:55:58,663 - #32 >
INFO  23:55:58,663 - #45 x2
INFO  23:55:58,664 - #25 [
INFO  23:55:58,664 - #42 1
INFO  23:55:58,664 - #34 ]
INFO  23:55:58,664 - #7 )
INFO  23:55:58,665 - #3 {
INFO  23:55:58,665 - #45 printf
INFO  23:55:58,665 - #6 (
INFO  23:55:58,666 - #45 x2
INFO  23:55:58,666 - #25 [
INFO  23:55:58,666 - #42 0
INFO  23:55:58,666 - #34 ]
INFO  23:55:58,666 - #7 )
INFO  23:55:58,666 - #5 ;
INFO  23:55:58,666 - #4 }
INFO  23:55:58,666 - #45 printf
INFO  23:55:58,668 - #6 (
INFO  23:55:58,668 - #45 x1
INFO  23:55:58,669 - #7 )
INFO  23:55:58,669 - #5 ;
INFO  23:55:58,670 - #10 return
INFO  23:55:58,670 - #42 0
INFO  23:55:58,670 - #5 ;
INFO  23:55:58,671 - #4 }
INFO  23:55:58,671 - #4 }
INFO  23:55:58,688 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            VarDeclLists(
              VarDeclLists(
                NoVarDecl(
                ) [NoVarDecl]
                ConstDeclaration(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    MultipleConsts(
                      SingleConst(
                        ConstItem(
                         x
                          InitializerNum(
                           5
                          ) [InitializerNum]
                        ) [ConstItem]
                      ) [SingleConst]
                      ConstItem(
                       init
                        InitializerNum(
                         0
                        ) [InitializerNum]
                      ) [ConstItem]
                    ) [MultipleConsts]
                  ) [ConstDeclarations]
                ) [ConstDeclaration]
              ) [VarDeclLists]
              ConstDeclaration(
                ConstDeclarations(
                  Type(
                   bool
                  ) [Type]
                  SingleConst(
                    ConstItem(
                     b
                      InitializerBool(
                       false
                      ) [InitializerBool]
                    ) [ConstItem]
                  ) [SingleConst]
                ) [ConstDeclarations]
              ) [ConstDeclaration]
            ) [VarDeclLists]
            VarDeclaration(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
              ) [VarDeclarations]
            ) [VarDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 x2
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        EnumDeclaration(
          EnumDeclarations(
            EnumNamed(
             nums
            ) [EnumNamed]
            MultipleEnums(
              MultipleEnums(
                SingleEnum(
                  InitEnum(
                   ONE
                   1
                  ) [InitEnum]
                ) [SingleEnum]
                InitEnum(
                 TWO
                 5
                ) [InitEnum]
              ) [MultipleEnums]
              NoInitEnum(
               THREE
              ) [NoInitEnum]
            ) [MultipleEnums]
          ) [EnumDeclarations]
        ) [EnumDeclaration]
      ) [VarDeclLists]
      ClasstDeclaration(
        ClassDeclaration(
          ClassName(
           A
          ) [ClassName]
          NoSuperClass(
          ) [NoSuperClass]
          NoImplInteraces(
          ) [NoImplInteraces]
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                VarDefError(
                ) [VarDefError]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          NoClassMethodDecl(
          ) [NoClassMethodDecl]
        ) [ClassDeclaration]
      ) [ClasstDeclaration]
    ) [VarDeclLists]
    InterfaceDeclaration(
      InterfaceDeclarations(
        InterName(
         I
        ) [InterName]
        OptInterMethodDeclList(
          InterfaceMethodDeclarations(
            SingleInterfaceMethodDeclaration(
              InterfaceMethodDeclaration(
                TypeIdentificator(
                  Type(
                   int
                  ) [Type]
                ) [TypeIdentificator]
               x
                NoOptionalFormPars(
                ) [NoOptionalFormPars]
              ) [InterfaceMethodDeclaration]
            ) [SingleInterfaceMethodDeclaration]
            InterfaceMethodDeclaration(
              VoidIdentificator(
              ) [VoidIdentificator]
             p
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
            ) [InterfaceMethodDeclaration]
          ) [InterfaceMethodDeclarations]
        ) [OptInterMethodDeclList]
      ) [InterfaceDeclarations]
    ) [InterfaceDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      OptMethods(
        OptMethods(
          NoOptMethods(
          ) [NoOptMethods]
          MethodDeclarations(
            MethodDeclTypeName(
              TypeIdentificator(
                Type(
                 int
                ) [Type]
              ) [TypeIdentificator]
             inc
            ) [MethodDeclTypeName]
            OptionalFormPars(
              MultipleFormPars(
                SingleFormPars(
                  FormParItem(
                    Type(
                     int
                    ) [Type]
                   n
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [FormParItem]
                ) [SingleFormPars]
                FormParItem(
                  Type(
                   char
                  ) [Type]
                 add
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [MultipleFormPars]
            ) [OptionalFormPars]
            NoOptVars(
            ) [NoOptVars]
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              ReturnStmt(
                RetExpr(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           n
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    WithAddTerms(
                      NoAddTerms(
                      ) [NoAddTerms]
                      PlusOp(
                      ) [PlusOp]
                      Terms(
                        NumFactor(
                         1
                        ) [NumFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                    ) [WithAddTerms]
                  ) [Expression]
                ) [RetExpr]
              ) [ReturnStmt]
            ) [OptionalStmt]
          ) [MethodDeclarations]
        ) [OptMethods]
        MethodDeclarations(
          MethodDeclTypeName(
            VoidIdentificator(
            ) [VoidIdentificator]
           printf
          ) [MethodDeclTypeName]
          OptionalFormPars(
            SingleFormPars(
              FormParItem(
                Type(
                 int
                ) [Type]
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [FormParItem]
            ) [SingleFormPars]
          ) [OptionalFormPars]
          NoOptVars(
          ) [NoOptVars]
          OptionalStmt(
            NoOptionalStmt(
            ) [NoOptionalStmt]
            PrintStmt(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  DesignFactor(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    NoMethodCall(
                    ) [NoMethodCall]
                  ) [DesignFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
              OptNumConstDerived2(
              ) [OptNumConstDerived2]
            ) [PrintStmt]
          ) [OptionalStmt]
        ) [MethodDeclarations]
      ) [OptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          NoOptVars(
          ) [NoOptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                OptionalStmt(
                  OptionalStmt(
                    OptionalStmt(
                      NoOptionalStmt(
                      ) [NoOptionalStmt]
                      DesignatorStmt(
                        AssignOper(
                          DesignVar(
                            DesignatorName(
                             a
                            ) [DesignatorName]
                          ) [DesignVar]
                          AssignOperation(
                          ) [AssignOperation]
                          Expression(
                            Positive(
                            ) [Positive]
                            Terms(
                              NewFactor(
                                Type(
                                 A
                                ) [Type]
                              ) [NewFactor]
                              NoMulFacts(
                              ) [NoMulFacts]
                            ) [Terms]
                            NoAddTerms(
                            ) [NoAddTerms]
                          ) [Expression]
                        ) [AssignOper]
                      ) [DesignatorStmt]
                    ) [OptionalStmt]
                    DesignatorStmt(
                      AssignOper(
                        DesignVar(
                          DesignatorName(
                           x1
                          ) [DesignatorName]
                        ) [DesignVar]
                        AssignOperation(
                        ) [AssignOperation]
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignFld(
                                DesignVar(
                                  DesignatorName(
                                   nums
                                  ) [DesignatorName]
                                ) [DesignVar]
                               TWO
                              ) [DesignFld]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                      ) [AssignOper]
                    ) [DesignatorStmt]
                  ) [OptionalStmt]
                  DesignatorStmt(
                    AssignOper(
                      DesignArr(
                        DesignVar(
                          DesignatorName(
                           x2
                          ) [DesignatorName]
                        ) [DesignVar]
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            NumFactor(
                             0
                            ) [NumFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                      ) [DesignArr]
                      AssignOperation(
                      ) [AssignOperation]
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          DesignFactor(
                            DesignFld(
                              DesignVar(
                                DesignatorName(
                                 nums
                                ) [DesignatorName]
                              ) [DesignVar]
                             ONE
                            ) [DesignFld]
                            NoMethodCall(
                            ) [NoMethodCall]
                          ) [DesignFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                    ) [AssignOper]
                  ) [DesignatorStmt]
                ) [OptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignArr(
                      DesignVar(
                        DesignatorName(
                         x2
                        ) [DesignatorName]
                      ) [DesignVar]
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          NumFactor(
                           1
                          ) [NumFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                    ) [DesignArr]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        DesignFactor(
                          DesignVar(
                            DesignatorName(
                             inc
                            ) [DesignatorName]
                          ) [DesignVar]
                          WithMethodCall(
                            WithActPars(
                              MultiActPars(
                                SingleActPars(
                                  Expression(
                                    Positive(
                                    ) [Positive]
                                    Terms(
                                      NumFactor(
                                       2
                                      ) [NumFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                  ) [Expression]
                                ) [SingleActPars]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    CharFactor(
                                     a
                                    ) [CharFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [MultiActPars]
                            ) [WithActPars]
                          ) [WithMethodCall]
                        ) [DesignFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              IfStmt(
                IfCond(
                  ConditionSingle(
                    CondTermSingle(
                      CondFacts(
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignArr(
                                DesignVar(
                                  DesignatorName(
                                   x2
                                  ) [DesignatorName]
                                ) [DesignVar]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    NumFactor(
                                     0
                                    ) [NumFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [DesignArr]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                        RelGreather(
                        ) [RelGreather]
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignArr(
                                DesignVar(
                                  DesignatorName(
                                   x2
                                  ) [DesignatorName]
                                ) [DesignVar]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    NumFactor(
                                     1
                                    ) [NumFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [DesignArr]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                      ) [CondFacts]
                    ) [CondTermSingle]
                  ) [ConditionSingle]
                ) [IfCond]
                BlockStmt(
                  OptionalStmt(
                    NoOptionalStmt(
                    ) [NoOptionalStmt]
                    DesignatorStmt(
                      ProcCall(
                        DesignVar(
                          DesignatorName(
                           printf
                          ) [DesignatorName]
                        ) [DesignVar]
                        WithActPars(
                          SingleActPars(
                            Expression(
                              Positive(
                              ) [Positive]
                              Terms(
                                DesignFactor(
                                  DesignArr(
                                    DesignVar(
                                      DesignatorName(
                                       x2
                                      ) [DesignatorName]
                                    ) [DesignVar]
                                    Expression(
                                      Positive(
                                      ) [Positive]
                                      Terms(
                                        NumFactor(
                                         0
                                        ) [NumFactor]
                                        NoMulFacts(
                                        ) [NoMulFacts]
                                      ) [Terms]
                                      NoAddTerms(
                                      ) [NoAddTerms]
                                    ) [Expression]
                                  ) [DesignArr]
                                  NoMethodCall(
                                  ) [NoMethodCall]
                                ) [DesignFactor]
                                NoMulFacts(
                                ) [NoMulFacts]
                              ) [Terms]
                              NoAddTerms(
                              ) [NoAddTerms]
                            ) [Expression]
                          ) [SingleActPars]
                        ) [WithActPars]
                      ) [ProcCall]
                    ) [DesignatorStmt]
                  ) [OptionalStmt]
                ) [BlockStmt]
                OptElseDerived2(
                ) [OptElseDerived2]
              ) [IfStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignVar(
                  DesignatorName(
                   printf
                  ) [DesignatorName]
                ) [DesignVar]
                WithActPars(
                  SingleActPars(
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        DesignFactor(
                          DesignVar(
                            DesignatorName(
                             x1
                            ) [DesignatorName]
                          ) [DesignVar]
                          NoMethodCall(
                          ) [NoMethodCall]
                        ) [DesignFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [SingleActPars]
                ) [WithActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  23:55:58,689 - ===================================
INFO  23:55:58,691 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  23:55:58,691 - INFO:  Deklarisana konstanta x na liniji 6
INFO  23:55:58,691 - INFO:  Deklarisana konstanta init na liniji 6
INFO  23:55:58,691 - INFO:  Deklarisana konstanta b na liniji 7
INFO  23:55:58,691 - INFO:  Deklarisana globalna promenljiva x1 na liniji 8
INFO  23:55:58,691 - INFO:  Deklarisan niz x2 na liniji 9
INFO  23:55:58,691 - INFO:  Definisan enum tip nums na liniji 10
INFO  23:55:58,692 - INFO:  Definisana klasa A na liniji 12
INFO  23:55:58,692 - INFO:  Deklarisan metod x u interfejsu na liniji 18
INFO  23:55:58,692 - INFO:  Deklarisan metod p u interfejsu na liniji 19
INFO  23:55:58,692 - INFO:  Definisan interfejs I na liniji 17
INFO  23:55:58,692 - INFO: Obradjuje se funkcija inc na liniji 23
INFO  23:55:58,692 - INFO:  Deklarisan formalni parametar n na liniji 23
INFO  23:55:58,692 - INFO:  Deklarisan formalni parametar add na liniji 23
INFO  23:55:58,693 - INFO:  Pristup simbolu n na liniji 24
INFO  23:55:58,693 - INFO:  Deklarisan metod inc na liniji 23
INFO  23:55:58,693 - INFO: Obradjuje se funkcija printf na liniji 27
INFO  23:55:58,693 - INFO:  Deklarisan formalni parametar a na liniji 27
INFO  23:55:58,693 - INFO:  Pristup simbolu a na liniji 28
INFO  23:55:58,693 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  23:55:58,693 - INFO:  Deklarisan metod printf na liniji 27
INFO  23:55:58,693 - INFO: Obradjuje se funkcija main na liniji 32
INFO  23:55:58,693 - INFO:  Deklarisana promenljiva a na liniji 32
INFO  23:55:58,693 - INFO:  Pristup simbolu a na liniji 33
INFO  23:55:58,693 - INFO:  Pristup simbolu x1 na liniji 37
INFO  23:55:58,693 - INFO:  Pristup simbolu nums na liniji 37
INFO  23:55:58,696 - INFO:  Pristup konstanti nums.TWO na liniji 37
INFO  23:55:58,696 - INFO:  Pristup simbolu x2 na liniji 38
INFO  23:55:58,696 - INFO:  Pristup elementu niza x2 na liniji 38
INFO  23:55:58,696 - INFO:  Pristup simbolu nums na liniji 38
INFO  23:55:58,697 - INFO:  Pristup konstanti nums.ONE na liniji 38
INFO  23:55:58,697 - INFO:  Pristup simbolu x2 na liniji 39
INFO  23:55:58,697 - INFO:  Pristup elementu niza x2 na liniji 39
INFO  23:55:58,697 - INFO:  Pristup simbolu inc na liniji 39
INFO  23:55:58,698 - INFO:  Pozvana metoda inc na liniji 39
INFO  23:55:58,698 - INFO:  Pristup simbolu x2 na liniji 40
INFO  23:55:58,698 - INFO:  Pristup elementu niza x2 na liniji 40
INFO  23:55:58,698 - INFO:  Pristup simbolu x2 na liniji 40
INFO  23:55:58,698 - INFO:  Pristup elementu niza x2 na liniji 40
INFO  23:55:58,698 - INFO:  Pristup simbolu printf na liniji 41
INFO  23:55:58,698 - INFO:  Pristup simbolu x2 na liniji 41
INFO  23:55:58,698 - INFO:  Pristup elementu niza x2 na liniji 41
INFO  23:55:58,698 - INFO:  Pozvana metoda printf na liniji 41
INFO  23:55:58,698 - INFO:  Pristup simbolu printf na liniji 43
INFO  23:55:58,698 - INFO:  Pristup simbolu x1 na liniji 43
INFO  23:55:58,698 - INFO:  Pozvana metoda printf na liniji 43
INFO  23:55:58,698 - INFO:  Deklarisan metod main na liniji 32
