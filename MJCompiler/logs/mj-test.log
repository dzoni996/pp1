INFO  03:52:47,364 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  03:52:47,461 - #2 program
INFO  03:52:47,461 - #45 SemanticTest
INFO  03:52:47,461 - #22 const
INFO  03:52:47,464 - #45 int
INFO  03:52:47,464 - #45 x
INFO  03:52:47,464 - #12 =
INFO  03:52:47,464 - #42 6
INFO  03:52:47,465 - #8 ,
INFO  03:52:47,465 - #45 init
INFO  03:52:47,465 - #12 =
INFO  03:52:47,466 - #42 0
INFO  03:52:47,466 - #5 ;
INFO  03:52:47,467 - #45 int
INFO  03:52:47,467 - #45 x1
INFO  03:52:47,467 - #8 ,
INFO  03:52:47,468 - #45 x3
INFO  03:52:47,468 - #25 [
INFO  03:52:47,469 - #34 ]
INFO  03:52:47,469 - #5 ;
INFO  03:52:47,469 - #45 int
INFO  03:52:47,469 - #45 x2
INFO  03:52:47,469 - #25 [
INFO  03:52:47,472 - #34 ]
INFO  03:52:47,473 - #5 ;
INFO  03:52:47,473 - #29 enum
INFO  03:52:47,473 - #45 nums
INFO  03:52:47,473 - #3 {
INFO  03:52:47,473 - #45 ONE
INFO  03:52:47,473 - #12 =
INFO  03:52:47,473 - #42 1
INFO  03:52:47,473 - #8 ,
INFO  03:52:47,474 - #45 TWO
INFO  03:52:47,474 - #12 =
INFO  03:52:47,475 - #42 5
INFO  03:52:47,475 - #8 ,
INFO  03:52:47,475 - #45 THREE
INFO  03:52:47,475 - #4 }
INFO  03:52:47,475 - #16 class
INFO  03:52:47,475 - #45 A
INFO  03:52:47,476 - #3 {
INFO  03:52:47,477 - #45 int
INFO  03:52:47,477 - #45 fld1
INFO  03:52:47,477 - #5 ;
INFO  03:52:47,477 - #45 char
INFO  03:52:47,477 - #45 fld2
INFO  03:52:47,477 - #5 ;
INFO  03:52:47,477 - #4 }
INFO  03:52:47,478 - #3 {
INFO  03:52:47,479 - #13 void
INFO  03:52:47,480 - #45 main
INFO  03:52:47,481 - #6 (
INFO  03:52:47,481 - #7 )
INFO  03:52:47,481 - #45 int
INFO  03:52:47,481 - #45 var
INFO  03:52:47,481 - #8 ,
INFO  03:52:47,482 - #45 var2
INFO  03:52:47,482 - #8 ,
INFO  03:52:47,482 - #45 var6
INFO  03:52:47,482 - #5 ;
INFO  03:52:47,482 - #45 char
INFO  03:52:47,482 - #45 var3
INFO  03:52:47,482 - #25 [
INFO  03:52:47,482 - #34 ]
INFO  03:52:47,482 - #5 ;
INFO  03:52:47,483 - #45 A
INFO  03:52:47,483 - #45 a
INFO  03:52:47,483 - #5 ;
INFO  03:52:47,483 - #3 {
INFO  03:52:47,483 - #45 var3
INFO  03:52:47,483 - #12 =
INFO  03:52:47,484 - #18 new
INFO  03:52:47,487 - #45 char
INFO  03:52:47,487 - #25 [
INFO  03:52:47,487 - #42 2
INFO  03:52:47,487 - #34 ]
INFO  03:52:47,489 - #5 ;
INFO  03:52:47,490 - #45 var3
INFO  03:52:47,491 - #25 [
INFO  03:52:47,491 - #42 0
INFO  03:52:47,491 - #34 ]
INFO  03:52:47,491 - #12 =
INFO  03:52:47,491 - #43 a
INFO  03:52:47,491 - #5 ;
INFO  03:52:47,491 - #45 var3
INFO  03:52:47,492 - #25 [
INFO  03:52:47,492 - #42 1
INFO  03:52:47,492 - #34 ]
INFO  03:52:47,492 - #12 =
INFO  03:52:47,492 - #43 b
INFO  03:52:47,492 - #5 ;
INFO  03:52:47,492 - #41 for
INFO  03:52:47,492 - #6 (
INFO  03:52:47,492 - #45 var
INFO  03:52:47,492 - #12 =
INFO  03:52:47,492 - #42 0
INFO  03:52:47,492 - #5 ;
INFO  03:52:47,493 - #45 var
INFO  03:52:47,493 - #19 <
INFO  03:52:47,494 - #42 2
INFO  03:52:47,495 - #5 ;
INFO  03:52:47,501 - #45 var
INFO  03:52:47,501 - #38 ++
INFO  03:52:47,501 - #7 )
INFO  03:52:47,502 - #9 print
INFO  03:52:47,502 - #6 (
INFO  03:52:47,502 - #45 var3
INFO  03:52:47,502 - #25 [
INFO  03:52:47,502 - #45 var
INFO  03:52:47,502 - #34 ]
INFO  03:52:47,502 - #8 ,
INFO  03:52:47,502 - #42 3
INFO  03:52:47,502 - #7 )
INFO  03:52:47,502 - #5 ;
INFO  03:52:47,503 - #4 }
INFO  03:52:47,505 - #4 }
INFO  03:52:47,518 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        NoClassMethodDecl(
        ) [NoClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          VoidIdentificator(
          ) [VoidIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            OptVars(
              NoOptVars(
              ) [NoOptVars]
              VarDeclarations(
                Type(
                 int
                ) [Type]
                MultipleVars(
                  MultipleVars(
                    SingleVar(
                      Var(
                       var
                        NoArrayVar(
                        ) [NoArrayVar]
                      ) [Var]
                    ) [SingleVar]
                    Var(
                     var2
                      NoArrayVar(
                      ) [NoArrayVar]
                    ) [Var]
                  ) [MultipleVars]
                  Var(
                   var6
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [MultipleVars]
              ) [VarDeclarations]
            ) [OptVars]
            VarDeclarations(
              Type(
               char
              ) [Type]
              SingleVar(
                Var(
                 var3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       var3
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewArrFactor(
                          Type(
                           char
                          ) [Type]
                          Expression(
                            Positive(
                            ) [Positive]
                            Terms(
                              NumFactor(
                               2
                              ) [NumFactor]
                              NoMulFacts(
                              ) [NoMulFacts]
                            ) [Terms]
                            NoAddTerms(
                            ) [NoAddTerms]
                          ) [Expression]
                          NoInitArr(
                          ) [NoInitArr]
                        ) [NewArrFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignArr(
                    DesignVar(
                      DesignatorName(
                       var3
                      ) [DesignatorName]
                    ) [DesignVar]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NumFactor(
                         0
                        ) [NumFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [DesignArr]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignArr(
                  DesignVar(
                    DesignatorName(
                     var3
                    ) [DesignatorName]
                  ) [DesignVar]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NumFactor(
                       1
                      ) [NumFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [DesignArr]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    CharFactor(
                     b
                    ) [CharFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ForStmt(
            OptForStmt(
              OptDesignStmtDerived1(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     var
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NumFactor(
                       0
                      ) [NumFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [OptDesignStmtDerived1]
            ) [OptForStmt]
            ForCond(
              ConditionSingle(
                CondTermSingle(
                  CondFacts(
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        DesignFactor(
                          DesignVar(
                            DesignatorName(
                             var
                            ) [DesignatorName]
                          ) [DesignVar]
                          NoMethodCall(
                          ) [NoMethodCall]
                        ) [DesignFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                    RelLess(
                    ) [RelLess]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NumFactor(
                         2
                        ) [NumFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [CondFacts]
                ) [CondTermSingle]
              ) [ConditionSingle]
            ) [ForCond]
            CondEnd(
            ) [CondEnd]
            OptForDesignStmt2(
              OptDesignStmtDerived1(
                PlusPlusSideEff(
                  DesignVar(
                    DesignatorName(
                     var
                    ) [DesignatorName]
                  ) [DesignVar]
                ) [PlusPlusSideEff]
              ) [OptDesignStmtDerived1]
            ) [OptForDesignStmt2]
            ForStatement(
              PrintStmt(
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    DesignFactor(
                      DesignArr(
                        DesignVar(
                          DesignatorName(
                           var3
                          ) [DesignatorName]
                        ) [DesignVar]
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignVar(
                                DesignatorName(
                                 var
                                ) [DesignatorName]
                              ) [DesignVar]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                      ) [DesignArr]
                      NoMethodCall(
                      ) [NoMethodCall]
                    ) [DesignFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
                PrintWidth(
                 3
                ) [PrintWidth]
              ) [PrintStmt]
            ) [ForStatement]
          ) [ForStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  03:52:47,519 - ===================================
INFO  03:52:47,519 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  03:52:47,520 - INFO:  Deklarisana konstanta x na liniji 6
INFO  03:52:47,520 - INFO:  Deklarisana konstanta init na liniji 6
INFO  03:52:47,520 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  03:52:47,520 - INFO:  Deklarisan niz x3 na liniji 7
INFO  03:52:47,520 - INFO:  Deklarisan niz x2 na liniji 8
INFO  03:52:47,521 - INFO:  Definisan enum tip nums na liniji 9
INFO  03:52:47,522 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  03:52:47,522 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  03:52:47,522 - INFO:  Definisana klasa A na liniji 11
INFO  03:52:47,522 - INFO:  Obradjuje se funkcija main na liniji 44
INFO  03:52:47,522 - INFO:  Deklarisana promenljiva var na liniji 44
INFO  03:52:47,522 - INFO:  Deklarisana promenljiva var2 na liniji 44
INFO  03:52:47,522 - INFO:  Deklarisana promenljiva var6 na liniji 44
INFO  03:52:47,522 - INFO:  Deklarisan niz var3 na liniji 44
INFO  03:52:47,522 - INFO:  Deklarisana promenljiva a na liniji 44
INFO  03:52:47,523 - INFO:  Pristup simbolu var3 na liniji 47
INFO  03:52:47,523 - INFO:  Pristup simbolu var3 na liniji 48
INFO  03:52:47,523 - INFO:  Pristup elementu niza var3 na liniji 48
INFO  03:52:47,523 - INFO:  Pristup simbolu var3 na liniji 49
INFO  03:52:47,523 - INFO:  Pristup elementu niza var3 na liniji 49
INFO  03:52:47,523 - INFO:  Pristup simbolu var na liniji 50
INFO  03:52:47,525 - INFO:  Pristup simbolu var na liniji 50
INFO  03:52:47,525 - INFO:  Pristup simbolu var na liniji 50
INFO  03:52:47,525 - INFO:  Pristup simbolu var3 na liniji 51
INFO  03:52:47,525 - INFO:  Pristup simbolu var na liniji 51
INFO  03:52:47,525 - INFO:  Pristup elementu niza var3 na liniji 51
INFO  03:52:47,525 - INFO:  Poziv PRINT funkcije na liniji 8
INFO  03:52:47,525 - INFO:  Deklarisan metod main na liniji 44
INFO  03:52:47,525 - ===================================
INFO  03:52:47,542 - Uspesno parsiranje!
