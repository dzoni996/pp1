INFO  22:22:36,193 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  22:22:36,306 - #2 program
INFO  22:22:36,306 - #45 SemanticTest
INFO  22:22:36,306 - #22 const
INFO  22:22:36,308 - #45 int
INFO  22:22:36,308 - #45 x
INFO  22:22:36,309 - #12 =
INFO  22:22:36,309 - #42 6
INFO  22:22:36,310 - #8 ,
INFO  22:22:36,311 - #45 init
INFO  22:22:36,311 - #12 =
INFO  22:22:36,311 - #42 0
INFO  22:22:36,311 - #5 ;
INFO  22:22:36,311 - #45 int
INFO  22:22:36,312 - #45 x1
INFO  22:22:36,312 - #8 ,
INFO  22:22:36,314 - #45 x3
INFO  22:22:36,314 - #25 [
INFO  22:22:36,314 - #34 ]
INFO  22:22:36,314 - #5 ;
INFO  22:22:36,315 - #45 int
INFO  22:22:36,316 - #45 x2
INFO  22:22:36,316 - #25 [
INFO  22:22:36,317 - #34 ]
INFO  22:22:36,317 - #5 ;
INFO  22:22:36,317 - #29 enum
INFO  22:22:36,317 - #45 nums
INFO  22:22:36,317 - #3 {
INFO  22:22:36,317 - #45 ONE
INFO  22:22:36,317 - #12 =
INFO  22:22:36,317 - #42 1
INFO  22:22:36,317 - #8 ,
INFO  22:22:36,317 - #45 TWO
INFO  22:22:36,318 - #12 =
INFO  22:22:36,318 - #42 5
INFO  22:22:36,319 - #8 ,
INFO  22:22:36,319 - #45 THREE
INFO  22:22:36,319 - #4 }
INFO  22:22:36,319 - #16 class
INFO  22:22:36,319 - #45 A
INFO  22:22:36,319 - #3 {
INFO  22:22:36,321 - #45 int
INFO  22:22:36,321 - #45 fld1
INFO  22:22:36,321 - #5 ;
INFO  22:22:36,321 - #45 char
INFO  22:22:36,322 - #45 fld2
INFO  22:22:36,322 - #5 ;
INFO  22:22:36,322 - #4 }
INFO  22:22:36,323 - #3 {
INFO  22:22:36,324 - #45 int
INFO  22:22:36,324 - #45 main
INFO  22:22:36,325 - #6 (
INFO  22:22:36,325 - #7 )
INFO  22:22:36,326 - #45 int
INFO  22:22:36,326 - #45 var
INFO  22:22:36,326 - #5 ;
INFO  22:22:36,326 - #3 {
INFO  22:22:36,326 - #45 x2
INFO  22:22:36,327 - #12 =
INFO  22:22:36,328 - #18 new
INFO  22:22:36,330 - #45 int
INFO  22:22:36,330 - #25 [
INFO  22:22:36,330 - #42 5
INFO  22:22:36,331 - #34 ]
INFO  22:22:36,332 - #5 ;
INFO  22:22:36,332 - #45 x3
INFO  22:22:36,333 - #12 =
INFO  22:22:36,333 - #18 new
INFO  22:22:36,333 - #45 int
INFO  22:22:36,333 - #25 [
INFO  22:22:36,333 - #42 2
INFO  22:22:36,333 - #34 ]
INFO  22:22:36,333 - #5 ;
INFO  22:22:36,333 - #45 x2
INFO  22:22:36,333 - #25 [
INFO  22:22:36,333 - #42 0
INFO  22:22:36,333 - #34 ]
INFO  22:22:36,334 - #12 =
INFO  22:22:36,334 - #42 0
INFO  22:22:36,334 - #5 ;
INFO  22:22:36,334 - #45 var
INFO  22:22:36,334 - #12 =
INFO  22:22:36,335 - #45 nums
INFO  22:22:36,335 - #15 .
INFO  22:22:36,335 - #45 ONE
INFO  22:22:36,335 - #5 ;
INFO  22:22:36,336 - #45 var
INFO  22:22:36,336 - #38 ++
INFO  22:22:36,336 - #5 ;
INFO  22:22:36,337 - #45 var
INFO  22:22:36,337 - #12 =
INFO  22:22:36,337 - #45 var
INFO  22:22:36,337 - #11 +
INFO  22:22:36,337 - #45 x
INFO  22:22:36,338 - #5 ;
INFO  22:22:36,339 - #9 print
INFO  22:22:36,339 - #6 (
INFO  22:22:36,339 - #45 var
INFO  22:22:36,339 - #7 )
INFO  22:22:36,340 - #5 ;
INFO  22:22:36,341 - #10 return
INFO  22:22:36,346 - #42 0
INFO  22:22:36,346 - #5 ;
INFO  22:22:36,347 - #4 }
INFO  22:22:36,347 - #4 }
INFO  22:22:36,363 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        NoClassMethodDecl(
        ) [NoClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          NoOptVars(
          ) [NoOptVars]
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               var
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                OptionalStmt(
                  OptionalStmt(
                    OptionalStmt(
                      OptionalStmt(
                        NoOptionalStmt(
                        ) [NoOptionalStmt]
                        DesignatorStmt(
                          AssignOper(
                            DesignVar(
                              DesignatorName(
                               x2
                              ) [DesignatorName]
                            ) [DesignVar]
                            AssignOperation(
                            ) [AssignOperation]
                            Expression(
                              Positive(
                              ) [Positive]
                              Terms(
                                NewArrFactor(
                                  Type(
                                   int
                                  ) [Type]
                                  Expression(
                                    Positive(
                                    ) [Positive]
                                    Terms(
                                      NumFactor(
                                       5
                                      ) [NumFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                  ) [Expression]
                                ) [NewArrFactor]
                                NoMulFacts(
                                ) [NoMulFacts]
                              ) [Terms]
                              NoAddTerms(
                              ) [NoAddTerms]
                            ) [Expression]
                          ) [AssignOper]
                        ) [DesignatorStmt]
                      ) [OptionalStmt]
                      DesignatorStmt(
                        AssignOper(
                          DesignVar(
                            DesignatorName(
                             x3
                            ) [DesignatorName]
                          ) [DesignVar]
                          AssignOperation(
                          ) [AssignOperation]
                          Expression(
                            Positive(
                            ) [Positive]
                            Terms(
                              NewArrFactor(
                                Type(
                                 int
                                ) [Type]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    NumFactor(
                                     2
                                    ) [NumFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [NewArrFactor]
                              NoMulFacts(
                              ) [NoMulFacts]
                            ) [Terms]
                            NoAddTerms(
                            ) [NoAddTerms]
                          ) [Expression]
                        ) [AssignOper]
                      ) [DesignatorStmt]
                    ) [OptionalStmt]
                    DesignatorStmt(
                      AssignOper(
                        DesignArr(
                          DesignVar(
                            DesignatorName(
                             x2
                            ) [DesignatorName]
                          ) [DesignVar]
                          Expression(
                            Positive(
                            ) [Positive]
                            Terms(
                              NumFactor(
                               0
                              ) [NumFactor]
                              NoMulFacts(
                              ) [NoMulFacts]
                            ) [Terms]
                            NoAddTerms(
                            ) [NoAddTerms]
                          ) [Expression]
                        ) [DesignArr]
                        AssignOperation(
                        ) [AssignOperation]
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            NumFactor(
                             0
                            ) [NumFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                      ) [AssignOper]
                    ) [DesignatorStmt]
                  ) [OptionalStmt]
                  DesignatorStmt(
                    AssignOper(
                      DesignVar(
                        DesignatorName(
                         var
                        ) [DesignatorName]
                      ) [DesignVar]
                      AssignOperation(
                      ) [AssignOperation]
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          DesignFactor(
                            DesignFld(
                              DesignVar(
                                DesignatorName(
                                 nums
                                ) [DesignatorName]
                              ) [DesignVar]
                             ONE
                            ) [DesignFld]
                            NoMethodCall(
                            ) [NoMethodCall]
                          ) [DesignFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                    ) [AssignOper]
                  ) [DesignatorStmt]
                ) [OptionalStmt]
                DesignatorStmt(
                  PlusPlusSideEff(
                    DesignVar(
                      DesignatorName(
                       var
                      ) [DesignatorName]
                    ) [DesignVar]
                  ) [PlusPlusSideEff]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     var
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           var
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    WithAddTerms(
                      NoAddTerms(
                      ) [NoAddTerms]
                      PlusOp(
                      ) [PlusOp]
                      Terms(
                        DesignFactor(
                          DesignVar(
                            DesignatorName(
                             x
                            ) [DesignatorName]
                          ) [DesignVar]
                          NoMethodCall(
                          ) [NoMethodCall]
                        ) [DesignFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                    ) [WithAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            PrintStmt(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  DesignFactor(
                    DesignVar(
                      DesignatorName(
                       var
                      ) [DesignatorName]
                    ) [DesignVar]
                    NoMethodCall(
                    ) [NoMethodCall]
                  ) [DesignFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
              OptNumConstDerived2(
              ) [OptNumConstDerived2]
            ) [PrintStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  22:22:36,364 - ===================================
INFO  22:22:36,365 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  22:22:36,365 - INFO:  Deklarisana konstanta x na liniji 6
INFO  22:22:36,365 - INFO:  Deklarisana konstanta init na liniji 6
INFO  22:22:36,365 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  22:22:36,365 - INFO:  Deklarisan niz x3 na liniji 7
INFO  22:22:36,365 - INFO:  Deklarisan niz x2 na liniji 8
INFO  22:22:36,365 - INFO:  Definisan enum tip nums na liniji 9
INFO  22:22:36,366 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  22:22:36,366 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  22:22:36,366 - INFO:  Definisana klasa A na liniji 11
INFO  22:22:36,367 - INFO:  Obradjuje se funkcija main na liniji 23
INFO  22:22:36,367 - INFO:  Deklarisana promenljiva var na liniji 23
INFO  22:22:36,367 - INFO:  Pristup simbolu x2 na liniji 25
INFO  22:22:36,367 - INFO:  Pristup simbolu x3 na liniji 27
INFO  22:22:36,368 - INFO:  Pristup simbolu x2 na liniji 29
INFO  22:22:36,368 - INFO:  Pristup elementu niza x2 na liniji 29
INFO  22:22:36,368 - INFO:  Pristup simbolu var na liniji 31
INFO  22:22:36,368 - INFO:  Pristup simbolu nums na liniji 31
INFO  22:22:36,368 - INFO:  Pristup konstanti nums.ONE na liniji 31
INFO  22:22:36,368 - INFO:  Pristup simbolu var na liniji 33
INFO  22:22:36,368 - INFO:  Pristup simbolu var na liniji 38
INFO  22:22:36,368 - INFO:  Pristup simbolu var na liniji 38
INFO  22:22:36,368 - INFO:  Pristup simbolu x na liniji 38
INFO  22:22:36,368 - INFO:  Pristup simbolu var na liniji 42
INFO  22:22:36,369 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  22:22:36,369 - INFO:  Deklarisan metod main na liniji 23
INFO  22:22:36,369 - ===================================
INFO  22:22:36,383 - Uspesno parsiranje!
