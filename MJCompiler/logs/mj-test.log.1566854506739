INFO  23:21:22,969 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  23:21:23,094 - #2 program
INFO  23:21:23,094 - #45 SemanticTest
INFO  23:21:23,094 - #22 const
INFO  23:21:23,094 - #45 int
INFO  23:21:23,094 - #45 x
INFO  23:21:23,094 - #12 =
INFO  23:21:23,094 - #42 6
INFO  23:21:23,110 - #8 ,
INFO  23:21:23,110 - #45 init
INFO  23:21:23,110 - #12 =
INFO  23:21:23,110 - #42 0
INFO  23:21:23,110 - #5 ;
INFO  23:21:23,110 - #45 int
INFO  23:21:23,110 - #45 x1
INFO  23:21:23,110 - #8 ,
INFO  23:21:23,110 - #45 x3
INFO  23:21:23,110 - #25 [
INFO  23:21:23,110 - #34 ]
INFO  23:21:23,110 - #5 ;
INFO  23:21:23,110 - #45 int
INFO  23:21:23,110 - #45 x2
INFO  23:21:23,110 - #25 [
INFO  23:21:23,141 - #34 ]
INFO  23:21:23,141 - #5 ;
INFO  23:21:23,141 - #29 enum
INFO  23:21:23,141 - #45 nums
INFO  23:21:23,141 - #3 {
INFO  23:21:23,141 - #45 ONE
INFO  23:21:23,141 - #12 =
INFO  23:21:23,141 - #42 1
INFO  23:21:23,141 - #8 ,
INFO  23:21:23,141 - #45 TWO
INFO  23:21:23,141 - #12 =
INFO  23:21:23,141 - #42 5
INFO  23:21:23,141 - #8 ,
INFO  23:21:23,141 - #45 THREE
INFO  23:21:23,141 - #4 }
INFO  23:21:23,141 - #16 class
INFO  23:21:23,141 - #45 A
INFO  23:21:23,141 - #3 {
INFO  23:21:23,141 - #45 int
INFO  23:21:23,141 - #45 fld1
INFO  23:21:23,141 - #5 ;
INFO  23:21:23,141 - #45 char
INFO  23:21:23,141 - #45 fld2
INFO  23:21:23,141 - #5 ;
INFO  23:21:23,141 - #4 }
INFO  23:21:23,141 - #3 {
INFO  23:21:23,141 - #45 int
INFO  23:21:23,141 - #45 printf
INFO  23:21:23,141 - #6 (
INFO  23:21:23,141 - #45 int
INFO  23:21:23,141 - #45 a
INFO  23:21:23,141 - #8 ,
INFO  23:21:23,141 - #45 int
INFO  23:21:23,141 - #45 b
INFO  23:21:23,141 - #8 ,
INFO  23:21:23,141 - #45 int
INFO  23:21:23,141 - #45 c
INFO  23:21:23,141 - #7 )
INFO  23:21:23,141 - #3 {
INFO  23:21:23,141 - #9 print
INFO  23:21:23,141 - #6 (
INFO  23:21:23,141 - #45 a
INFO  23:21:23,141 - #7 )
INFO  23:21:23,141 - #5 ;
INFO  23:21:23,141 - #9 print
INFO  23:21:23,157 - #6 (
INFO  23:21:23,157 - #45 b
INFO  23:21:23,157 - #7 )
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #9 print
INFO  23:21:23,157 - #6 (
INFO  23:21:23,157 - #45 c
INFO  23:21:23,157 - #7 )
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #10 return
INFO  23:21:23,157 - #42 22
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #4 }
INFO  23:21:23,157 - #45 int
INFO  23:21:23,157 - #45 inc
INFO  23:21:23,157 - #6 (
INFO  23:21:23,157 - #45 int
INFO  23:21:23,157 - #45 x
INFO  23:21:23,157 - #7 )
INFO  23:21:23,157 - #3 {
INFO  23:21:23,157 - #10 return
INFO  23:21:23,157 - #45 x
INFO  23:21:23,157 - #11 +
INFO  23:21:23,157 - #42 1
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #4 }
INFO  23:21:23,157 - #45 int
INFO  23:21:23,157 - #45 test
INFO  23:21:23,157 - #6 (
INFO  23:21:23,157 - #45 int
INFO  23:21:23,157 - #45 xa
INFO  23:21:23,157 - #8 ,
INFO  23:21:23,157 - #45 char
INFO  23:21:23,157 - #45 xc
INFO  23:21:23,157 - #7 )
INFO  23:21:23,157 - #3 {
INFO  23:21:23,157 - #45 xa
INFO  23:21:23,157 - #12 =
INFO  23:21:23,157 - #42 1
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #45 xc
INFO  23:21:23,157 - #12 =
INFO  23:21:23,157 - #43 a
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #10 return
INFO  23:21:23,157 - #42 0
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #4 }
INFO  23:21:23,157 - #45 int
INFO  23:21:23,157 - #45 main
INFO  23:21:23,157 - #6 (
INFO  23:21:23,157 - #7 )
INFO  23:21:23,157 - #45 int
INFO  23:21:23,157 - #45 var
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #45 A
INFO  23:21:23,157 - #45 a
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #3 {
INFO  23:21:23,157 - #45 var
INFO  23:21:23,157 - #12 =
INFO  23:21:23,157 - #42 1
INFO  23:21:23,157 - #5 ;
INFO  23:21:23,157 - #46 if
INFO  23:21:23,157 - #6 (
INFO  23:21:23,157 - #45 var
INFO  23:21:23,157 - #35 ==
INFO  23:21:23,157 - #42 1
INFO  23:21:23,157 - #7 )
INFO  23:21:23,173 - #9 print
INFO  23:21:23,173 - #6 (
INFO  23:21:23,173 - #42 6
INFO  23:21:23,173 - #8 ,
INFO  23:21:23,173 - #42 2
INFO  23:21:23,173 - #7 )
INFO  23:21:23,173 - #5 ;
INFO  23:21:23,173 - #47 else
INFO  23:21:23,173 - #9 print
INFO  23:21:23,173 - #6 (
INFO  23:21:23,173 - #42 12
INFO  23:21:23,173 - #8 ,
INFO  23:21:23,173 - #42 2
INFO  23:21:23,173 - #7 )
INFO  23:21:23,173 - #5 ;
INFO  23:21:23,173 - #10 return
INFO  23:21:23,173 - #42 0
INFO  23:21:23,173 - #5 ;
INFO  23:21:23,173 - #4 }
INFO  23:21:23,173 - #4 }
INFO  23:21:23,188 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        NoClassMethodDecl(
        ) [NoClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      OptMethods(
        OptMethods(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                TypeIdentificator(
                  Type(
                   int
                  ) [Type]
                ) [TypeIdentificator]
               printf
              ) [MethodDeclTypeName]
              OptionalFormPars(
                MultipleFormPars(
                  MultipleFormPars(
                    SingleFormPars(
                      FormParItem(
                        Type(
                         int
                        ) [Type]
                       a
                        NoArrayVar(
                        ) [NoArrayVar]
                      ) [FormParItem]
                    ) [SingleFormPars]
                    FormParItem(
                      Type(
                       int
                      ) [Type]
                     b
                      NoArrayVar(
                      ) [NoArrayVar]
                    ) [FormParItem]
                  ) [MultipleFormPars]
                  FormParItem(
                    Type(
                     int
                    ) [Type]
                   c
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [FormParItem]
                ) [MultipleFormPars]
              ) [OptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              OptionalStmt(
                OptionalStmt(
                  OptionalStmt(
                    OptionalStmt(
                      NoOptionalStmt(
                      ) [NoOptionalStmt]
                      PrintStmt(
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignVar(
                                DesignatorName(
                                 a
                                ) [DesignatorName]
                              ) [DesignVar]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                        DefaultWidth(
                        ) [DefaultWidth]
                      ) [PrintStmt]
                    ) [OptionalStmt]
                    PrintStmt(
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          DesignFactor(
                            DesignVar(
                              DesignatorName(
                               b
                              ) [DesignatorName]
                            ) [DesignVar]
                            NoMethodCall(
                            ) [NoMethodCall]
                          ) [DesignFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                      DefaultWidth(
                      ) [DefaultWidth]
                    ) [PrintStmt]
                  ) [OptionalStmt]
                  PrintStmt(
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        DesignFactor(
                          DesignVar(
                            DesignatorName(
                             c
                            ) [DesignatorName]
                          ) [DesignVar]
                          NoMethodCall(
                          ) [NoMethodCall]
                        ) [DesignFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                    DefaultWidth(
                    ) [DefaultWidth]
                  ) [PrintStmt]
                ) [OptionalStmt]
                ReturnStmt(
                  RetExpr(
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NumFactor(
                         22
                        ) [NumFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [RetExpr]
                ) [ReturnStmt]
              ) [OptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
          MethodDeclarations(
            MethodDeclTypeName(
              TypeIdentificator(
                Type(
                 int
                ) [Type]
              ) [TypeIdentificator]
             inc
            ) [MethodDeclTypeName]
            OptionalFormPars(
              SingleFormPars(
                FormParItem(
                  Type(
                   int
                  ) [Type]
                 x
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [SingleFormPars]
            ) [OptionalFormPars]
            NoOptVars(
            ) [NoOptVars]
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              ReturnStmt(
                RetExpr(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           x
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    WithAddTerms(
                      NoAddTerms(
                      ) [NoAddTerms]
                      PlusOp(
                      ) [PlusOp]
                      Terms(
                        NumFactor(
                         1
                        ) [NumFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                    ) [WithAddTerms]
                  ) [Expression]
                ) [RetExpr]
              ) [ReturnStmt]
            ) [OptionalStmt]
          ) [MethodDeclarations]
        ) [OptMethods]
        MethodDeclarations(
          MethodDeclTypeName(
            TypeIdentificator(
              Type(
               int
              ) [Type]
            ) [TypeIdentificator]
           test
          ) [MethodDeclTypeName]
          OptionalFormPars(
            MultipleFormPars(
              SingleFormPars(
                FormParItem(
                  Type(
                   int
                  ) [Type]
                 xa
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [SingleFormPars]
              FormParItem(
                Type(
                 char
                ) [Type]
               xc
                NoArrayVar(
                ) [NoArrayVar]
              ) [FormParItem]
            ) [MultipleFormPars]
          ) [OptionalFormPars]
          NoOptVars(
          ) [NoOptVars]
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       xa
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NumFactor(
                         1
                        ) [NumFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     xc
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            ReturnStmt(
              RetExpr(
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     0
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [RetExpr]
            ) [ReturnStmt]
          ) [OptionalStmt]
        ) [MethodDeclarations]
      ) [OptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     var
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NumFactor(
                       1
                      ) [NumFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            IfStmt(
              IfCond(
                ConditionSingle(
                  CondTermSingle(
                    CondFacts(
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          DesignFactor(
                            DesignVar(
                              DesignatorName(
                               var
                              ) [DesignatorName]
                            ) [DesignVar]
                            NoMethodCall(
                            ) [NoMethodCall]
                          ) [DesignFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                      RelSame(
                      ) [RelSame]
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          NumFactor(
                           1
                          ) [NumFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                    ) [CondFacts]
                  ) [CondTermSingle]
                ) [ConditionSingle]
              ) [IfCond]
              IfStart(
              ) [IfStart]
              PrintStmt(
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     6
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
                PrintWidth(
                 2
                ) [PrintWidth]
              ) [PrintStmt]
              ElseStmt(
                ElseStart(
                ) [ElseStart]
                PrintStmt(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NumFactor(
                       12
                      ) [NumFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                  PrintWidth(
                   2
                  ) [PrintWidth]
                ) [PrintStmt]
                ElseEnd(
                ) [ElseEnd]
              ) [ElseStmt]
            ) [IfStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  23:21:23,188 - ===================================
INFO  23:21:23,188 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  23:21:23,188 - INFO:  Deklarisana konstanta x na liniji 6
INFO  23:21:23,188 - INFO:  Deklarisana konstanta init na liniji 6
INFO  23:21:23,188 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  23:21:23,188 - INFO:  Deklarisan niz x3 na liniji 7
INFO  23:21:23,188 - INFO:  Deklarisan niz x2 na liniji 8
INFO  23:21:23,204 - INFO:  Definisan enum tip nums na liniji 9
INFO  23:21:23,204 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  23:21:23,204 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  23:21:23,204 - INFO:  Definisana klasa A na liniji 11
INFO  23:21:23,204 - INFO:  Obradjuje se funkcija printf na liniji 21
INFO  23:21:23,204 - INFO:  Deklarisan formalni parametar a na liniji 21
INFO  23:21:23,204 - INFO:  Deklarisan formalni parametar b na liniji 21
INFO  23:21:23,204 - INFO:  Deklarisan formalni parametar c na liniji 21
INFO  23:21:23,204 - INFO:  Pristup simbolu a na liniji 23
INFO  23:21:23,204 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  23:21:23,204 - INFO:  Pristup simbolu b na liniji 25
INFO  23:21:23,204 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  23:21:23,204 - INFO:  Pristup simbolu c na liniji 27
INFO  23:21:23,204 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  23:21:23,204 - INFO:  Deklarisan metod printf na liniji 21
INFO  23:21:23,204 - INFO:  Obradjuje se funkcija inc na liniji 33
INFO  23:21:23,204 - INFO:  Deklarisan formalni parametar x na liniji 33
INFO  23:21:23,204 - INFO:  Pristup simbolu x na liniji 34
INFO  23:21:23,204 - INFO:  Deklarisan metod inc na liniji 33
INFO  23:21:23,204 - INFO:  Obradjuje se funkcija test na liniji 37
INFO  23:21:23,204 - INFO:  Deklarisan formalni parametar xa na liniji 37
INFO  23:21:23,204 - INFO:  Deklarisan formalni parametar xc na liniji 37
INFO  23:21:23,204 - INFO:  Pristup simbolu xa na liniji 38
INFO  23:21:23,204 - INFO:  Pristup simbolu xc na liniji 39
INFO  23:21:23,204 - INFO:  Deklarisan metod test na liniji 37
INFO  23:21:23,204 - INFO:  Obradjuje se funkcija main na liniji 44
INFO  23:21:23,204 - INFO:  Deklarisana promenljiva var na liniji 44
INFO  23:21:23,204 - INFO:  Deklarisana promenljiva a na liniji 44
INFO  23:21:23,204 - INFO:  Pristup simbolu var na liniji 48
INFO  23:21:23,204 - INFO:  Pristup simbolu var na liniji 50
INFO  23:21:23,204 - INFO:  Poziv PRINT funkcije na liniji 8
INFO  23:21:23,204 - INFO:  Poziv PRINT funkcije na liniji 8
INFO  23:21:23,204 - INFO:  Deklarisan metod main na liniji 44
INFO  23:21:23,204 - ===================================
INFO  23:21:23,204 - Uspesno parsiranje!
