INFO  17:54:32,951 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  17:54:34,387 - #2 program
INFO  17:54:34,387 - #45 SemanticTest
INFO  17:54:34,387 - #22 const
INFO  17:54:34,415 - #45 int
INFO  17:54:34,415 - #45 x
INFO  17:54:34,421 - #12 =
INFO  17:54:34,421 - #42 6
INFO  17:54:34,421 - #8 ,
INFO  17:54:34,428 - #45 init
INFO  17:54:34,428 - #12 =
INFO  17:54:34,428 - #42 0
INFO  17:54:34,428 - #5 ;
INFO  17:54:34,428 - #45 int
INFO  17:54:34,429 - #45 x1
INFO  17:54:34,429 - #8 ,
INFO  17:54:34,439 - #45 x3
INFO  17:54:34,440 - #25 [
INFO  17:54:34,440 - #34 ]
INFO  17:54:34,440 - #5 ;
INFO  17:54:34,447 - #45 int
INFO  17:54:34,448 - #45 x2
INFO  17:54:34,448 - #25 [
INFO  17:54:34,448 - #34 ]
INFO  17:54:34,449 - #5 ;
INFO  17:54:34,449 - #29 enum
INFO  17:54:34,449 - #45 nums
INFO  17:54:34,449 - #3 {
INFO  17:54:34,449 - #45 ONE
INFO  17:54:34,450 - #12 =
INFO  17:54:34,450 - #42 1
INFO  17:54:34,450 - #8 ,
INFO  17:54:34,451 - #45 TWO
INFO  17:54:34,451 - #12 =
INFO  17:54:34,451 - #42 5
INFO  17:54:34,451 - #8 ,
INFO  17:54:34,451 - #45 THREE
INFO  17:54:34,451 - #4 }
INFO  17:54:34,451 - #16 class
INFO  17:54:34,452 - #45 A
INFO  17:54:34,452 - #3 {
INFO  17:54:34,471 - #45 int
INFO  17:54:34,477 - #45 fld1
INFO  17:54:34,477 - #5 ;
INFO  17:54:34,477 - #45 char
INFO  17:54:34,477 - #45 fld2
INFO  17:54:34,477 - #5 ;
INFO  17:54:34,477 - #4 }
INFO  17:54:34,483 - #3 {
INFO  17:54:34,483 - #13 void
INFO  17:54:34,488 - #45 printf
INFO  17:54:34,494 - #6 (
INFO  17:54:34,494 - #45 int
INFO  17:54:34,494 - #45 a
INFO  17:54:34,494 - #8 ,
INFO  17:54:34,494 - #45 int
INFO  17:54:34,495 - #45 b
INFO  17:54:34,495 - #8 ,
INFO  17:54:34,495 - #45 int
INFO  17:54:34,495 - #45 c
INFO  17:54:34,495 - #7 )
INFO  17:54:34,495 - #3 {
INFO  17:54:34,495 - #9 print
INFO  17:54:34,503 - #6 (
INFO  17:54:34,503 - #45 a
INFO  17:54:34,515 - #7 )
INFO  17:54:34,536 - #5 ;
INFO  17:54:34,537 - #9 print
INFO  17:54:34,537 - #6 (
INFO  17:54:34,537 - #45 b
INFO  17:54:34,537 - #7 )
INFO  17:54:34,537 - #5 ;
INFO  17:54:34,537 - #9 print
INFO  17:54:34,537 - #6 (
INFO  17:54:34,537 - #45 c
INFO  17:54:34,537 - #7 )
INFO  17:54:34,537 - #5 ;
INFO  17:54:34,537 - #10 return
INFO  17:54:34,537 - #5 ;
INFO  17:54:34,543 - #4 }
INFO  17:54:34,543 - #45 int
INFO  17:54:34,543 - #45 main
INFO  17:54:34,543 - #6 (
INFO  17:54:34,543 - #7 )
INFO  17:54:34,548 - #45 int
INFO  17:54:34,548 - #45 var
INFO  17:54:34,548 - #5 ;
INFO  17:54:34,548 - #45 A
INFO  17:54:34,549 - #45 a
INFO  17:54:34,549 - #5 ;
INFO  17:54:34,549 - #3 {
INFO  17:54:34,549 - #45 printf
INFO  17:54:34,549 - #6 (
INFO  17:54:34,549 - #42 2
INFO  17:54:34,549 - #8 ,
INFO  17:54:34,549 - #42 4
INFO  17:54:34,549 - #8 ,
INFO  17:54:34,550 - #42 6
INFO  17:54:34,550 - #7 )
INFO  17:54:34,550 - #5 ;
INFO  17:54:34,550 - #10 return
INFO  17:54:34,550 - #42 0
INFO  17:54:34,550 - #5 ;
INFO  17:54:34,551 - #4 }
INFO  17:54:34,551 - #4 }
INFO  17:54:34,608 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        NoClassMethodDecl(
        ) [NoClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      OptMethods(
        NoOptMethods(
        ) [NoOptMethods]
        MethodDeclarations(
          MethodDeclTypeName(
            VoidIdentificator(
            ) [VoidIdentificator]
           printf
          ) [MethodDeclTypeName]
          OptionalFormPars(
            MultipleFormPars(
              MultipleFormPars(
                SingleFormPars(
                  FormParItem(
                    Type(
                     int
                    ) [Type]
                   a
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [FormParItem]
                ) [SingleFormPars]
                FormParItem(
                  Type(
                   int
                  ) [Type]
                 b
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [MultipleFormPars]
              FormParItem(
                Type(
                 int
                ) [Type]
               c
                NoArrayVar(
                ) [NoArrayVar]
              ) [FormParItem]
            ) [MultipleFormPars]
          ) [OptionalFormPars]
          NoOptVars(
          ) [NoOptVars]
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                OptionalStmt(
                  NoOptionalStmt(
                  ) [NoOptionalStmt]
                  PrintStmt(
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        DesignFactor(
                          DesignVar(
                            DesignatorName(
                             a
                            ) [DesignatorName]
                          ) [DesignVar]
                          NoMethodCall(
                          ) [NoMethodCall]
                        ) [DesignFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                    OptNumConstDerived2(
                    ) [OptNumConstDerived2]
                  ) [PrintStmt]
                ) [OptionalStmt]
                PrintStmt(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           b
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                  OptNumConstDerived2(
                  ) [OptNumConstDerived2]
                ) [PrintStmt]
              ) [OptionalStmt]
              PrintStmt(
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    DesignFactor(
                      DesignVar(
                        DesignatorName(
                         c
                        ) [DesignatorName]
                      ) [DesignVar]
                      NoMethodCall(
                      ) [NoMethodCall]
                    ) [DesignFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
                OptNumConstDerived2(
                ) [OptNumConstDerived2]
              ) [PrintStmt]
            ) [OptionalStmt]
            ReturnStmt(
              NoRet(
              ) [NoRet]
            ) [ReturnStmt]
          ) [OptionalStmt]
        ) [MethodDeclarations]
      ) [OptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            NoOptionalStmt(
            ) [NoOptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignVar(
                  DesignatorName(
                   printf
                  ) [DesignatorName]
                ) [DesignVar]
                WithActPars(
                  MultiActPars(
                    MultiActPars(
                      SingleActPars(
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            NumFactor(
                             2
                            ) [NumFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                      ) [SingleActPars]
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          NumFactor(
                           4
                          ) [NumFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                    ) [MultiActPars]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NumFactor(
                         6
                        ) [NumFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [MultiActPars]
                ) [WithActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  17:54:34,609 - ===================================
INFO  17:54:34,609 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  17:54:34,609 - INFO:  Deklarisana konstanta x na liniji 6
INFO  17:54:34,609 - INFO:  Deklarisana konstanta init na liniji 6
INFO  17:54:34,609 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  17:54:34,609 - INFO:  Deklarisan niz x3 na liniji 7
INFO  17:54:34,609 - INFO:  Deklarisan niz x2 na liniji 8
INFO  17:54:34,610 - INFO:  Definisan enum tip nums na liniji 9
INFO  17:54:34,610 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  17:54:34,610 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  17:54:34,610 - INFO:  Definisana klasa A na liniji 11
INFO  17:54:34,610 - INFO:  Obradjuje se funkcija printf na liniji 21
INFO  17:54:34,611 - INFO:  Deklarisan formalni parametar a na liniji 21
INFO  17:54:34,611 - INFO:  Deklarisan formalni parametar b na liniji 21
INFO  17:54:34,611 - INFO:  Deklarisan formalni parametar c na liniji 21
INFO  17:54:34,611 - INFO:  Pristup simbolu a na liniji 23
INFO  17:54:34,617 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  17:54:34,617 - INFO:  Pristup simbolu b na liniji 25
INFO  17:54:34,617 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  17:54:34,617 - INFO:  Pristup simbolu c na liniji 27
INFO  17:54:34,617 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  17:54:34,617 - INFO:  Deklarisan metod printf na liniji 21
INFO  17:54:34,618 - INFO:  Obradjuje se funkcija main na liniji 34
INFO  17:54:34,618 - INFO:  Deklarisana promenljiva var na liniji 34
INFO  17:54:34,618 - INFO:  Deklarisana promenljiva a na liniji 34
INFO  17:54:34,618 - INFO:  Pristup metodi printf na liniji 36
INFO  17:54:34,619 - INFO:  Pozvana metoda printf na liniji 36
INFO  17:54:34,619 - INFO:  Deklarisan metod main na liniji 34
INFO  17:54:34,619 - ===================================
INFO  17:54:34,637 - Uspesno parsiranje!
