INFO  01:48:25,894 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  01:48:25,966 - #2 program
INFO  01:48:25,966 - #45 SemanticTest
INFO  01:48:25,966 - #22 const
INFO  01:48:25,968 - #45 int
INFO  01:48:25,968 - #45 x
INFO  01:48:25,969 - #12 =
INFO  01:48:25,969 - #42 5
INFO  01:48:25,969 - #8 ,
INFO  01:48:25,969 - #45 init
INFO  01:48:25,969 - #12 =
INFO  01:48:25,971 - #42 0
INFO  01:48:25,971 - #5 ;
INFO  01:48:25,971 - #22 const
INFO  01:48:25,971 - #45 bool
INFO  01:48:25,971 - #45 b
INFO  01:48:25,971 - #12 =
INFO  01:48:25,971 - #44 false
INFO  01:48:25,972 - #5 ;
INFO  01:48:25,972 - #45 int
INFO  01:48:25,972 - #45 x1
INFO  01:48:25,972 - #5 ;
INFO  01:48:25,973 - #45 int
INFO  01:48:25,974 - #45 x2
INFO  01:48:25,974 - #25 [
INFO  01:48:25,974 - #34 ]
INFO  01:48:25,974 - #5 ;
INFO  01:48:25,975 - #29 enum
INFO  01:48:25,975 - #45 nums
INFO  01:48:25,975 - #3 {
INFO  01:48:25,975 - #45 ONE
INFO  01:48:25,975 - #12 =
INFO  01:48:25,975 - #42 1
INFO  01:48:25,975 - #8 ,
INFO  01:48:25,976 - #45 TWO
INFO  01:48:25,976 - #12 =
INFO  01:48:25,976 - #42 5
INFO  01:48:25,976 - #8 ,
INFO  01:48:25,976 - #45 THREE
INFO  01:48:25,977 - #4 }
INFO  01:48:25,977 - #16 class
INFO  01:48:25,977 - #45 A
INFO  01:48:25,977 - #3 {
INFO  01:48:25,978 - #45 int
INFO  01:48:25,980 - #45 fld1
INFO  01:48:25,980 - #5 ;
INFO  01:48:25,980 - #13 void
ERROR 01:48:25,980 - 
Sintaksna greska na liniji 14
INFO  01:48:25,980 - #45 meth1
INFO  01:48:25,980 - #6 (
INFO  01:48:25,981 - #7 )
INFO  01:48:25,981 - #5 ;
INFO  01:48:25,981 - #4 }
INFO  01:48:25,982 - #14 interface
INFO  01:48:25,982 - #45 I
ERROR 01:48:25,982 - Greska pri definiciji globalne promenljive. Izvrsen oporavak u liniji 13
INFO  01:48:25,984 - #3 {
INFO  01:48:25,984 - #45 int
INFO  01:48:25,984 - #45 x
INFO  01:48:25,984 - #6 (
INFO  01:48:25,984 - #7 )
INFO  01:48:25,985 - #5 ;
INFO  01:48:25,985 - #13 void
INFO  01:48:25,985 - #45 p
INFO  01:48:25,986 - #6 (
INFO  01:48:25,986 - #7 )
INFO  01:48:25,986 - #5 ;
INFO  01:48:25,986 - #4 }
INFO  01:48:25,987 - #3 {
INFO  01:48:25,987 - #45 int
INFO  01:48:25,987 - #45 inc
INFO  01:48:25,987 - #6 (
INFO  01:48:25,988 - #45 int
INFO  01:48:25,988 - #45 n
INFO  01:48:25,988 - #8 ,
INFO  01:48:25,989 - #45 char
INFO  01:48:25,989 - #45 add
INFO  01:48:25,989 - #7 )
INFO  01:48:25,989 - #45 int
INFO  01:48:25,989 - #45 c
INFO  01:48:25,989 - #5 ;
INFO  01:48:25,989 - #3 {
INFO  01:48:25,989 - #45 c
INFO  01:48:25,989 - #12 =
INFO  01:48:25,990 - #42 2
INFO  01:48:25,991 - #5 ;
INFO  01:48:25,992 - #9 print
INFO  01:48:25,992 - #6 (
INFO  01:48:25,992 - #42 5
INFO  01:48:25,992 - #7 )
INFO  01:48:25,993 - #5 ;
INFO  01:48:25,993 - #10 return
INFO  01:48:25,994 - #45 c
INFO  01:48:25,994 - #11 +
INFO  01:48:25,994 - #42 2
INFO  01:48:25,996 - #5 ;
INFO  01:48:25,997 - #4 }
INFO  01:48:25,997 - #13 void
INFO  01:48:25,997 - #45 printf
INFO  01:48:25,997 - #6 (
INFO  01:48:25,997 - #45 int
INFO  01:48:26,005 - #45 a
INFO  01:48:26,006 - #7 )
INFO  01:48:26,006 - #3 {
INFO  01:48:26,006 - #9 print
INFO  01:48:26,007 - #6 (
INFO  01:48:26,007 - #45 a
INFO  01:48:26,008 - #7 )
INFO  01:48:26,008 - #5 ;
INFO  01:48:26,008 - #4 }
INFO  01:48:26,008 - #45 int
INFO  01:48:26,008 - #45 main
INFO  01:48:26,009 - #6 (
INFO  01:48:26,009 - #7 )
INFO  01:48:26,009 - #45 A
INFO  01:48:26,009 - #45 a
INFO  01:48:26,009 - #5 ;
INFO  01:48:26,009 - #3 {
INFO  01:48:26,009 - #45 x1
INFO  01:48:26,010 - #12 =
INFO  01:48:26,010 - #42 2
INFO  01:48:26,010 - #5 ;
INFO  01:48:26,010 - #9 print
INFO  01:48:26,010 - #6 (
INFO  01:48:26,010 - #45 inc
INFO  01:48:26,010 - #6 (
INFO  01:48:26,010 - #42 2
INFO  01:48:26,011 - #8 ,
INFO  01:48:26,011 - #43 a
INFO  01:48:26,011 - #7 )
INFO  01:48:26,012 - #7 )
INFO  01:48:26,012 - #5 ;
INFO  01:48:26,012 - #10 return
INFO  01:48:26,013 - #42 0
INFO  01:48:26,013 - #5 ;
INFO  01:48:26,013 - #4 }
INFO  01:48:26,013 - #4 }
INFO  01:48:26,026 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            VarDeclLists(
              VarDeclLists(
                NoVarDecl(
                ) [NoVarDecl]
                ConstDeclaration(
                  ConstDeclarations(
                    Type(
                     int
                    ) [Type]
                    MultipleConsts(
                      SingleConst(
                        ConstItem(
                         x
                          InitializerNum(
                           5
                          ) [InitializerNum]
                        ) [ConstItem]
                      ) [SingleConst]
                      ConstItem(
                       init
                        InitializerNum(
                         0
                        ) [InitializerNum]
                      ) [ConstItem]
                    ) [MultipleConsts]
                  ) [ConstDeclarations]
                ) [ConstDeclaration]
              ) [VarDeclLists]
              ConstDeclaration(
                ConstDeclarations(
                  Type(
                   bool
                  ) [Type]
                  SingleConst(
                    ConstItem(
                     b
                      InitializerBool(
                       false
                      ) [InitializerBool]
                    ) [ConstItem]
                  ) [SingleConst]
                ) [ConstDeclarations]
              ) [ConstDeclaration]
            ) [VarDeclLists]
            VarDeclaration(
              VarDeclarations(
                Type(
                 int
                ) [Type]
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
              ) [VarDeclarations]
            ) [VarDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 x2
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        EnumDeclaration(
          EnumDeclarations(
            EnumNamed(
             nums
            ) [EnumNamed]
            MultipleEnums(
              MultipleEnums(
                SingleEnum(
                  InitEnum(
                   ONE
                   1
                  ) [InitEnum]
                ) [SingleEnum]
                InitEnum(
                 TWO
                 5
                ) [InitEnum]
              ) [MultipleEnums]
              NoInitEnum(
               THREE
              ) [NoInitEnum]
            ) [MultipleEnums]
          ) [EnumDeclarations]
        ) [EnumDeclaration]
      ) [VarDeclLists]
      ClasstDeclaration(
        ClassDeclaration(
          ClassName(
           A
          ) [ClassName]
          NoSuperClass(
          ) [NoSuperClass]
          NoImplInteraces(
          ) [NoImplInteraces]
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                VarDefError(
                ) [VarDefError]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          NoClassMethodDecl(
          ) [NoClassMethodDecl]
        ) [ClassDeclaration]
      ) [ClasstDeclaration]
    ) [VarDeclLists]
    InterfaceDeclaration(
      InterfaceDeclarations(
        InterName(
         I
        ) [InterName]
        OptInterMethodDeclList(
          InterfaceMethodDeclarations(
            SingleInterfaceMethodDeclaration(
              InterfaceMethodDeclaration(
                TypeIdentificator(
                  Type(
                   int
                  ) [Type]
                ) [TypeIdentificator]
               x
                NoOptionalFormPars(
                ) [NoOptionalFormPars]
              ) [InterfaceMethodDeclaration]
            ) [SingleInterfaceMethodDeclaration]
            InterfaceMethodDeclaration(
              VoidIdentificator(
              ) [VoidIdentificator]
             p
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
            ) [InterfaceMethodDeclaration]
          ) [InterfaceMethodDeclarations]
        ) [OptInterMethodDeclList]
      ) [InterfaceDeclarations]
    ) [InterfaceDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      OptMethods(
        OptMethods(
          NoOptMethods(
          ) [NoOptMethods]
          MethodDeclarations(
            MethodDeclTypeName(
              TypeIdentificator(
                Type(
                 int
                ) [Type]
              ) [TypeIdentificator]
             inc
            ) [MethodDeclTypeName]
            OptionalFormPars(
              MultipleFormPars(
                SingleFormPars(
                  FormParItem(
                    Type(
                     int
                    ) [Type]
                   n
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [FormParItem]
                ) [SingleFormPars]
                FormParItem(
                  Type(
                   char
                  ) [Type]
                 add
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [MultipleFormPars]
            ) [OptionalFormPars]
            OptVars(
              NoOptVars(
              ) [NoOptVars]
              VarDeclarations(
                Type(
                 int
                ) [Type]
                SingleVar(
                  Var(
                   c
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
              ) [VarDeclarations]
            ) [OptVars]
            OptionalStmt(
              OptionalStmt(
                OptionalStmt(
                  NoOptionalStmt(
                  ) [NoOptionalStmt]
                  DesignatorStmt(
                    AssignOper(
                      DesignVar(
                        DesignatorName(
                         c
                        ) [DesignatorName]
                      ) [DesignVar]
                      AssignOperation(
                      ) [AssignOperation]
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          NumFactor(
                           2
                          ) [NumFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                    ) [AssignOper]
                  ) [DesignatorStmt]
                ) [OptionalStmt]
                PrintStmt(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NumFactor(
                       5
                      ) [NumFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                  OptNumConstDerived2(
                  ) [OptNumConstDerived2]
                ) [PrintStmt]
              ) [OptionalStmt]
              ReturnStmt(
                RetExpr(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           c
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    WithAddTerms(
                      NoAddTerms(
                      ) [NoAddTerms]
                      PlusOp(
                      ) [PlusOp]
                      Terms(
                        NumFactor(
                         2
                        ) [NumFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                    ) [WithAddTerms]
                  ) [Expression]
                ) [RetExpr]
              ) [ReturnStmt]
            ) [OptionalStmt]
          ) [MethodDeclarations]
        ) [OptMethods]
        MethodDeclarations(
          MethodDeclTypeName(
            VoidIdentificator(
            ) [VoidIdentificator]
           printf
          ) [MethodDeclTypeName]
          OptionalFormPars(
            SingleFormPars(
              FormParItem(
                Type(
                 int
                ) [Type]
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [FormParItem]
            ) [SingleFormPars]
          ) [OptionalFormPars]
          NoOptVars(
          ) [NoOptVars]
          OptionalStmt(
            NoOptionalStmt(
            ) [NoOptionalStmt]
            PrintStmt(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  DesignFactor(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    NoMethodCall(
                    ) [NoMethodCall]
                  ) [DesignFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
              OptNumConstDerived2(
              ) [OptNumConstDerived2]
            ) [PrintStmt]
          ) [OptionalStmt]
        ) [MethodDeclarations]
      ) [OptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          NoOptVars(
          ) [NoOptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     x1
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NumFactor(
                       2
                      ) [NumFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            PrintStmt(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  DesignFactor(
                    DesignVar(
                      DesignatorName(
                       inc
                      ) [DesignatorName]
                    ) [DesignVar]
                    WithMethodCall(
                      WithActPars(
                        MultiActPars(
                          SingleActPars(
                            Expression(
                              Positive(
                              ) [Positive]
                              Terms(
                                NumFactor(
                                 2
                                ) [NumFactor]
                                NoMulFacts(
                                ) [NoMulFacts]
                              ) [Terms]
                              NoAddTerms(
                              ) [NoAddTerms]
                            ) [Expression]
                          ) [SingleActPars]
                          Expression(
                            Positive(
                            ) [Positive]
                            Terms(
                              CharFactor(
                               a
                              ) [CharFactor]
                              NoMulFacts(
                              ) [NoMulFacts]
                            ) [Terms]
                            NoAddTerms(
                            ) [NoAddTerms]
                          ) [Expression]
                        ) [MultiActPars]
                      ) [WithActPars]
                    ) [WithMethodCall]
                  ) [DesignFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
              OptNumConstDerived2(
              ) [OptNumConstDerived2]
            ) [PrintStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  01:48:26,027 - ===================================
INFO  01:48:26,027 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  01:48:26,028 - INFO:  Deklarisana konstanta x na liniji 6
INFO  01:48:26,028 - INFO:  Deklarisana konstanta init na liniji 6
INFO  01:48:26,028 - INFO:  Deklarisana konstanta b na liniji 7
INFO  01:48:26,028 - INFO:  Deklarisana globalna promenljiva x1 na liniji 8
INFO  01:48:26,028 - INFO:  Deklarisan niz x2 na liniji 9
INFO  01:48:26,028 - INFO:  Definisan enum tip nums na liniji 10
INFO  01:48:26,028 - INFO:  Definisana klasa A na liniji 12
INFO  01:48:26,029 - INFO:  Deklarisan metod x u interfejsu na liniji 18
INFO  01:48:26,029 - INFO:  Deklarisan metod p u interfejsu na liniji 19
INFO  01:48:26,029 - INFO:  Definisan interfejs I na liniji 17
INFO  01:48:26,029 - INFO:  Obradjuje se funkcija inc na liniji 23
INFO  01:48:26,029 - INFO:  Deklarisan formalni parametar n na liniji 23
INFO  01:48:26,029 - INFO:  Deklarisan formalni parametar add na liniji 23
INFO  01:48:26,029 - INFO:  Deklarisana promenljiva c na liniji 23
INFO  01:48:26,029 - INFO:  Pristup simbolu c na liniji 24
INFO  01:48:26,030 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  01:48:26,030 - INFO:  Pristup simbolu c na liniji 28
INFO  01:48:26,031 - INFO:  Deklarisan metod inc na liniji 23
INFO  01:48:26,031 - INFO:  Obradjuje se funkcija printf na liniji 31
INFO  01:48:26,031 - INFO:  Deklarisan formalni parametar a na liniji 31
INFO  01:48:26,031 - INFO:  Pristup simbolu a na liniji 32
INFO  01:48:26,031 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  01:48:26,031 - INFO:  Deklarisan metod printf na liniji 31
INFO  01:48:26,031 - INFO:  Obradjuje se funkcija main na liniji 36
INFO  01:48:26,031 - INFO:  Deklarisana promenljiva a na liniji 36
INFO  01:48:26,031 - INFO:  Pristup simbolu x1 na liniji 48
INFO  01:48:26,031 - INFO:  Pristup simbolu inc na liniji 50
