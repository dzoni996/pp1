INFO  10:22:14,771 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:22:14,996 - #2 program
INFO  10:22:14,996 - #45 SemanticTest
INFO  10:22:14,996 - #22 const
INFO  10:22:15,001 - #45 int
INFO  10:22:15,001 - #45 x
INFO  10:22:15,001 - #12 =
INFO  10:22:15,006 - #42 6
INFO  10:22:15,006 - #8 ,
INFO  10:22:15,006 - #45 init
INFO  10:22:15,006 - #12 =
INFO  10:22:15,006 - #42 0
INFO  10:22:15,006 - #5 ;
INFO  10:22:15,006 - #45 int
INFO  10:22:15,006 - #45 x1
INFO  10:22:15,006 - #8 ,
INFO  10:22:15,011 - #45 x3
INFO  10:22:15,011 - #25 [
INFO  10:22:15,011 - #34 ]
INFO  10:22:15,011 - #5 ;
INFO  10:22:15,011 - #45 int
INFO  10:22:15,011 - #45 x2
INFO  10:22:15,011 - #25 [
INFO  10:22:15,011 - #34 ]
INFO  10:22:15,011 - #5 ;
INFO  10:22:15,011 - #29 enum
INFO  10:22:15,011 - #45 nums
INFO  10:22:15,011 - #3 {
INFO  10:22:15,016 - #45 ONE
INFO  10:22:15,016 - #12 =
INFO  10:22:15,016 - #42 1
INFO  10:22:15,016 - #8 ,
INFO  10:22:15,016 - #45 TWO
INFO  10:22:15,016 - #12 =
INFO  10:22:15,016 - #42 5
INFO  10:22:15,016 - #8 ,
INFO  10:22:15,016 - #45 THREE
INFO  10:22:15,016 - #4 }
INFO  10:22:15,016 - #16 class
INFO  10:22:15,016 - #45 A
INFO  10:22:15,016 - #3 {
INFO  10:22:15,021 - #45 int
INFO  10:22:15,021 - #45 fld1
INFO  10:22:15,021 - #5 ;
INFO  10:22:15,021 - #45 char
INFO  10:22:15,021 - #45 fld2
INFO  10:22:15,021 - #5 ;
INFO  10:22:15,021 - #4 }
INFO  10:22:15,026 - #3 {
INFO  10:22:15,026 - #45 int
INFO  10:22:15,026 - #45 main
INFO  10:22:15,026 - #6 (
INFO  10:22:15,026 - #7 )
INFO  10:22:15,026 - #45 int
INFO  10:22:15,026 - #45 var
INFO  10:22:15,026 - #5 ;
INFO  10:22:15,031 - #45 A
INFO  10:22:15,031 - #45 a
INFO  10:22:15,031 - #5 ;
INFO  10:22:15,031 - #3 {
INFO  10:22:15,031 - #45 a
INFO  10:22:15,031 - #12 =
INFO  10:22:15,031 - #18 new
INFO  10:22:15,036 - #45 A
INFO  10:22:15,036 - #5 ;
INFO  10:22:15,036 - #45 a
INFO  10:22:15,036 - #15 .
INFO  10:22:15,036 - #45 fld1
INFO  10:22:15,036 - #12 =
INFO  10:22:15,036 - #42 1
INFO  10:22:15,036 - #5 ;
INFO  10:22:15,036 - #10 return
INFO  10:22:15,041 - #42 0
INFO  10:22:15,041 - #5 ;
INFO  10:22:15,041 - #4 }
INFO  10:22:15,041 - #4 }
INFO  10:22:15,086 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        NoClassMethodDecl(
        ) [NoClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:22:15,086 - ===================================
INFO  10:22:15,086 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:22:15,086 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:22:15,086 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:22:15,086 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:22:15,086 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:22:15,086 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:22:15,086 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:22:15,086 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:22:15,089 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:22:15,089 - INFO:  Definisana klasa A na liniji 11
INFO  10:22:15,089 - INFO:  Obradjuje se funkcija main na liniji 23
INFO  10:22:15,089 - INFO:  Deklarisana promenljiva var na liniji 23
INFO  10:22:15,089 - INFO:  Deklarisana promenljiva a na liniji 23
INFO  10:22:15,091 - INFO:  Pristup simbolu a na liniji 25
INFO  10:22:31,890 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:22:32,171 - #2 program
INFO  10:22:32,171 - #45 SemanticTest
INFO  10:22:32,171 - #22 const
INFO  10:22:32,174 - #45 int
INFO  10:22:32,191 - #45 x
INFO  10:22:32,191 - #12 =
INFO  10:22:32,191 - #42 6
INFO  10:22:32,196 - #8 ,
INFO  10:22:32,199 - #45 init
INFO  10:22:32,199 - #12 =
INFO  10:22:32,199 - #42 0
INFO  10:22:32,199 - #5 ;
INFO  10:22:32,199 - #45 int
INFO  10:22:32,201 - #45 x1
INFO  10:22:32,201 - #8 ,
INFO  10:22:32,206 - #45 x3
INFO  10:22:32,211 - #25 [
INFO  10:22:32,211 - #34 ]
INFO  10:22:32,211 - #5 ;
INFO  10:22:32,211 - #45 int
INFO  10:22:32,216 - #45 x2
INFO  10:22:32,216 - #25 [
INFO  10:22:32,216 - #34 ]
INFO  10:22:32,216 - #5 ;
INFO  10:22:32,216 - #29 enum
INFO  10:22:32,216 - #45 nums
INFO  10:22:32,216 - #3 {
INFO  10:22:32,216 - #45 ONE
INFO  10:22:32,216 - #12 =
INFO  10:22:32,216 - #42 1
INFO  10:22:32,216 - #8 ,
INFO  10:22:32,216 - #45 TWO
INFO  10:22:32,216 - #12 =
INFO  10:22:32,216 - #42 5
INFO  10:22:32,216 - #8 ,
INFO  10:22:32,216 - #45 THREE
INFO  10:22:32,216 - #4 }
INFO  10:22:32,221 - #16 class
INFO  10:22:32,221 - #45 A
INFO  10:22:32,221 - #3 {
INFO  10:22:32,231 - #45 int
INFO  10:22:32,231 - #45 fld1
INFO  10:22:32,231 - #5 ;
INFO  10:22:32,231 - #45 char
INFO  10:22:32,231 - #45 fld2
INFO  10:22:32,231 - #5 ;
INFO  10:22:32,231 - #4 }
INFO  10:22:32,231 - #3 {
INFO  10:22:32,231 - #45 int
INFO  10:22:32,231 - #45 main
INFO  10:22:32,236 - #6 (
INFO  10:22:32,236 - #7 )
INFO  10:22:32,236 - #45 int
INFO  10:22:32,236 - #45 var
INFO  10:22:32,236 - #5 ;
INFO  10:22:32,236 - #45 A
INFO  10:22:32,236 - #45 a
INFO  10:22:32,236 - #5 ;
INFO  10:22:32,236 - #3 {
INFO  10:22:32,236 - #45 a
INFO  10:22:32,236 - #12 =
INFO  10:22:32,236 - #18 new
INFO  10:22:32,241 - #45 A
INFO  10:22:32,241 - #5 ;
INFO  10:22:32,246 - #45 a
INFO  10:22:32,246 - #15 .
INFO  10:22:32,246 - #45 fld1
INFO  10:22:32,246 - #12 =
INFO  10:22:32,246 - #42 1
INFO  10:22:32,249 - #5 ;
INFO  10:22:32,249 - #10 return
INFO  10:22:32,249 - #42 0
INFO  10:22:32,249 - #5 ;
INFO  10:22:32,249 - #4 }
INFO  10:22:32,251 - #4 }
INFO  10:22:32,301 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        NoClassMethodDecl(
        ) [NoClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:22:32,306 - ===================================
INFO  10:22:32,306 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:22:32,306 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:22:32,306 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:22:32,306 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:22:32,306 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:22:32,306 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:22:32,306 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:22:32,306 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:22:32,306 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:22:32,306 - INFO:  Definisana klasa A na liniji 11
INFO  10:22:32,311 - INFO:  Obradjuje se funkcija main na liniji 23
INFO  10:22:32,316 - INFO:  Deklarisana promenljiva var na liniji 23
INFO  10:22:32,316 - INFO:  Deklarisana promenljiva a na liniji 23
INFO  10:22:32,316 - INFO:  Pristup simbolu a na liniji 25
INFO  10:25:09,015 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:25:09,105 - #2 program
INFO  10:25:09,105 - #45 SemanticTest
INFO  10:25:09,105 - #22 const
INFO  10:25:09,105 - #45 int
INFO  10:25:09,105 - #45 x
INFO  10:25:09,105 - #12 =
INFO  10:25:09,110 - #42 6
INFO  10:25:09,110 - #8 ,
INFO  10:25:09,110 - #45 init
INFO  10:25:09,110 - #12 =
INFO  10:25:09,110 - #42 0
INFO  10:25:09,110 - #5 ;
INFO  10:25:09,110 - #45 int
INFO  10:25:09,110 - #45 x1
INFO  10:25:09,110 - #8 ,
INFO  10:25:09,110 - #45 x3
INFO  10:25:09,110 - #25 [
INFO  10:25:09,110 - #34 ]
INFO  10:25:09,110 - #5 ;
INFO  10:25:09,115 - #45 int
INFO  10:25:09,115 - #45 x2
INFO  10:25:09,115 - #25 [
INFO  10:25:09,115 - #34 ]
INFO  10:25:09,115 - #5 ;
INFO  10:25:09,115 - #29 enum
INFO  10:25:09,115 - #45 nums
INFO  10:25:09,115 - #3 {
INFO  10:25:09,115 - #45 ONE
INFO  10:25:09,115 - #12 =
INFO  10:25:09,115 - #42 1
INFO  10:25:09,115 - #8 ,
INFO  10:25:09,115 - #45 TWO
INFO  10:25:09,115 - #12 =
INFO  10:25:09,115 - #42 5
INFO  10:25:09,115 - #8 ,
INFO  10:25:09,115 - #45 THREE
INFO  10:25:09,115 - #4 }
INFO  10:25:09,115 - #16 class
INFO  10:25:09,115 - #45 A
INFO  10:25:09,115 - #3 {
INFO  10:25:09,115 - #45 int
INFO  10:25:09,120 - #45 fld1
INFO  10:25:09,120 - #5 ;
INFO  10:25:09,120 - #45 char
INFO  10:25:09,120 - #45 fld2
INFO  10:25:09,120 - #5 ;
INFO  10:25:09,120 - #3 {
INFO  10:25:09,120 - #13 void
INFO  10:25:09,120 - #45 meth1
INFO  10:25:09,120 - #6 (
INFO  10:25:09,120 - #7 )
INFO  10:25:09,120 - #3 {
INFO  10:25:09,120 - #4 }
INFO  10:25:09,120 - #4 }
INFO  10:25:09,120 - #4 }
INFO  10:25:09,120 - #3 {
INFO  10:25:09,120 - #45 int
INFO  10:25:09,120 - #45 main
INFO  10:25:09,120 - #6 (
INFO  10:25:09,120 - #7 )
INFO  10:25:09,120 - #45 int
INFO  10:25:09,120 - #45 var
INFO  10:25:09,120 - #5 ;
INFO  10:25:09,120 - #45 A
INFO  10:25:09,125 - #45 a
INFO  10:25:09,125 - #5 ;
INFO  10:25:09,125 - #3 {
INFO  10:25:09,125 - #45 a
INFO  10:25:09,125 - #12 =
INFO  10:25:09,125 - #18 new
INFO  10:25:09,125 - #45 A
INFO  10:25:09,125 - #5 ;
INFO  10:25:09,125 - #45 a
INFO  10:25:09,125 - #15 .
INFO  10:25:09,125 - #45 fld1
INFO  10:25:09,125 - #12 =
INFO  10:25:09,125 - #42 1
INFO  10:25:09,125 - #5 ;
INFO  10:25:09,125 - #10 return
INFO  10:25:09,125 - #42 0
INFO  10:25:09,125 - #5 ;
INFO  10:25:09,125 - #4 }
INFO  10:25:09,125 - #4 }
INFO  10:25:09,140 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:25:09,140 - ===================================
INFO  10:25:09,140 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:25:09,140 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:25:09,140 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:25:09,140 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:25:09,140 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:25:09,140 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:25:09,140 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:25:09,140 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:25:09,140 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:25:09,140 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:25:09,140 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:25:09,140 - INFO:  Definisana klasa A na liniji 11
INFO  10:25:09,140 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:25:09,140 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:25:09,140 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:25:09,140 - INFO:  Pristup simbolu a na liniji 29
INFO  10:25:09,140 - INFO:  Pristup simbolu a na liniji 31
INFO  10:25:09,140 - Pristup elementima klase (nije impl) na liniji 31
ERROR 10:25:09,140 - ERROR: Nekompatibilnost sa stvarnim parametrima na liniji 31		<--------------- ERROR 
INFO  10:25:09,140 - INFO:  Deklarisan metod main na liniji 27
INFO  10:25:09,140 - ===================================
ERROR 10:25:09,140 - Postoji 1 greska u generisanom kodu!
INFO  10:25:34,746 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:25:34,981 - #2 program
INFO  10:25:34,983 - #45 SemanticTest
INFO  10:25:34,983 - #22 const
INFO  10:25:34,984 - #45 int
INFO  10:25:34,984 - #45 x
INFO  10:25:34,984 - #12 =
INFO  10:25:34,984 - #42 6
INFO  10:25:34,984 - #8 ,
INFO  10:25:34,989 - #45 init
INFO  10:25:34,989 - #12 =
INFO  10:25:34,989 - #42 0
INFO  10:25:34,989 - #5 ;
INFO  10:25:34,989 - #45 int
INFO  10:25:34,991 - #45 x1
INFO  10:25:34,991 - #8 ,
INFO  10:25:34,991 - #45 x3
INFO  10:25:34,991 - #25 [
INFO  10:25:34,991 - #34 ]
INFO  10:25:34,991 - #5 ;
INFO  10:25:34,996 - #45 int
INFO  10:25:34,996 - #45 x2
INFO  10:25:34,996 - #25 [
INFO  10:25:34,996 - #34 ]
INFO  10:25:34,996 - #5 ;
INFO  10:25:34,996 - #29 enum
INFO  10:25:34,996 - #45 nums
INFO  10:25:34,996 - #3 {
INFO  10:25:34,996 - #45 ONE
INFO  10:25:34,996 - #12 =
INFO  10:25:34,996 - #42 1
INFO  10:25:34,996 - #8 ,
INFO  10:25:34,996 - #45 TWO
INFO  10:25:34,996 - #12 =
INFO  10:25:34,996 - #42 5
INFO  10:25:34,996 - #8 ,
INFO  10:25:34,996 - #45 THREE
INFO  10:25:34,996 - #4 }
INFO  10:25:34,996 - #16 class
INFO  10:25:35,001 - #45 A
INFO  10:25:35,001 - #3 {
INFO  10:25:35,001 - #45 int
INFO  10:25:35,006 - #45 fld1
INFO  10:25:35,006 - #5 ;
INFO  10:25:35,006 - #45 char
INFO  10:25:35,006 - #45 fld2
INFO  10:25:35,006 - #5 ;
INFO  10:25:35,006 - #3 {
INFO  10:25:35,006 - #13 void
INFO  10:25:35,006 - #45 meth1
INFO  10:25:35,011 - #6 (
INFO  10:25:35,011 - #7 )
INFO  10:25:35,014 - #3 {
INFO  10:25:35,014 - #4 }
INFO  10:25:35,016 - #4 }
INFO  10:25:35,016 - #4 }
INFO  10:25:35,016 - #3 {
INFO  10:25:35,016 - #45 int
INFO  10:25:35,016 - #45 main
INFO  10:25:35,016 - #6 (
INFO  10:25:35,016 - #7 )
INFO  10:25:35,016 - #45 int
INFO  10:25:35,016 - #45 var
INFO  10:25:35,016 - #5 ;
INFO  10:25:35,016 - #45 A
INFO  10:25:35,016 - #45 a
INFO  10:25:35,016 - #5 ;
INFO  10:25:35,016 - #3 {
INFO  10:25:35,016 - #45 a
INFO  10:25:35,016 - #12 =
INFO  10:25:35,016 - #18 new
INFO  10:25:35,021 - #45 A
INFO  10:25:35,021 - #5 ;
INFO  10:25:35,026 - #45 a
INFO  10:25:35,026 - #15 .
INFO  10:25:35,026 - #45 fld1
INFO  10:25:35,026 - #12 =
INFO  10:25:35,026 - #42 1
INFO  10:25:35,026 - #5 ;
INFO  10:25:35,026 - #10 return
INFO  10:25:35,026 - #42 0
INFO  10:25:35,026 - #5 ;
INFO  10:25:35,026 - #4 }
INFO  10:25:35,026 - #4 }
INFO  10:25:35,066 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:25:35,066 - ===================================
INFO  10:25:35,066 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:25:35,071 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:25:35,071 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:25:35,071 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:25:35,071 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:25:35,071 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:25:35,071 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:25:35,071 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:25:35,071 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:25:35,071 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:25:35,071 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:25:35,071 - INFO:  Definisana klasa A na liniji 11
INFO  10:25:35,071 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:25:35,071 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:25:35,071 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:25:35,081 - INFO:  Pristup simbolu a na liniji 29
INFO  10:30:57,195 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:30:57,623 - #2 program
INFO  10:30:57,634 - #45 SemanticTest
INFO  10:30:57,634 - #22 const
INFO  10:30:57,636 - #45 int
INFO  10:30:57,637 - #45 x
INFO  10:30:57,638 - #12 =
INFO  10:30:57,639 - #42 6
INFO  10:30:57,640 - #8 ,
INFO  10:30:57,642 - #45 init
INFO  10:30:57,643 - #12 =
INFO  10:30:57,643 - #42 0
INFO  10:30:57,643 - #5 ;
INFO  10:30:57,643 - #45 int
INFO  10:30:57,644 - #45 x1
INFO  10:30:57,644 - #8 ,
INFO  10:30:57,649 - #45 x3
INFO  10:30:57,650 - #25 [
INFO  10:30:57,650 - #34 ]
INFO  10:30:57,650 - #5 ;
INFO  10:30:57,652 - #45 int
INFO  10:30:57,652 - #45 x2
INFO  10:30:57,652 - #25 [
INFO  10:30:57,653 - #34 ]
INFO  10:30:57,653 - #5 ;
INFO  10:30:57,653 - #29 enum
INFO  10:30:57,653 - #45 nums
INFO  10:30:57,654 - #3 {
INFO  10:30:57,654 - #45 ONE
INFO  10:30:57,654 - #12 =
INFO  10:30:57,654 - #42 1
INFO  10:30:57,654 - #8 ,
INFO  10:30:57,655 - #45 TWO
INFO  10:30:57,655 - #12 =
INFO  10:30:57,655 - #42 5
INFO  10:30:57,655 - #8 ,
INFO  10:30:57,656 - #45 THREE
INFO  10:30:57,656 - #4 }
INFO  10:30:57,656 - #16 class
INFO  10:30:57,656 - #45 A
INFO  10:30:57,657 - #3 {
INFO  10:30:57,659 - #45 int
INFO  10:30:57,664 - #45 fld1
INFO  10:30:57,664 - #5 ;
INFO  10:30:57,664 - #45 char
INFO  10:30:57,664 - #45 fld2
INFO  10:30:57,664 - #5 ;
INFO  10:30:57,664 - #3 {
INFO  10:30:57,664 - #13 void
INFO  10:30:57,664 - #45 meth1
INFO  10:30:57,669 - #6 (
INFO  10:30:57,669 - #7 )
INFO  10:30:57,669 - #3 {
INFO  10:30:57,669 - #4 }
INFO  10:30:57,674 - #4 }
INFO  10:30:57,674 - #4 }
INFO  10:30:57,674 - #3 {
INFO  10:30:57,674 - #45 int
INFO  10:30:57,674 - #45 main
INFO  10:30:57,674 - #6 (
INFO  10:30:57,674 - #7 )
INFO  10:30:57,674 - #45 int
INFO  10:30:57,674 - #45 var
INFO  10:30:57,674 - #5 ;
INFO  10:30:57,677 - #45 A
INFO  10:30:57,677 - #45 a
INFO  10:30:57,677 - #5 ;
INFO  10:30:57,677 - #3 {
INFO  10:30:57,677 - #45 a
INFO  10:30:57,677 - #12 =
INFO  10:30:57,677 - #18 new
INFO  10:30:57,679 - #45 A
INFO  10:30:57,679 - #5 ;
INFO  10:30:57,684 - #45 a
INFO  10:30:57,684 - #15 .
INFO  10:30:57,684 - #45 fld1
INFO  10:30:57,684 - #12 =
INFO  10:30:57,689 - #42 1
INFO  10:30:57,689 - #5 ;
INFO  10:30:57,689 - #10 return
INFO  10:30:57,689 - #42 0
INFO  10:30:57,689 - #5 ;
INFO  10:30:57,689 - #4 }
INFO  10:30:57,689 - #4 }
INFO  10:30:57,754 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:30:57,754 - ===================================
INFO  10:30:57,754 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:30:57,754 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:30:57,754 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:30:57,754 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:30:57,759 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:30:57,759 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:30:57,759 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:30:57,759 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:30:57,759 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:30:57,759 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:30:57,759 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:30:57,764 - INFO:  Definisana klasa A na liniji 11
INFO  10:30:57,764 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:30:57,764 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:30:57,764 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:30:57,769 - INFO:  Pristup simbolu a na liniji 29
INFO  10:31:08,413 - INFO:  Pristup simbolu a na liniji 31
INFO  10:32:12,010 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:32:12,180 - #2 program
INFO  10:32:12,183 - #45 SemanticTest
INFO  10:32:12,183 - #22 const
INFO  10:32:12,185 - #45 int
INFO  10:32:12,185 - #45 x
INFO  10:32:12,185 - #12 =
INFO  10:32:12,185 - #42 6
INFO  10:32:12,185 - #8 ,
INFO  10:32:12,190 - #45 init
INFO  10:32:12,190 - #12 =
INFO  10:32:12,190 - #42 0
INFO  10:32:12,190 - #5 ;
INFO  10:32:12,190 - #45 int
INFO  10:32:12,190 - #45 x1
INFO  10:32:12,195 - #8 ,
INFO  10:32:12,195 - #45 x3
INFO  10:32:12,195 - #25 [
INFO  10:32:12,195 - #34 ]
INFO  10:32:12,200 - #5 ;
INFO  10:32:12,200 - #45 int
INFO  10:32:12,200 - #45 x2
INFO  10:32:12,200 - #25 [
INFO  10:32:12,200 - #34 ]
INFO  10:32:12,200 - #5 ;
INFO  10:32:12,200 - #29 enum
INFO  10:32:12,200 - #45 nums
INFO  10:32:12,200 - #3 {
INFO  10:32:12,200 - #45 ONE
INFO  10:32:12,200 - #12 =
INFO  10:32:12,200 - #42 1
INFO  10:32:12,200 - #8 ,
INFO  10:32:12,200 - #45 TWO
INFO  10:32:12,200 - #12 =
INFO  10:32:12,200 - #42 5
INFO  10:32:12,200 - #8 ,
INFO  10:32:12,200 - #45 THREE
INFO  10:32:12,200 - #4 }
INFO  10:32:12,200 - #16 class
INFO  10:32:12,205 - #45 A
INFO  10:32:12,205 - #3 {
INFO  10:32:12,205 - #45 int
INFO  10:32:12,210 - #45 fld1
INFO  10:32:12,210 - #5 ;
INFO  10:32:12,210 - #45 char
INFO  10:32:12,210 - #45 fld2
INFO  10:32:12,210 - #5 ;
INFO  10:32:12,210 - #3 {
INFO  10:32:12,210 - #13 void
INFO  10:32:12,210 - #45 meth1
INFO  10:32:12,210 - #6 (
INFO  10:32:12,210 - #7 )
INFO  10:32:12,215 - #3 {
INFO  10:32:12,215 - #4 }
INFO  10:32:12,215 - #4 }
INFO  10:32:12,215 - #4 }
INFO  10:32:12,215 - #3 {
INFO  10:32:12,215 - #45 int
INFO  10:32:12,215 - #45 main
INFO  10:32:12,215 - #6 (
INFO  10:32:12,215 - #7 )
INFO  10:32:12,215 - #45 int
INFO  10:32:12,215 - #45 var
INFO  10:32:12,215 - #5 ;
INFO  10:32:12,220 - #45 A
INFO  10:32:12,220 - #45 a
INFO  10:32:12,220 - #5 ;
INFO  10:32:12,220 - #3 {
INFO  10:32:12,220 - #45 a
INFO  10:32:12,220 - #12 =
INFO  10:32:12,220 - #18 new
INFO  10:32:12,223 - #45 A
INFO  10:32:12,224 - #5 ;
INFO  10:32:12,226 - #45 a
INFO  10:32:12,227 - #15 .
INFO  10:32:12,227 - #45 fld1
INFO  10:32:12,227 - #12 =
INFO  10:32:12,227 - #42 1
INFO  10:32:12,227 - #5 ;
INFO  10:32:12,227 - #10 return
INFO  10:32:12,228 - #42 0
INFO  10:32:12,228 - #5 ;
INFO  10:32:12,228 - #4 }
INFO  10:32:12,229 - #4 }
INFO  10:32:12,294 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:32:12,297 - ===================================
INFO  10:32:12,297 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:32:12,298 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:32:12,299 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:32:12,299 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:32:12,299 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:32:12,299 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:32:12,300 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:32:12,301 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:32:12,301 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:32:12,302 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:32:12,303 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:32:12,303 - INFO:  Definisana klasa A na liniji 11
INFO  10:32:12,303 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:32:12,303 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:32:12,303 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:32:12,313 - INFO:  Pristup simbolu a na liniji 29
INFO  10:32:14,523 - INFO:  Pristup simbolu a na liniji 31
INFO  10:36:46,466 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:36:46,681 - #2 program
INFO  10:36:46,681 - #45 SemanticTest
INFO  10:36:46,681 - #22 const
INFO  10:36:46,686 - #45 int
INFO  10:36:46,686 - #45 x
INFO  10:36:46,686 - #12 =
INFO  10:36:46,686 - #42 6
INFO  10:36:46,686 - #8 ,
INFO  10:36:46,686 - #45 init
INFO  10:36:46,686 - #12 =
INFO  10:36:46,686 - #42 0
INFO  10:36:46,686 - #5 ;
INFO  10:36:46,691 - #45 int
INFO  10:36:46,691 - #45 x1
INFO  10:36:46,691 - #8 ,
INFO  10:36:46,691 - #45 x3
INFO  10:36:46,691 - #25 [
INFO  10:36:46,691 - #34 ]
INFO  10:36:46,691 - #5 ;
INFO  10:36:46,696 - #45 int
INFO  10:36:46,696 - #45 x2
INFO  10:36:46,696 - #25 [
INFO  10:36:46,696 - #34 ]
INFO  10:36:46,696 - #5 ;
INFO  10:36:46,696 - #29 enum
INFO  10:36:46,696 - #45 nums
INFO  10:36:46,696 - #3 {
INFO  10:36:46,696 - #45 ONE
INFO  10:36:46,696 - #12 =
INFO  10:36:46,696 - #42 1
INFO  10:36:46,696 - #8 ,
INFO  10:36:46,696 - #45 TWO
INFO  10:36:46,696 - #12 =
INFO  10:36:46,696 - #42 5
INFO  10:36:46,696 - #8 ,
INFO  10:36:46,696 - #45 THREE
INFO  10:36:46,696 - #4 }
INFO  10:36:46,696 - #16 class
INFO  10:36:46,696 - #45 A
INFO  10:36:46,696 - #3 {
INFO  10:36:46,701 - #45 int
INFO  10:36:46,701 - #45 fld1
INFO  10:36:46,701 - #5 ;
INFO  10:36:46,701 - #45 char
INFO  10:36:46,701 - #45 fld2
INFO  10:36:46,701 - #5 ;
INFO  10:36:46,701 - #3 {
INFO  10:36:46,701 - #13 void
INFO  10:36:46,706 - #45 meth1
INFO  10:36:46,706 - #6 (
INFO  10:36:46,706 - #7 )
INFO  10:36:46,706 - #3 {
INFO  10:36:46,706 - #4 }
INFO  10:36:46,706 - #4 }
INFO  10:36:46,711 - #4 }
INFO  10:36:46,711 - #3 {
INFO  10:36:46,711 - #45 int
INFO  10:36:46,711 - #45 main
INFO  10:36:46,711 - #6 (
INFO  10:36:46,711 - #7 )
INFO  10:36:46,711 - #45 int
INFO  10:36:46,711 - #45 var
INFO  10:36:46,711 - #5 ;
INFO  10:36:46,711 - #45 A
INFO  10:36:46,711 - #45 a
INFO  10:36:46,711 - #5 ;
INFO  10:36:46,711 - #3 {
INFO  10:36:46,711 - #45 a
INFO  10:36:46,711 - #12 =
INFO  10:36:46,711 - #18 new
INFO  10:36:46,716 - #45 A
INFO  10:36:46,716 - #5 ;
INFO  10:36:46,721 - #45 a
INFO  10:36:46,721 - #15 .
INFO  10:36:46,721 - #45 fld1
INFO  10:36:46,721 - #12 =
INFO  10:36:46,721 - #42 1
INFO  10:36:46,721 - #5 ;
INFO  10:36:46,721 - #10 return
INFO  10:36:46,721 - #42 0
INFO  10:36:46,721 - #5 ;
INFO  10:36:46,721 - #4 }
INFO  10:36:46,721 - #4 }
INFO  10:36:46,771 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:36:46,771 - ===================================
INFO  10:36:46,771 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:36:46,771 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:36:46,771 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:36:46,771 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:36:46,771 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:36:46,771 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:36:46,771 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:36:46,776 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:36:46,776 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:36:46,776 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:36:46,776 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:36:46,776 - INFO:  Definisana klasa A na liniji 11
INFO  10:36:46,776 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:36:46,776 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:36:46,776 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:36:46,786 - INFO:  Pristup simbolu a na liniji 29
INFO  10:36:52,167 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:36:52,349 - #2 program
INFO  10:36:52,350 - #45 SemanticTest
INFO  10:36:52,350 - #22 const
INFO  10:36:52,353 - #45 int
INFO  10:36:52,353 - #45 x
INFO  10:36:52,355 - #12 =
INFO  10:36:52,355 - #42 6
INFO  10:36:52,355 - #8 ,
INFO  10:36:52,357 - #45 init
INFO  10:36:52,357 - #12 =
INFO  10:36:52,357 - #42 0
INFO  10:36:52,357 - #5 ;
INFO  10:36:52,357 - #45 int
INFO  10:36:52,358 - #45 x1
INFO  10:36:52,358 - #8 ,
INFO  10:36:52,360 - #45 x3
INFO  10:36:52,361 - #25 [
INFO  10:36:52,361 - #34 ]
INFO  10:36:52,361 - #5 ;
INFO  10:36:52,362 - #45 int
INFO  10:36:52,363 - #45 x2
INFO  10:36:52,363 - #25 [
INFO  10:36:52,363 - #34 ]
INFO  10:36:52,363 - #5 ;
INFO  10:36:52,363 - #29 enum
INFO  10:36:52,363 - #45 nums
INFO  10:36:52,363 - #3 {
INFO  10:36:52,364 - #45 ONE
INFO  10:36:52,364 - #12 =
INFO  10:36:52,364 - #42 1
INFO  10:36:52,364 - #8 ,
INFO  10:36:52,364 - #45 TWO
INFO  10:36:52,364 - #12 =
INFO  10:36:52,365 - #42 5
INFO  10:36:52,365 - #8 ,
INFO  10:36:52,365 - #45 THREE
INFO  10:36:52,365 - #4 }
INFO  10:36:52,365 - #16 class
INFO  10:36:52,366 - #45 A
INFO  10:36:52,366 - #3 {
INFO  10:36:52,369 - #45 int
INFO  10:36:52,370 - #45 fld1
INFO  10:36:52,373 - #5 ;
INFO  10:36:52,373 - #45 char
INFO  10:36:52,373 - #45 fld2
INFO  10:36:52,373 - #5 ;
INFO  10:36:52,374 - #3 {
INFO  10:36:52,374 - #13 void
INFO  10:36:52,375 - #45 meth1
INFO  10:36:52,376 - #6 (
INFO  10:36:52,376 - #7 )
INFO  10:36:52,377 - #3 {
INFO  10:36:52,377 - #4 }
INFO  10:36:52,379 - #4 }
INFO  10:36:52,379 - #4 }
INFO  10:36:52,379 - #3 {
INFO  10:36:52,380 - #45 int
INFO  10:36:52,380 - #45 main
INFO  10:36:52,380 - #6 (
INFO  10:36:52,380 - #7 )
INFO  10:36:52,380 - #45 int
INFO  10:36:52,380 - #45 var
INFO  10:36:52,380 - #5 ;
INFO  10:36:52,383 - #45 A
INFO  10:36:52,383 - #45 a
INFO  10:36:52,383 - #5 ;
INFO  10:36:52,383 - #3 {
INFO  10:36:52,383 - #45 a
INFO  10:36:52,383 - #12 =
INFO  10:36:52,384 - #18 new
INFO  10:36:52,386 - #45 A
INFO  10:36:52,386 - #5 ;
INFO  10:36:52,388 - #45 a
INFO  10:36:52,389 - #15 .
INFO  10:36:52,389 - #45 fld1
INFO  10:36:52,389 - #12 =
INFO  10:36:52,389 - #42 1
INFO  10:36:52,390 - #5 ;
INFO  10:36:52,390 - #10 return
INFO  10:36:52,390 - #42 0
INFO  10:36:52,390 - #5 ;
INFO  10:36:52,390 - #4 }
INFO  10:36:52,391 - #4 }
INFO  10:36:52,437 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:36:52,437 - ===================================
INFO  10:36:52,438 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:36:52,438 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:36:52,438 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:36:52,438 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:36:52,439 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:36:52,439 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:36:52,439 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:36:52,439 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:36:52,439 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:36:52,439 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:36:52,440 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:36:52,440 - INFO:  Definisana klasa A na liniji 11
INFO  10:36:52,440 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:36:52,440 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:36:52,440 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:36:52,452 - INFO:  Pristup simbolu a na liniji 29
INFO  10:37:00,690 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:37:00,920 - #2 program
INFO  10:37:00,920 - #45 SemanticTest
INFO  10:37:00,920 - #22 const
INFO  10:37:00,920 - #45 int
INFO  10:37:00,920 - #45 x
INFO  10:37:00,925 - #12 =
INFO  10:37:00,925 - #42 6
INFO  10:37:00,925 - #8 ,
INFO  10:37:00,925 - #45 init
INFO  10:37:00,925 - #12 =
INFO  10:37:00,925 - #42 0
INFO  10:37:00,925 - #5 ;
INFO  10:37:00,925 - #45 int
INFO  10:37:00,930 - #45 x1
INFO  10:37:00,930 - #8 ,
INFO  10:37:00,935 - #45 x3
INFO  10:37:00,935 - #25 [
INFO  10:37:00,935 - #34 ]
INFO  10:37:00,935 - #5 ;
INFO  10:37:00,935 - #45 int
INFO  10:37:00,935 - #45 x2
INFO  10:37:00,935 - #25 [
INFO  10:37:00,935 - #34 ]
INFO  10:37:00,935 - #5 ;
INFO  10:37:00,935 - #29 enum
INFO  10:37:00,935 - #45 nums
INFO  10:37:00,935 - #3 {
INFO  10:37:00,935 - #45 ONE
INFO  10:37:00,935 - #12 =
INFO  10:37:00,935 - #42 1
INFO  10:37:00,935 - #8 ,
INFO  10:37:00,940 - #45 TWO
INFO  10:37:00,940 - #12 =
INFO  10:37:00,940 - #42 5
INFO  10:37:00,940 - #8 ,
INFO  10:37:00,940 - #45 THREE
INFO  10:37:00,940 - #4 }
INFO  10:37:00,940 - #16 class
INFO  10:37:00,940 - #45 A
INFO  10:37:00,940 - #3 {
INFO  10:37:00,945 - #45 int
INFO  10:37:00,945 - #45 fld1
INFO  10:37:00,945 - #5 ;
INFO  10:37:00,945 - #45 char
INFO  10:37:00,945 - #45 fld2
INFO  10:37:00,950 - #5 ;
INFO  10:37:00,950 - #3 {
INFO  10:37:00,950 - #13 void
INFO  10:37:00,950 - #45 meth1
INFO  10:37:00,950 - #6 (
INFO  10:37:00,950 - #7 )
INFO  10:37:00,955 - #3 {
INFO  10:37:00,955 - #4 }
INFO  10:37:00,955 - #4 }
INFO  10:37:00,955 - #4 }
INFO  10:37:00,955 - #3 {
INFO  10:37:00,955 - #45 int
INFO  10:37:00,955 - #45 main
INFO  10:37:00,955 - #6 (
INFO  10:37:00,955 - #7 )
INFO  10:37:00,955 - #45 int
INFO  10:37:00,955 - #45 var
INFO  10:37:00,955 - #5 ;
INFO  10:37:00,955 - #45 A
INFO  10:37:00,955 - #45 a
INFO  10:37:00,955 - #5 ;
INFO  10:37:00,955 - #3 {
INFO  10:37:00,955 - #45 a
INFO  10:37:00,955 - #12 =
INFO  10:37:00,960 - #18 new
INFO  10:37:00,963 - #45 A
INFO  10:37:00,963 - #5 ;
INFO  10:37:00,963 - #45 a
INFO  10:37:00,968 - #15 .
INFO  10:37:00,968 - #45 fld1
INFO  10:37:00,968 - #12 =
INFO  10:37:00,968 - #42 1
INFO  10:37:00,968 - #5 ;
INFO  10:37:00,968 - #10 return
INFO  10:37:00,968 - #42 0
INFO  10:37:00,968 - #5 ;
INFO  10:37:00,968 - #4 }
INFO  10:37:00,968 - #4 }
INFO  10:37:01,018 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:37:01,018 - ===================================
INFO  10:37:01,018 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:37:01,018 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:37:01,018 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:37:01,018 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:37:01,018 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:37:01,018 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:37:01,018 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:37:01,018 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:37:01,018 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:37:01,018 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:37:01,018 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:37:01,018 - INFO:  Definisana klasa A na liniji 11
INFO  10:37:01,018 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:37:01,018 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:37:01,018 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:37:01,028 - INFO:  Pristup simbolu a na liniji 29
INFO  10:37:02,186 - INFO:  Pristup simbolu a na liniji 31
INFO  10:37:12,981 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:37:13,196 - #2 program
INFO  10:37:13,196 - #45 SemanticTest
INFO  10:37:13,196 - #22 const
INFO  10:37:13,196 - #45 int
INFO  10:37:13,196 - #45 x
INFO  10:37:13,201 - #12 =
INFO  10:37:13,201 - #42 6
INFO  10:37:13,201 - #8 ,
INFO  10:37:13,201 - #45 init
INFO  10:37:13,201 - #12 =
INFO  10:37:13,201 - #42 0
INFO  10:37:13,201 - #5 ;
INFO  10:37:13,201 - #45 int
INFO  10:37:13,201 - #45 x1
INFO  10:37:13,201 - #8 ,
INFO  10:37:13,206 - #45 x3
INFO  10:37:13,206 - #25 [
INFO  10:37:13,206 - #34 ]
INFO  10:37:13,206 - #5 ;
INFO  10:37:13,206 - #45 int
INFO  10:37:13,206 - #45 x2
INFO  10:37:13,206 - #25 [
INFO  10:37:13,206 - #34 ]
INFO  10:37:13,206 - #5 ;
INFO  10:37:13,206 - #29 enum
INFO  10:37:13,206 - #45 nums
INFO  10:37:13,206 - #3 {
INFO  10:37:13,211 - #45 ONE
INFO  10:37:13,211 - #12 =
INFO  10:37:13,211 - #42 1
INFO  10:37:13,211 - #8 ,
INFO  10:37:13,211 - #45 TWO
INFO  10:37:13,211 - #12 =
INFO  10:37:13,211 - #42 5
INFO  10:37:13,211 - #8 ,
INFO  10:37:13,211 - #45 THREE
INFO  10:37:13,211 - #4 }
INFO  10:37:13,211 - #16 class
INFO  10:37:13,211 - #45 A
INFO  10:37:13,211 - #3 {
INFO  10:37:13,218 - #45 int
INFO  10:37:13,219 - #45 fld1
INFO  10:37:13,219 - #5 ;
INFO  10:37:13,220 - #45 char
INFO  10:37:13,220 - #45 fld2
INFO  10:37:13,220 - #5 ;
INFO  10:37:13,220 - #3 {
INFO  10:37:13,220 - #13 void
INFO  10:37:13,222 - #45 meth1
INFO  10:37:13,223 - #6 (
INFO  10:37:13,224 - #7 )
INFO  10:37:13,225 - #3 {
INFO  10:37:13,225 - #4 }
INFO  10:37:13,226 - #4 }
INFO  10:37:13,227 - #4 }
INFO  10:37:13,227 - #3 {
INFO  10:37:13,227 - #45 int
INFO  10:37:13,227 - #45 main
INFO  10:37:13,228 - #6 (
INFO  10:37:13,228 - #7 )
INFO  10:37:13,228 - #45 int
INFO  10:37:13,228 - #45 var
INFO  10:37:13,228 - #5 ;
INFO  10:37:13,228 - #45 A
INFO  10:37:13,229 - #45 a
INFO  10:37:13,229 - #5 ;
INFO  10:37:13,229 - #3 {
INFO  10:37:13,229 - #45 a
INFO  10:37:13,229 - #12 =
INFO  10:37:13,229 - #18 new
INFO  10:37:13,231 - #45 A
INFO  10:37:13,232 - #5 ;
INFO  10:37:13,234 - #45 a
INFO  10:37:13,234 - #15 .
INFO  10:37:13,234 - #45 fld1
INFO  10:37:13,234 - #12 =
INFO  10:37:13,234 - #42 1
INFO  10:37:13,235 - #5 ;
INFO  10:37:13,235 - #10 return
INFO  10:37:13,235 - #42 0
INFO  10:37:13,235 - #5 ;
INFO  10:37:13,235 - #4 }
INFO  10:37:13,236 - #4 }
INFO  10:37:13,279 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:37:13,367 - ===================================
INFO  10:37:13,367 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:37:13,368 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:37:13,368 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:37:13,368 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:37:13,368 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:37:13,368 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:37:13,369 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:37:13,369 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:37:13,369 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:37:13,369 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:37:13,370 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:37:13,371 - INFO:  Definisana klasa A na liniji 11
INFO  10:37:13,371 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:37:13,371 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:37:13,371 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:37:13,379 - INFO:  Pristup simbolu a na liniji 29
INFO  10:37:14,348 - INFO:  Pristup simbolu a na liniji 31
INFO  10:46:57,577 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:46:57,753 - #2 program
INFO  10:46:57,753 - #45 SemanticTest
INFO  10:46:57,753 - #22 const
INFO  10:46:57,753 - #45 int
INFO  10:46:57,753 - #45 x
INFO  10:46:57,753 - #12 =
INFO  10:46:57,758 - #42 6
INFO  10:46:57,758 - #8 ,
INFO  10:46:57,763 - #45 init
INFO  10:46:57,763 - #12 =
INFO  10:46:57,763 - #42 0
INFO  10:46:57,763 - #5 ;
INFO  10:46:57,763 - #45 int
INFO  10:46:57,763 - #45 x1
INFO  10:46:57,763 - #8 ,
INFO  10:46:57,768 - #45 x3
INFO  10:46:57,768 - #25 [
INFO  10:46:57,768 - #34 ]
INFO  10:46:57,768 - #5 ;
INFO  10:46:57,768 - #45 int
INFO  10:46:57,768 - #45 x2
INFO  10:46:57,768 - #25 [
INFO  10:46:57,768 - #34 ]
INFO  10:46:57,768 - #5 ;
INFO  10:46:57,768 - #29 enum
INFO  10:46:57,768 - #45 nums
INFO  10:46:57,768 - #3 {
INFO  10:46:57,768 - #45 ONE
INFO  10:46:57,768 - #12 =
INFO  10:46:57,768 - #42 1
INFO  10:46:57,768 - #8 ,
INFO  10:46:57,768 - #45 TWO
INFO  10:46:57,773 - #12 =
INFO  10:46:57,773 - #42 5
INFO  10:46:57,773 - #8 ,
INFO  10:46:57,773 - #45 THREE
INFO  10:46:57,773 - #4 }
INFO  10:46:57,773 - #16 class
INFO  10:46:57,773 - #45 A
INFO  10:46:57,773 - #3 {
INFO  10:46:57,778 - #45 int
INFO  10:46:57,778 - #45 fld1
INFO  10:46:57,778 - #5 ;
INFO  10:46:57,778 - #45 char
INFO  10:46:57,778 - #45 fld2
INFO  10:46:57,778 - #5 ;
INFO  10:46:57,778 - #3 {
INFO  10:46:57,778 - #13 void
INFO  10:46:57,778 - #45 meth1
INFO  10:46:57,783 - #6 (
INFO  10:46:57,783 - #7 )
INFO  10:46:57,783 - #3 {
INFO  10:46:57,783 - #4 }
INFO  10:46:57,783 - #4 }
INFO  10:46:57,783 - #4 }
INFO  10:46:57,783 - #3 {
INFO  10:46:57,783 - #45 int
INFO  10:46:57,788 - #45 main
INFO  10:46:57,788 - #6 (
INFO  10:46:57,788 - #7 )
INFO  10:46:57,788 - #45 int
INFO  10:46:57,788 - #45 var
INFO  10:46:57,788 - #5 ;
INFO  10:46:57,788 - #45 A
INFO  10:46:57,788 - #45 a
INFO  10:46:57,788 - #5 ;
INFO  10:46:57,788 - #3 {
INFO  10:46:57,788 - #45 a
INFO  10:46:57,788 - #12 =
INFO  10:46:57,788 - #18 new
INFO  10:46:57,793 - #45 A
INFO  10:46:57,793 - #5 ;
INFO  10:46:57,793 - #45 a
INFO  10:46:57,793 - #15 .
INFO  10:46:57,793 - #45 fld1
INFO  10:46:57,793 - #12 =
INFO  10:46:57,793 - #42 1
INFO  10:46:57,793 - #5 ;
INFO  10:46:57,798 - #10 return
INFO  10:46:57,798 - #42 0
INFO  10:46:57,798 - #5 ;
INFO  10:46:57,798 - #4 }
INFO  10:46:57,798 - #4 }
INFO  10:46:57,843 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    NumFactor(
                     1
                    ) [NumFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:46:57,843 - ===================================
INFO  10:46:57,843 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:46:57,843 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:46:57,843 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:46:57,843 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:46:57,843 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:46:57,843 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:46:57,843 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:46:57,843 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:46:57,848 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:46:57,848 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:46:57,848 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:46:57,848 - INFO:  Definisana klasa A na liniji 11
INFO  10:46:57,848 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:46:57,848 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:46:57,848 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:46:57,858 - INFO:  Pristup simbolu a na liniji 29
INFO  10:47:01,126 - INFO:  Pristup simbolu a na liniji 31
INFO  10:47:22,695 - INFO: Pristup strukturi a, polju fld1 na liniji 31
INFO  10:48:16,089 - INFO:  Deklarisan metod main na liniji 27
INFO  10:48:16,090 - ===================================
INFO  10:48:16,150 - Uspesno parsiranje!
INFO  10:48:35,696 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:48:35,776 - #2 program
INFO  10:48:35,776 - #45 SemanticTest
INFO  10:48:35,776 - #22 const
INFO  10:48:35,776 - #45 int
INFO  10:48:35,776 - #45 x
INFO  10:48:35,781 - #12 =
INFO  10:48:35,781 - #42 6
INFO  10:48:35,781 - #8 ,
INFO  10:48:35,781 - #45 init
INFO  10:48:35,781 - #12 =
INFO  10:48:35,781 - #42 0
INFO  10:48:35,781 - #5 ;
INFO  10:48:35,781 - #45 int
INFO  10:48:35,781 - #45 x1
INFO  10:48:35,781 - #8 ,
INFO  10:48:35,786 - #45 x3
INFO  10:48:35,786 - #25 [
INFO  10:48:35,786 - #34 ]
INFO  10:48:35,786 - #5 ;
INFO  10:48:35,786 - #45 int
INFO  10:48:35,786 - #45 x2
INFO  10:48:35,786 - #25 [
INFO  10:48:35,786 - #34 ]
INFO  10:48:35,786 - #5 ;
INFO  10:48:35,786 - #29 enum
INFO  10:48:35,786 - #45 nums
INFO  10:48:35,786 - #3 {
INFO  10:48:35,786 - #45 ONE
INFO  10:48:35,786 - #12 =
INFO  10:48:35,786 - #42 1
INFO  10:48:35,786 - #8 ,
INFO  10:48:35,786 - #45 TWO
INFO  10:48:35,786 - #12 =
INFO  10:48:35,786 - #42 5
INFO  10:48:35,786 - #8 ,
INFO  10:48:35,786 - #45 THREE
INFO  10:48:35,786 - #4 }
INFO  10:48:35,786 - #16 class
INFO  10:48:35,786 - #45 A
INFO  10:48:35,786 - #3 {
INFO  10:48:35,791 - #45 int
INFO  10:48:35,791 - #45 fld1
INFO  10:48:35,791 - #5 ;
INFO  10:48:35,791 - #45 char
INFO  10:48:35,791 - #45 fld2
INFO  10:48:35,791 - #5 ;
INFO  10:48:35,791 - #3 {
INFO  10:48:35,791 - #13 void
INFO  10:48:35,791 - #45 meth1
INFO  10:48:35,791 - #6 (
INFO  10:48:35,791 - #7 )
INFO  10:48:35,791 - #3 {
INFO  10:48:35,791 - #4 }
INFO  10:48:35,791 - #4 }
INFO  10:48:35,791 - #4 }
INFO  10:48:35,791 - #3 {
INFO  10:48:35,791 - #45 int
INFO  10:48:35,791 - #45 main
INFO  10:48:35,796 - #6 (
INFO  10:48:35,796 - #7 )
INFO  10:48:35,796 - #45 int
INFO  10:48:35,796 - #45 var
INFO  10:48:35,796 - #5 ;
INFO  10:48:35,796 - #45 A
INFO  10:48:35,796 - #45 a
INFO  10:48:35,796 - #5 ;
INFO  10:48:35,796 - #3 {
INFO  10:48:35,796 - #45 a
INFO  10:48:35,796 - #12 =
INFO  10:48:35,796 - #18 new
INFO  10:48:35,796 - #45 A
INFO  10:48:35,796 - #5 ;
INFO  10:48:35,801 - #45 a
INFO  10:48:35,801 - #15 .
INFO  10:48:35,801 - #45 fld1
INFO  10:48:35,801 - #12 =
INFO  10:48:35,801 - #43 a
INFO  10:48:35,801 - #5 ;
INFO  10:48:35,801 - #10 return
INFO  10:48:35,801 - #42 0
INFO  10:48:35,801 - #5 ;
INFO  10:48:35,801 - #4 }
INFO  10:48:35,801 - #4 }
INFO  10:48:35,816 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld1
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    CharFactor(
                     a
                    ) [CharFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:48:35,816 - ===================================
INFO  10:48:35,816 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:48:35,816 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:48:35,816 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:48:35,816 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:48:35,816 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:48:35,816 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:48:35,816 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:48:35,816 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:48:35,816 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:48:35,816 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:48:35,816 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:48:35,816 - INFO:  Definisana klasa A na liniji 11
INFO  10:48:35,816 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:48:35,816 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:48:35,816 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:48:35,821 - INFO:  Pristup simbolu a na liniji 29
INFO  10:48:35,821 - INFO:  Pristup simbolu a na liniji 31
INFO  10:48:35,826 - INFO: Pristup strukturi a, polju fld1 na liniji 31
ERROR 10:48:35,826 - ERROR: Nekompatibilnost sa stvarnim parametrima na liniji 31		<--------------- ERROR 
INFO  10:48:35,826 - INFO:  Deklarisan metod main na liniji 27
INFO  10:48:35,826 - ===================================
ERROR 10:48:35,826 - Postoji 1 greska u generisanom kodu!
INFO  10:49:01,034 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:49:01,119 - #2 program
INFO  10:49:01,119 - #45 SemanticTest
INFO  10:49:01,119 - #22 const
INFO  10:49:01,119 - #45 int
INFO  10:49:01,119 - #45 x
INFO  10:49:01,119 - #12 =
INFO  10:49:01,119 - #42 6
INFO  10:49:01,119 - #8 ,
INFO  10:49:01,119 - #45 init
INFO  10:49:01,119 - #12 =
INFO  10:49:01,119 - #42 0
INFO  10:49:01,119 - #5 ;
INFO  10:49:01,119 - #45 int
INFO  10:49:01,119 - #45 x1
INFO  10:49:01,124 - #8 ,
INFO  10:49:01,124 - #45 x3
INFO  10:49:01,124 - #25 [
INFO  10:49:01,124 - #34 ]
INFO  10:49:01,124 - #5 ;
INFO  10:49:01,124 - #45 int
INFO  10:49:01,124 - #45 x2
INFO  10:49:01,124 - #25 [
INFO  10:49:01,124 - #34 ]
INFO  10:49:01,124 - #5 ;
INFO  10:49:01,124 - #29 enum
INFO  10:49:01,124 - #45 nums
INFO  10:49:01,124 - #3 {
INFO  10:49:01,124 - #45 ONE
INFO  10:49:01,124 - #12 =
INFO  10:49:01,124 - #42 1
INFO  10:49:01,124 - #8 ,
INFO  10:49:01,124 - #45 TWO
INFO  10:49:01,124 - #12 =
INFO  10:49:01,124 - #42 5
INFO  10:49:01,124 - #8 ,
INFO  10:49:01,129 - #45 THREE
INFO  10:49:01,129 - #4 }
INFO  10:49:01,129 - #16 class
INFO  10:49:01,129 - #45 A
INFO  10:49:01,129 - #3 {
INFO  10:49:01,134 - #45 int
INFO  10:49:01,134 - #45 fld1
INFO  10:49:01,134 - #5 ;
INFO  10:49:01,134 - #45 char
INFO  10:49:01,134 - #45 fld2
INFO  10:49:01,134 - #5 ;
INFO  10:49:01,134 - #3 {
INFO  10:49:01,134 - #13 void
INFO  10:49:01,134 - #45 meth1
INFO  10:49:01,134 - #6 (
INFO  10:49:01,134 - #7 )
INFO  10:49:01,134 - #3 {
INFO  10:49:01,134 - #4 }
INFO  10:49:01,134 - #4 }
INFO  10:49:01,139 - #4 }
INFO  10:49:01,139 - #3 {
INFO  10:49:01,139 - #45 int
INFO  10:49:01,139 - #45 main
INFO  10:49:01,139 - #6 (
INFO  10:49:01,139 - #7 )
INFO  10:49:01,139 - #45 int
INFO  10:49:01,139 - #45 var
INFO  10:49:01,139 - #5 ;
INFO  10:49:01,139 - #45 A
INFO  10:49:01,139 - #45 a
INFO  10:49:01,139 - #5 ;
INFO  10:49:01,139 - #3 {
INFO  10:49:01,139 - #45 a
INFO  10:49:01,139 - #12 =
INFO  10:49:01,139 - #18 new
INFO  10:49:01,139 - #45 A
INFO  10:49:01,139 - #5 ;
INFO  10:49:01,144 - #45 a
INFO  10:49:01,144 - #15 .
INFO  10:49:01,144 - #45 fld2
INFO  10:49:01,144 - #12 =
INFO  10:49:01,144 - #43 a
INFO  10:49:01,144 - #5 ;
INFO  10:49:01,144 - #10 return
INFO  10:49:01,144 - #42 0
INFO  10:49:01,144 - #5 ;
INFO  10:49:01,144 - #4 }
INFO  10:49:01,144 - #4 }
INFO  10:49:01,159 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      NewFactor(
                        Type(
                         A
                        ) [Type]
                      ) [NewFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 fld2
                ) [DesignFld]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    CharFactor(
                     a
                    ) [CharFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:49:01,159 - ===================================
INFO  10:49:01,159 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:49:01,159 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:49:01,159 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:49:01,159 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:49:01,159 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:49:01,159 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:49:01,159 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:49:01,159 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:49:01,159 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:49:01,159 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:49:01,159 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:49:01,159 - INFO:  Definisana klasa A na liniji 11
INFO  10:49:01,159 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:49:01,159 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:49:01,159 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:49:01,164 - INFO:  Pristup simbolu a na liniji 29
INFO  10:49:01,164 - INFO:  Pristup simbolu a na liniji 31
INFO  10:49:01,164 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  10:49:01,164 - INFO:  Deklarisan metod main na liniji 27
INFO  10:49:01,164 - ===================================
INFO  10:49:01,179 - Uspesno parsiranje!
INFO  10:49:24,569 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:49:24,644 - #2 program
INFO  10:49:24,644 - #45 SemanticTest
INFO  10:49:24,644 - #22 const
INFO  10:49:24,644 - #45 int
INFO  10:49:24,644 - #45 x
INFO  10:49:24,649 - #12 =
INFO  10:49:24,649 - #42 6
INFO  10:49:24,649 - #8 ,
INFO  10:49:24,649 - #45 init
INFO  10:49:24,649 - #12 =
INFO  10:49:24,649 - #42 0
INFO  10:49:24,649 - #5 ;
INFO  10:49:24,649 - #45 int
INFO  10:49:24,649 - #45 x1
INFO  10:49:24,649 - #8 ,
INFO  10:49:24,649 - #45 x3
INFO  10:49:24,649 - #25 [
INFO  10:49:24,649 - #34 ]
INFO  10:49:24,649 - #5 ;
INFO  10:49:24,649 - #45 int
INFO  10:49:24,649 - #45 x2
INFO  10:49:24,654 - #25 [
INFO  10:49:24,654 - #34 ]
INFO  10:49:24,654 - #5 ;
INFO  10:49:24,654 - #29 enum
INFO  10:49:24,654 - #45 nums
INFO  10:49:24,654 - #3 {
INFO  10:49:24,654 - #45 ONE
INFO  10:49:24,654 - #12 =
INFO  10:49:24,654 - #42 1
INFO  10:49:24,654 - #8 ,
INFO  10:49:24,654 - #45 TWO
INFO  10:49:24,654 - #12 =
INFO  10:49:24,654 - #42 5
INFO  10:49:24,654 - #8 ,
INFO  10:49:24,654 - #45 THREE
INFO  10:49:24,654 - #4 }
INFO  10:49:24,654 - #16 class
INFO  10:49:24,654 - #45 A
INFO  10:49:24,654 - #3 {
INFO  10:49:24,659 - #45 int
INFO  10:49:24,659 - #45 fld1
INFO  10:49:24,659 - #5 ;
INFO  10:49:24,659 - #45 char
INFO  10:49:24,659 - #45 fld2
INFO  10:49:24,659 - #5 ;
INFO  10:49:24,659 - #3 {
INFO  10:49:24,659 - #13 void
INFO  10:49:24,659 - #45 meth1
INFO  10:49:24,659 - #6 (
INFO  10:49:24,659 - #7 )
INFO  10:49:24,664 - #3 {
INFO  10:49:24,664 - #4 }
INFO  10:49:24,664 - #4 }
INFO  10:49:24,664 - #4 }
INFO  10:49:24,664 - #3 {
INFO  10:49:24,664 - #45 int
INFO  10:49:24,664 - #45 main
INFO  10:49:24,664 - #6 (
INFO  10:49:24,664 - #7 )
INFO  10:49:24,664 - #45 int
INFO  10:49:24,664 - #45 var
INFO  10:49:24,664 - #5 ;
INFO  10:49:24,664 - #45 A
INFO  10:49:24,664 - #45 a
INFO  10:49:24,664 - #5 ;
INFO  10:49:24,664 - #3 {
INFO  10:49:24,664 - #45 a
INFO  10:49:24,664 - #12 =
INFO  10:49:24,664 - #18 new
INFO  10:49:24,669 - #45 A
INFO  10:49:24,669 - #5 ;
INFO  10:49:24,669 - #45 a
INFO  10:49:24,669 - #15 .
INFO  10:49:24,669 - #45 fld2
INFO  10:49:24,669 - #12 =
INFO  10:49:24,669 - #43 a
INFO  10:49:24,669 - #5 ;
INFO  10:49:24,669 - #45 a
INFO  10:49:24,669 - #15 .
INFO  10:49:24,669 - #45 meth1
INFO  10:49:24,669 - #6 (
INFO  10:49:24,669 - #7 )
INFO  10:49:24,669 - #5 ;
INFO  10:49:24,669 - #10 return
INFO  10:49:24,669 - #42 0
INFO  10:49:24,669 - #5 ;
INFO  10:49:24,669 - #4 }
INFO  10:49:24,669 - #4 }
INFO  10:49:24,679 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth1
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:49:24,679 - ===================================
INFO  10:49:24,679 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:49:24,679 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:49:24,679 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:49:24,679 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:49:24,679 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:49:24,684 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:49:24,684 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:49:24,684 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:49:24,684 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:49:24,689 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:49:24,689 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:49:24,689 - INFO:  Definisana klasa A na liniji 11
INFO  10:49:24,689 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:49:24,689 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:49:24,689 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:49:24,689 - INFO:  Pristup simbolu a na liniji 29
INFO  10:49:24,689 - INFO:  Pristup simbolu a na liniji 31
INFO  10:49:24,689 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  10:49:24,689 - INFO:  Pristup simbolu a na liniji 32
INFO  10:49:24,689 - INFO: Pristup strukturi a, polju meth1 na liniji 32
ERROR 10:49:24,689 - ERROR: Nekompatibilnost sa stvarnim parametrima na liniji 32		<--------------- ERROR 
INFO  10:49:24,689 - INFO:  Deklarisan metod main na liniji 27
INFO  10:49:24,689 - ===================================
ERROR 10:49:24,689 - Postoji 1 greska u generisanom kodu!
INFO  10:50:20,305 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:50:20,534 - #2 program
INFO  10:50:20,534 - #45 SemanticTest
INFO  10:50:20,534 - #22 const
INFO  10:50:20,534 - #45 int
INFO  10:50:20,534 - #45 x
INFO  10:50:20,534 - #12 =
INFO  10:50:20,534 - #42 6
INFO  10:50:20,534 - #8 ,
INFO  10:50:20,539 - #45 init
INFO  10:50:20,539 - #12 =
INFO  10:50:20,539 - #42 0
INFO  10:50:20,539 - #5 ;
INFO  10:50:20,539 - #45 int
INFO  10:50:20,539 - #45 x1
INFO  10:50:20,539 - #8 ,
INFO  10:50:20,544 - #45 x3
INFO  10:50:20,544 - #25 [
INFO  10:50:20,544 - #34 ]
INFO  10:50:20,544 - #5 ;
INFO  10:50:20,544 - #45 int
INFO  10:50:20,544 - #45 x2
INFO  10:50:20,544 - #25 [
INFO  10:50:20,544 - #34 ]
INFO  10:50:20,544 - #5 ;
INFO  10:50:20,544 - #29 enum
INFO  10:50:20,544 - #45 nums
INFO  10:50:20,544 - #3 {
INFO  10:50:20,544 - #45 ONE
INFO  10:50:20,549 - #12 =
INFO  10:50:20,549 - #42 1
INFO  10:50:20,549 - #8 ,
INFO  10:50:20,549 - #45 TWO
INFO  10:50:20,549 - #12 =
INFO  10:50:20,549 - #42 5
INFO  10:50:20,549 - #8 ,
INFO  10:50:20,549 - #45 THREE
INFO  10:50:20,549 - #4 }
INFO  10:50:20,549 - #16 class
INFO  10:50:20,549 - #45 A
INFO  10:50:20,552 - #3 {
INFO  10:50:20,554 - #45 int
INFO  10:50:20,554 - #45 fld1
INFO  10:50:20,554 - #5 ;
INFO  10:50:20,554 - #45 char
INFO  10:50:20,554 - #45 fld2
INFO  10:50:20,554 - #5 ;
INFO  10:50:20,554 - #3 {
INFO  10:50:20,554 - #13 void
INFO  10:50:20,554 - #45 meth1
INFO  10:50:20,559 - #6 (
INFO  10:50:20,559 - #7 )
INFO  10:50:20,559 - #3 {
INFO  10:50:20,559 - #4 }
INFO  10:50:20,559 - #4 }
INFO  10:50:20,559 - #4 }
INFO  10:50:20,559 - #3 {
INFO  10:50:20,564 - #45 int
INFO  10:50:20,564 - #45 main
INFO  10:50:20,564 - #6 (
INFO  10:50:20,564 - #7 )
INFO  10:50:20,564 - #45 int
INFO  10:50:20,564 - #45 var
INFO  10:50:20,564 - #5 ;
INFO  10:50:20,564 - #45 A
INFO  10:50:20,564 - #45 a
INFO  10:50:20,564 - #5 ;
INFO  10:50:20,564 - #3 {
INFO  10:50:20,564 - #45 a
INFO  10:50:20,564 - #12 =
INFO  10:50:20,566 - #18 new
INFO  10:50:20,566 - #45 A
INFO  10:50:20,566 - #5 ;
INFO  10:50:20,571 - #45 a
INFO  10:50:20,572 - #15 .
INFO  10:50:20,572 - #45 fld2
INFO  10:50:20,572 - #12 =
INFO  10:50:20,572 - #43 a
INFO  10:50:20,572 - #5 ;
INFO  10:50:20,572 - #45 a
INFO  10:50:20,572 - #15 .
INFO  10:50:20,572 - #45 meth1
INFO  10:50:20,572 - #6 (
INFO  10:50:20,572 - #7 )
INFO  10:50:20,573 - #5 ;
INFO  10:50:20,574 - #10 return
INFO  10:50:20,574 - #42 0
INFO  10:50:20,574 - #5 ;
INFO  10:50:20,574 - #4 }
INFO  10:50:20,574 - #4 }
INFO  10:50:20,624 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth1
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:50:20,624 - ===================================
INFO  10:50:20,624 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:50:20,626 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:50:20,626 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:50:20,626 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:50:20,626 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:50:20,626 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:50:20,626 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:50:20,626 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:50:20,626 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:50:20,631 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:50:20,636 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:50:20,636 - INFO:  Definisana klasa A na liniji 11
INFO  10:50:20,636 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:50:20,636 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:50:20,636 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:50:20,636 - INFO:  Pristup simbolu a na liniji 29
INFO  10:50:21,659 - INFO:  Pristup simbolu a na liniji 31
INFO  10:50:31,779 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  10:50:31,782 - INFO:  Pristup simbolu a na liniji 32
INFO  10:50:32,470 - INFO: Pristup strukturi a, polju meth1 na liniji 32
ERROR 10:50:32,471 - ERROR: Nekompatibilnost sa stvarnim parametrima na liniji 32		<--------------- ERROR 
INFO  10:50:32,472 - INFO:  Deklarisan metod main na liniji 27
INFO  10:50:32,473 - ===================================
ERROR 10:50:32,474 - Postoji 1 greska u generisanom kodu!
INFO  10:51:11,938 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:51:12,150 - #2 program
INFO  10:51:12,150 - #45 SemanticTest
INFO  10:51:12,150 - #22 const
INFO  10:51:12,152 - #45 int
INFO  10:51:12,152 - #45 x
INFO  10:51:12,152 - #12 =
INFO  10:51:12,152 - #42 6
INFO  10:51:12,152 - #8 ,
INFO  10:51:12,152 - #45 init
INFO  10:51:12,152 - #12 =
INFO  10:51:12,152 - #42 0
INFO  10:51:12,152 - #5 ;
INFO  10:51:12,152 - #45 int
INFO  10:51:12,152 - #45 x1
INFO  10:51:12,152 - #8 ,
INFO  10:51:12,157 - #45 x3
INFO  10:51:12,157 - #25 [
INFO  10:51:12,157 - #34 ]
INFO  10:51:12,157 - #5 ;
INFO  10:51:12,157 - #45 int
INFO  10:51:12,157 - #45 x2
INFO  10:51:12,157 - #25 [
INFO  10:51:12,157 - #34 ]
INFO  10:51:12,157 - #5 ;
INFO  10:51:12,157 - #29 enum
INFO  10:51:12,157 - #45 nums
INFO  10:51:12,157 - #3 {
INFO  10:51:12,157 - #45 ONE
INFO  10:51:12,157 - #12 =
INFO  10:51:12,157 - #42 1
INFO  10:51:12,162 - #8 ,
INFO  10:51:12,162 - #45 TWO
INFO  10:51:12,162 - #12 =
INFO  10:51:12,162 - #42 5
INFO  10:51:12,162 - #8 ,
INFO  10:51:12,162 - #45 THREE
INFO  10:51:12,162 - #4 }
INFO  10:51:12,162 - #16 class
INFO  10:51:12,162 - #45 A
INFO  10:51:12,162 - #3 {
INFO  10:51:12,167 - #45 int
INFO  10:51:12,167 - #45 fld1
INFO  10:51:12,172 - #5 ;
INFO  10:51:12,172 - #45 char
INFO  10:51:12,172 - #45 fld2
INFO  10:51:12,172 - #5 ;
INFO  10:51:12,172 - #3 {
INFO  10:51:12,172 - #13 void
INFO  10:51:12,172 - #45 meth1
INFO  10:51:12,172 - #6 (
INFO  10:51:12,172 - #7 )
INFO  10:51:12,172 - #3 {
INFO  10:51:12,172 - #4 }
INFO  10:51:12,177 - #4 }
INFO  10:51:12,177 - #4 }
INFO  10:51:12,177 - #3 {
INFO  10:51:12,177 - #45 int
INFO  10:51:12,177 - #45 main
INFO  10:51:12,177 - #6 (
INFO  10:51:12,177 - #7 )
INFO  10:51:12,177 - #45 int
INFO  10:51:12,177 - #45 var
INFO  10:51:12,177 - #5 ;
INFO  10:51:12,177 - #45 A
INFO  10:51:12,177 - #45 a
INFO  10:51:12,177 - #5 ;
INFO  10:51:12,177 - #3 {
INFO  10:51:12,177 - #45 a
INFO  10:51:12,177 - #12 =
INFO  10:51:12,182 - #18 new
INFO  10:51:12,182 - #45 A
INFO  10:51:12,182 - #5 ;
INFO  10:51:12,187 - #45 a
INFO  10:51:12,187 - #15 .
INFO  10:51:12,187 - #45 fld2
INFO  10:51:12,187 - #12 =
INFO  10:51:12,187 - #43 a
INFO  10:51:12,187 - #5 ;
INFO  10:51:12,187 - #45 a
INFO  10:51:12,187 - #15 .
INFO  10:51:12,187 - #45 meth1
INFO  10:51:12,187 - #6 (
INFO  10:51:12,187 - #7 )
INFO  10:51:12,190 - #5 ;
INFO  10:51:12,190 - #10 return
INFO  10:51:12,190 - #42 0
INFO  10:51:12,190 - #5 ;
INFO  10:51:12,190 - #4 }
INFO  10:51:12,190 - #4 }
INFO  10:51:12,237 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth1
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:51:12,238 - ===================================
INFO  10:51:12,241 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:51:12,241 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:51:12,241 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:51:12,241 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:51:12,242 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:51:12,242 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:51:12,242 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:51:12,242 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:51:12,243 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:51:12,249 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:51:12,249 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:51:12,250 - INFO:  Definisana klasa A na liniji 11
INFO  10:51:12,250 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:51:12,250 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:51:12,251 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:51:12,251 - INFO:  Pristup simbolu a na liniji 29
INFO  10:51:13,561 - INFO:  Pristup simbolu a na liniji 31
INFO  10:51:14,669 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  10:51:14,671 - INFO:  Pristup simbolu a na liniji 32
INFO  10:51:15,443 - INFO: Pristup strukturi a, polju meth1 na liniji 32
ERROR 10:52:08,174 - ERROR: Nekompatibilnost sa stvarnim parametrima na liniji 32		<--------------- ERROR 
INFO  10:52:09,936 - INFO:  Deklarisan metod main na liniji 27
INFO  10:52:09,938 - ===================================
ERROR 10:52:09,940 - Postoji 1 greska u generisanom kodu!
INFO  10:52:13,488 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:52:13,668 - #2 program
INFO  10:52:13,670 - #45 SemanticTest
INFO  10:52:13,670 - #22 const
INFO  10:52:13,673 - #45 int
INFO  10:52:13,673 - #45 x
INFO  10:52:13,673 - #12 =
INFO  10:52:13,673 - #42 6
INFO  10:52:13,673 - #8 ,
INFO  10:52:13,673 - #45 init
INFO  10:52:13,673 - #12 =
INFO  10:52:13,673 - #42 0
INFO  10:52:13,673 - #5 ;
INFO  10:52:13,673 - #45 int
INFO  10:52:13,678 - #45 x1
INFO  10:52:13,678 - #8 ,
INFO  10:52:13,678 - #45 x3
INFO  10:52:13,683 - #25 [
INFO  10:52:13,683 - #34 ]
INFO  10:52:13,683 - #5 ;
INFO  10:52:13,683 - #45 int
INFO  10:52:13,683 - #45 x2
INFO  10:52:13,683 - #25 [
INFO  10:52:13,683 - #34 ]
INFO  10:52:13,683 - #5 ;
INFO  10:52:13,683 - #29 enum
INFO  10:52:13,683 - #45 nums
INFO  10:52:13,683 - #3 {
INFO  10:52:13,683 - #45 ONE
INFO  10:52:13,683 - #12 =
INFO  10:52:13,683 - #42 1
INFO  10:52:13,683 - #8 ,
INFO  10:52:13,683 - #45 TWO
INFO  10:52:13,683 - #12 =
INFO  10:52:13,683 - #42 5
INFO  10:52:13,683 - #8 ,
INFO  10:52:13,683 - #45 THREE
INFO  10:52:13,683 - #4 }
INFO  10:52:13,688 - #16 class
INFO  10:52:13,688 - #45 A
INFO  10:52:13,688 - #3 {
INFO  10:52:13,688 - #45 int
INFO  10:52:13,693 - #45 fld1
INFO  10:52:13,693 - #5 ;
INFO  10:52:13,693 - #45 char
INFO  10:52:13,693 - #45 fld2
INFO  10:52:13,693 - #5 ;
INFO  10:52:13,693 - #3 {
INFO  10:52:13,693 - #13 void
INFO  10:52:13,693 - #45 meth1
INFO  10:52:13,698 - #6 (
INFO  10:52:13,698 - #7 )
INFO  10:52:13,698 - #3 {
INFO  10:52:13,698 - #4 }
INFO  10:52:13,698 - #4 }
INFO  10:52:13,698 - #4 }
INFO  10:52:13,702 - #3 {
INFO  10:52:13,702 - #45 int
INFO  10:52:13,702 - #45 main
INFO  10:52:13,702 - #6 (
INFO  10:52:13,702 - #7 )
INFO  10:52:13,702 - #45 int
INFO  10:52:13,702 - #45 var
INFO  10:52:13,702 - #5 ;
INFO  10:52:13,702 - #45 A
INFO  10:52:13,702 - #45 a
INFO  10:52:13,702 - #5 ;
INFO  10:52:13,702 - #3 {
INFO  10:52:13,702 - #45 a
INFO  10:52:13,702 - #12 =
INFO  10:52:13,702 - #18 new
INFO  10:52:13,707 - #45 A
INFO  10:52:13,707 - #5 ;
INFO  10:52:13,707 - #45 a
INFO  10:52:13,707 - #15 .
INFO  10:52:13,707 - #45 fld2
INFO  10:52:13,707 - #12 =
INFO  10:52:13,707 - #43 a
INFO  10:52:13,707 - #5 ;
INFO  10:52:13,707 - #45 a
INFO  10:52:13,707 - #15 .
INFO  10:52:13,712 - #45 meth1
INFO  10:52:13,712 - #6 (
INFO  10:52:13,712 - #7 )
INFO  10:52:13,712 - #5 ;
INFO  10:52:13,712 - #10 return
INFO  10:52:13,712 - #42 0
INFO  10:52:13,712 - #5 ;
INFO  10:52:13,712 - #4 }
INFO  10:52:13,712 - #4 }
INFO  10:52:13,772 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth1
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:52:13,772 - ===================================
INFO  10:52:13,772 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:52:13,777 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:52:13,777 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:52:13,777 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:52:13,777 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:52:13,777 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:52:13,777 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:52:13,777 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:52:13,777 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:52:13,787 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:52:13,787 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:52:13,787 - INFO:  Definisana klasa A na liniji 11
INFO  10:52:13,787 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:52:13,787 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:52:13,787 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:52:13,787 - INFO:  Pristup simbolu a na liniji 29
INFO  10:52:16,740 - INFO:  Pristup simbolu a na liniji 31
INFO  10:52:18,732 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  10:52:18,734 - INFO:  Pristup simbolu a na liniji 32
INFO  10:52:19,366 - INFO: Pristup strukturi a, polju meth1 na liniji 32
INFO  10:54:26,689 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  10:54:26,779 - #2 program
INFO  10:54:26,779 - #45 SemanticTest
INFO  10:54:26,779 - #22 const
INFO  10:54:26,779 - #45 int
INFO  10:54:26,779 - #45 x
INFO  10:54:26,779 - #12 =
INFO  10:54:26,784 - #42 6
INFO  10:54:26,784 - #8 ,
INFO  10:54:26,784 - #45 init
INFO  10:54:26,784 - #12 =
INFO  10:54:26,784 - #42 0
INFO  10:54:26,784 - #5 ;
INFO  10:54:26,784 - #45 int
INFO  10:54:26,784 - #45 x1
INFO  10:54:26,784 - #8 ,
INFO  10:54:26,789 - #45 x3
INFO  10:54:26,789 - #25 [
INFO  10:54:26,789 - #34 ]
INFO  10:54:26,789 - #5 ;
INFO  10:54:26,789 - #45 int
INFO  10:54:26,789 - #45 x2
INFO  10:54:26,789 - #25 [
INFO  10:54:26,789 - #34 ]
INFO  10:54:26,789 - #5 ;
INFO  10:54:26,789 - #29 enum
INFO  10:54:26,789 - #45 nums
INFO  10:54:26,789 - #3 {
INFO  10:54:26,789 - #45 ONE
INFO  10:54:26,789 - #12 =
INFO  10:54:26,789 - #42 1
INFO  10:54:26,789 - #8 ,
INFO  10:54:26,789 - #45 TWO
INFO  10:54:26,789 - #12 =
INFO  10:54:26,789 - #42 5
INFO  10:54:26,789 - #8 ,
INFO  10:54:26,789 - #45 THREE
INFO  10:54:26,789 - #4 }
INFO  10:54:26,789 - #16 class
INFO  10:54:26,789 - #45 A
INFO  10:54:26,789 - #3 {
INFO  10:54:26,794 - #45 int
INFO  10:54:26,794 - #45 fld1
INFO  10:54:26,794 - #5 ;
INFO  10:54:26,794 - #45 char
INFO  10:54:26,794 - #45 fld2
INFO  10:54:26,794 - #5 ;
INFO  10:54:26,794 - #3 {
INFO  10:54:26,794 - #13 void
INFO  10:54:26,794 - #45 meth1
INFO  10:54:26,794 - #6 (
INFO  10:54:26,794 - #7 )
INFO  10:54:26,794 - #3 {
INFO  10:54:26,794 - #4 }
INFO  10:54:26,799 - #4 }
INFO  10:54:26,799 - #4 }
INFO  10:54:26,799 - #3 {
INFO  10:54:26,799 - #45 int
INFO  10:54:26,799 - #45 main
INFO  10:54:26,799 - #6 (
INFO  10:54:26,799 - #7 )
INFO  10:54:26,799 - #45 int
INFO  10:54:26,799 - #45 var
INFO  10:54:26,799 - #5 ;
INFO  10:54:26,799 - #45 A
INFO  10:54:26,799 - #45 a
INFO  10:54:26,799 - #5 ;
INFO  10:54:26,799 - #3 {
INFO  10:54:26,799 - #45 a
INFO  10:54:26,799 - #12 =
INFO  10:54:26,799 - #18 new
INFO  10:54:26,799 - #45 A
INFO  10:54:26,799 - #5 ;
INFO  10:54:26,804 - #45 a
INFO  10:54:26,804 - #15 .
INFO  10:54:26,804 - #45 fld2
INFO  10:54:26,804 - #12 =
INFO  10:54:26,804 - #43 a
INFO  10:54:26,804 - #5 ;
INFO  10:54:26,804 - #45 a
INFO  10:54:26,804 - #15 .
INFO  10:54:26,804 - #45 meth1
INFO  10:54:26,804 - #6 (
INFO  10:54:26,804 - #7 )
INFO  10:54:26,804 - #5 ;
INFO  10:54:26,804 - #10 return
INFO  10:54:26,804 - #42 0
INFO  10:54:26,804 - #5 ;
INFO  10:54:26,804 - #4 }
INFO  10:54:26,804 - #4 }
INFO  10:54:26,814 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth1
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  10:54:26,814 - ===================================
INFO  10:54:26,814 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  10:54:26,814 - INFO:  Deklarisana konstanta x na liniji 6
INFO  10:54:26,814 - INFO:  Deklarisana konstanta init na liniji 6
INFO  10:54:26,814 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  10:54:26,814 - INFO:  Deklarisan niz x3 na liniji 7
INFO  10:54:26,814 - INFO:  Deklarisan niz x2 na liniji 8
INFO  10:54:26,819 - INFO:  Definisan enum tip nums na liniji 9
INFO  10:54:26,819 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  10:54:26,819 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  10:54:26,824 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  10:54:26,824 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  10:54:26,824 - INFO:  Definisana klasa A na liniji 11
INFO  10:54:26,824 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  10:54:26,824 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  10:54:26,824 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  10:54:26,824 - INFO:  Pristup simbolu a na liniji 29
INFO  10:54:26,824 - INFO:  Pristup simbolu a na liniji 31
INFO  10:54:26,824 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  10:54:26,824 - INFO:  Pristup simbolu a na liniji 32
INFO  10:54:26,824 - INFO: Pristup strukturi a, polju meth1 na liniji 32
INFO  10:54:26,824 - INFO:  Pozvana metoda meth1 na liniji 32
INFO  10:54:26,824 - INFO:  Deklarisan metod main na liniji 27
INFO  10:54:26,824 - ===================================
INFO  10:54:26,834 - Uspesno parsiranje!
INFO  11:37:18,730 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  11:37:18,804 - #2 program
INFO  11:37:18,804 - #45 SemanticTest
INFO  11:37:18,804 - #22 const
INFO  11:37:18,804 - #45 int
INFO  11:37:18,809 - #45 x
INFO  11:37:18,809 - #12 =
INFO  11:37:18,809 - #42 6
INFO  11:37:18,809 - #8 ,
INFO  11:37:18,809 - #45 init
INFO  11:37:18,809 - #12 =
INFO  11:37:18,809 - #42 0
INFO  11:37:18,809 - #5 ;
INFO  11:37:18,809 - #45 int
INFO  11:37:18,809 - #45 x1
INFO  11:37:18,809 - #8 ,
INFO  11:37:18,814 - #45 x3
INFO  11:37:18,814 - #25 [
INFO  11:37:18,814 - #34 ]
INFO  11:37:18,814 - #5 ;
INFO  11:37:18,814 - #45 int
INFO  11:37:18,814 - #45 x2
INFO  11:37:18,814 - #25 [
INFO  11:37:18,814 - #34 ]
INFO  11:37:18,814 - #5 ;
INFO  11:37:18,814 - #29 enum
INFO  11:37:18,814 - #45 nums
INFO  11:37:18,814 - #3 {
INFO  11:37:18,814 - #45 ONE
INFO  11:37:18,814 - #12 =
INFO  11:37:18,814 - #42 1
INFO  11:37:18,814 - #8 ,
INFO  11:37:18,814 - #45 TWO
INFO  11:37:18,814 - #12 =
INFO  11:37:18,814 - #42 5
INFO  11:37:18,814 - #8 ,
INFO  11:37:18,814 - #45 THREE
INFO  11:37:18,814 - #4 }
INFO  11:37:18,814 - #16 class
INFO  11:37:18,814 - #45 A
INFO  11:37:18,814 - #3 {
INFO  11:37:18,819 - #45 int
INFO  11:37:18,819 - #45 fld1
INFO  11:37:18,819 - #5 ;
INFO  11:37:18,819 - #45 char
INFO  11:37:18,819 - #45 fld2
INFO  11:37:18,819 - #5 ;
INFO  11:37:18,819 - #3 {
INFO  11:37:18,819 - #13 void
INFO  11:37:18,819 - #45 meth1
INFO  11:37:18,819 - #6 (
INFO  11:37:18,819 - #7 )
INFO  11:37:18,824 - #3 {
INFO  11:37:18,824 - #4 }
INFO  11:37:18,824 - #4 }
INFO  11:37:18,824 - #4 }
INFO  11:37:18,824 - #3 {
INFO  11:37:18,824 - #45 int
INFO  11:37:18,824 - #45 main
INFO  11:37:18,824 - #6 (
INFO  11:37:18,824 - #7 )
INFO  11:37:18,824 - #45 int
INFO  11:37:18,824 - #45 var
INFO  11:37:18,824 - #5 ;
INFO  11:37:18,824 - #45 A
INFO  11:37:18,824 - #45 a
INFO  11:37:18,824 - #5 ;
INFO  11:37:18,824 - #3 {
INFO  11:37:18,829 - #45 a
INFO  11:37:18,829 - #12 =
INFO  11:37:18,829 - #18 new
INFO  11:37:18,829 - #45 A
INFO  11:37:18,829 - #5 ;
INFO  11:37:18,829 - #45 a
INFO  11:37:18,834 - #15 .
INFO  11:37:18,834 - #45 fld2
INFO  11:37:18,834 - #12 =
INFO  11:37:18,834 - #43 a
INFO  11:37:18,834 - #5 ;
INFO  11:37:18,834 - #45 a
INFO  11:37:18,834 - #15 .
INFO  11:37:18,834 - #45 meth2
INFO  11:37:18,834 - #6 (
INFO  11:37:18,834 - #7 )
INFO  11:37:18,834 - #5 ;
INFO  11:37:18,834 - #10 return
INFO  11:37:18,834 - #42 0
INFO  11:37:18,834 - #5 ;
INFO  11:37:18,834 - #4 }
INFO  11:37:18,834 - #4 }
INFO  11:37:18,849 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth2
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  11:37:18,849 - ===================================
INFO  11:37:18,849 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  11:37:18,849 - INFO:  Deklarisana konstanta x na liniji 6
INFO  11:37:18,849 - INFO:  Deklarisana konstanta init na liniji 6
INFO  11:37:18,849 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  11:37:18,849 - INFO:  Deklarisan niz x3 na liniji 7
INFO  11:37:18,849 - INFO:  Deklarisan niz x2 na liniji 8
INFO  11:37:18,854 - INFO:  Definisan enum tip nums na liniji 9
INFO  11:37:18,854 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  11:37:18,854 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  11:37:18,859 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  11:37:18,859 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  11:37:18,859 - INFO:  Definisana klasa A na liniji 11
INFO  11:37:18,859 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  11:37:18,859 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  11:37:18,859 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  11:37:18,859 - INFO:  Pristup simbolu a na liniji 29
INFO  11:37:18,859 - INFO:  Pristup simbolu a na liniji 31
INFO  11:37:18,859 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  11:37:18,859 - INFO:  Pristup simbolu a na liniji 32
ERROR 11:37:18,859 - ERROR: Struktura a ne sadrzi polje meth2 na liniji 32		<--------------- ERROR 
ERROR 11:37:18,859 - ERROR: Objekat noObj nije metoda  na liniji 32		<--------------- ERROR 
INFO  11:37:18,859 - INFO:  Deklarisan metod main na liniji 27
INFO  11:37:18,859 - ===================================
ERROR 11:37:18,864 - Postoje 2 greske u generisanom kodu!
INFO  11:39:01,974 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  11:39:02,054 - #2 program
INFO  11:39:02,054 - #45 SemanticTest
INFO  11:39:02,054 - #22 const
INFO  11:39:02,054 - #45 int
INFO  11:39:02,054 - #45 x
INFO  11:39:02,059 - #12 =
INFO  11:39:02,059 - #42 6
INFO  11:39:02,059 - #8 ,
INFO  11:39:02,059 - #45 init
INFO  11:39:02,059 - #12 =
INFO  11:39:02,059 - #42 0
INFO  11:39:02,059 - #5 ;
INFO  11:39:02,059 - #45 int
INFO  11:39:02,059 - #45 x1
INFO  11:39:02,059 - #8 ,
INFO  11:39:02,064 - #45 x3
INFO  11:39:02,064 - #25 [
INFO  11:39:02,064 - #34 ]
INFO  11:39:02,064 - #5 ;
INFO  11:39:02,064 - #45 int
INFO  11:39:02,064 - #45 x2
INFO  11:39:02,064 - #25 [
INFO  11:39:02,064 - #34 ]
INFO  11:39:02,064 - #5 ;
INFO  11:39:02,064 - #29 enum
INFO  11:39:02,064 - #45 nums
INFO  11:39:02,064 - #3 {
INFO  11:39:02,064 - #45 ONE
INFO  11:39:02,064 - #12 =
INFO  11:39:02,064 - #42 1
INFO  11:39:02,064 - #8 ,
INFO  11:39:02,064 - #45 TWO
INFO  11:39:02,064 - #12 =
INFO  11:39:02,064 - #42 5
INFO  11:39:02,064 - #8 ,
INFO  11:39:02,064 - #45 THREE
INFO  11:39:02,064 - #4 }
INFO  11:39:02,064 - #16 class
INFO  11:39:02,064 - #45 A
INFO  11:39:02,064 - #3 {
INFO  11:39:02,069 - #45 int
INFO  11:39:02,069 - #45 fld1
INFO  11:39:02,069 - #5 ;
INFO  11:39:02,069 - #45 char
INFO  11:39:02,069 - #45 fld2
INFO  11:39:02,069 - #5 ;
INFO  11:39:02,069 - #3 {
INFO  11:39:02,069 - #13 void
INFO  11:39:02,069 - #45 meth1
INFO  11:39:02,069 - #6 (
INFO  11:39:02,069 - #7 )
INFO  11:39:02,074 - #3 {
INFO  11:39:02,074 - #4 }
INFO  11:39:02,074 - #4 }
INFO  11:39:02,074 - #4 }
INFO  11:39:02,074 - #3 {
INFO  11:39:02,074 - #45 int
INFO  11:39:02,074 - #45 main
INFO  11:39:02,074 - #6 (
INFO  11:39:02,074 - #7 )
INFO  11:39:02,074 - #45 int
INFO  11:39:02,074 - #45 var
INFO  11:39:02,074 - #5 ;
INFO  11:39:02,074 - #45 A
INFO  11:39:02,074 - #45 a
INFO  11:39:02,074 - #5 ;
INFO  11:39:02,074 - #3 {
INFO  11:39:02,074 - #45 a
INFO  11:39:02,074 - #12 =
INFO  11:39:02,074 - #18 new
INFO  11:39:02,079 - #45 A
INFO  11:39:02,079 - #5 ;
INFO  11:39:02,079 - #45 a
INFO  11:39:02,079 - #15 .
INFO  11:39:02,079 - #45 fld2
INFO  11:39:02,079 - #12 =
INFO  11:39:02,079 - #43 a
INFO  11:39:02,079 - #5 ;
INFO  11:39:02,079 - #45 a
INFO  11:39:02,079 - #15 .
INFO  11:39:02,079 - #45 meth2
INFO  11:39:02,079 - #6 (
INFO  11:39:02,079 - #7 )
INFO  11:39:02,079 - #5 ;
INFO  11:39:02,079 - #10 return
INFO  11:39:02,079 - #42 0
INFO  11:39:02,079 - #5 ;
INFO  11:39:02,079 - #4 }
INFO  11:39:02,079 - #4 }
INFO  11:39:02,094 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth2
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  11:39:02,094 - ===================================
INFO  11:39:02,094 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  11:39:02,094 - INFO:  Deklarisana konstanta x na liniji 6
INFO  11:39:02,094 - INFO:  Deklarisana konstanta init na liniji 6
INFO  11:39:02,094 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  11:39:02,094 - INFO:  Deklarisan niz x3 na liniji 7
INFO  11:39:02,094 - INFO:  Deklarisan niz x2 na liniji 8
INFO  11:39:02,094 - INFO:  Definisan enum tip nums na liniji 9
INFO  11:39:02,094 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  11:39:02,094 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  11:39:02,099 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  11:39:02,099 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  11:39:02,099 - INFO:  Definisana klasa A na liniji 11
INFO  11:39:02,099 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  11:39:02,099 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  11:39:02,099 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  11:39:02,099 - INFO:  Pristup simbolu a na liniji 29
INFO  11:39:02,099 - INFO:  Pristup simbolu a na liniji 31
INFO  11:39:02,099 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  11:39:02,099 - INFO:  Pristup simbolu a na liniji 32
ERROR 11:39:02,099 - ERROR: Struktura a ne sadrzi polje meth2 na liniji 32		<--------------- ERROR 
ERROR 11:39:02,099 - ERROR: Objekat noObj nije metoda na liniji 32		<--------------- ERROR 
INFO  11:39:02,099 - INFO:  Deklarisan metod main na liniji 27
INFO  11:39:02,099 - ===================================
ERROR 11:39:02,099 - Postoje 2 greske u generisanom kodu!
INFO  11:40:47,749 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  11:40:48,059 - #2 program
INFO  11:40:48,063 - #45 SemanticTest
INFO  11:40:48,063 - #22 const
INFO  11:40:48,065 - #45 int
INFO  11:40:48,065 - #45 x
INFO  11:40:48,065 - #12 =
INFO  11:40:48,074 - #42 6
INFO  11:40:48,074 - #8 ,
INFO  11:40:48,079 - #45 init
INFO  11:40:48,079 - #12 =
INFO  11:40:48,079 - #42 0
INFO  11:40:48,079 - #5 ;
INFO  11:40:48,079 - #45 int
INFO  11:40:48,079 - #45 x1
INFO  11:40:48,079 - #8 ,
INFO  11:40:48,089 - #45 x3
INFO  11:40:48,089 - #25 [
INFO  11:40:48,089 - #34 ]
INFO  11:40:48,089 - #5 ;
INFO  11:40:48,092 - #45 int
INFO  11:40:48,094 - #45 x2
INFO  11:40:48,094 - #25 [
INFO  11:40:48,094 - #34 ]
INFO  11:40:48,094 - #5 ;
INFO  11:40:48,094 - #29 enum
INFO  11:40:48,094 - #45 nums
INFO  11:40:48,094 - #3 {
INFO  11:40:48,094 - #45 ONE
INFO  11:40:48,094 - #12 =
INFO  11:40:48,099 - #42 1
INFO  11:40:48,099 - #8 ,
INFO  11:40:48,099 - #45 TWO
INFO  11:40:48,099 - #12 =
INFO  11:40:48,099 - #42 5
INFO  11:40:48,099 - #8 ,
INFO  11:40:48,099 - #45 THREE
INFO  11:40:48,099 - #4 }
INFO  11:40:48,099 - #16 class
INFO  11:40:48,099 - #45 A
INFO  11:40:48,099 - #3 {
INFO  11:40:48,109 - #45 int
INFO  11:40:48,109 - #45 fld1
INFO  11:40:48,114 - #5 ;
INFO  11:40:48,114 - #45 char
INFO  11:40:48,114 - #45 fld2
INFO  11:40:48,114 - #5 ;
INFO  11:40:48,114 - #3 {
INFO  11:40:48,117 - #13 void
INFO  11:40:48,119 - #45 meth1
INFO  11:40:48,119 - #6 (
INFO  11:40:48,124 - #7 )
INFO  11:40:48,124 - #3 {
INFO  11:40:48,124 - #4 }
INFO  11:40:48,129 - #4 }
INFO  11:40:48,129 - #4 }
INFO  11:40:48,129 - #3 {
INFO  11:40:48,129 - #45 int
INFO  11:40:48,129 - #45 main
INFO  11:40:48,134 - #6 (
INFO  11:40:48,134 - #7 )
INFO  11:40:48,134 - #45 int
INFO  11:40:48,134 - #45 var
INFO  11:40:48,134 - #5 ;
INFO  11:40:48,134 - #45 A
INFO  11:40:48,134 - #45 a
INFO  11:40:48,134 - #5 ;
INFO  11:40:48,139 - #3 {
INFO  11:40:48,139 - #45 a
INFO  11:40:48,139 - #12 =
INFO  11:40:48,139 - #18 new
INFO  11:40:48,144 - #45 A
INFO  11:40:48,144 - #5 ;
INFO  11:40:48,144 - #45 a
INFO  11:40:48,144 - #15 .
INFO  11:40:48,149 - #45 fld2
INFO  11:40:48,149 - #12 =
INFO  11:40:48,149 - #43 a
INFO  11:40:48,149 - #5 ;
INFO  11:40:48,149 - #45 a
INFO  11:40:48,149 - #15 .
INFO  11:40:48,149 - #45 meth2
INFO  11:40:48,149 - #6 (
INFO  11:40:48,149 - #7 )
INFO  11:40:48,154 - #5 ;
INFO  11:40:48,154 - #10 return
INFO  11:40:48,154 - #42 0
INFO  11:40:48,154 - #5 ;
INFO  11:40:48,154 - #4 }
INFO  11:40:48,154 - #4 }
INFO  11:40:48,224 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth2
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  11:40:48,229 - ===================================
INFO  11:40:48,229 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  11:40:48,229 - INFO:  Deklarisana konstanta x na liniji 6
INFO  11:40:48,229 - INFO:  Deklarisana konstanta init na liniji 6
INFO  11:40:48,229 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  11:40:48,229 - INFO:  Deklarisan niz x3 na liniji 7
INFO  11:40:48,229 - INFO:  Deklarisan niz x2 na liniji 8
INFO  11:40:48,239 - INFO:  Definisan enum tip nums na liniji 9
INFO  11:40:48,239 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  11:40:48,239 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  11:40:48,249 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  11:40:48,249 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  11:40:48,254 - INFO:  Definisana klasa A na liniji 11
INFO  11:40:48,254 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  11:40:48,254 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  11:40:48,254 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  11:40:48,254 - INFO:  Pristup simbolu a na liniji 29
INFO  11:40:51,305 - INFO:  Pristup simbolu a na liniji 31
INFO  11:40:52,931 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  11:40:52,933 - INFO:  Pristup simbolu a na liniji 32
ERROR 11:40:53,685 - ERROR: Struktura a ne sadrzi polje meth2 na liniji 32		<--------------- ERROR 
ERROR 11:40:53,685 - ERROR: Objekat noObj nije metoda na liniji 32		<--------------- ERROR 
INFO  11:40:53,685 - INFO:  Deklarisan metod main na liniji 27
INFO  11:40:53,685 - ===================================
ERROR 11:40:53,690 - Postoje 2 greske u generisanom kodu!
INFO  11:41:04,225 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  11:41:04,320 - #2 program
INFO  11:41:04,320 - #45 SemanticTest
INFO  11:41:04,320 - #22 const
INFO  11:41:04,325 - #45 int
INFO  11:41:04,325 - #45 x
INFO  11:41:04,325 - #12 =
INFO  11:41:04,325 - #42 6
INFO  11:41:04,325 - #8 ,
INFO  11:41:04,325 - #45 init
INFO  11:41:04,325 - #12 =
INFO  11:41:04,325 - #42 0
INFO  11:41:04,325 - #5 ;
INFO  11:41:04,325 - #45 int
INFO  11:41:04,330 - #45 x1
INFO  11:41:04,330 - #8 ,
INFO  11:41:04,330 - #45 x3
INFO  11:41:04,330 - #25 [
INFO  11:41:04,330 - #34 ]
INFO  11:41:04,330 - #5 ;
INFO  11:41:04,330 - #45 int
INFO  11:41:04,330 - #45 x2
INFO  11:41:04,330 - #25 [
INFO  11:41:04,330 - #34 ]
INFO  11:41:04,330 - #5 ;
INFO  11:41:04,330 - #29 enum
INFO  11:41:04,330 - #45 nums
INFO  11:41:04,330 - #3 {
INFO  11:41:04,330 - #45 ONE
INFO  11:41:04,330 - #12 =
INFO  11:41:04,330 - #42 1
INFO  11:41:04,330 - #8 ,
INFO  11:41:04,335 - #45 TWO
INFO  11:41:04,335 - #12 =
INFO  11:41:04,335 - #42 5
INFO  11:41:04,335 - #8 ,
INFO  11:41:04,335 - #45 THREE
INFO  11:41:04,335 - #4 }
INFO  11:41:04,335 - #16 class
INFO  11:41:04,335 - #45 A
INFO  11:41:04,335 - #3 {
INFO  11:41:04,340 - #45 int
INFO  11:41:04,340 - #45 fld1
INFO  11:41:04,340 - #5 ;
INFO  11:41:04,340 - #45 char
INFO  11:41:04,340 - #45 fld2
INFO  11:41:04,340 - #5 ;
INFO  11:41:04,340 - #3 {
INFO  11:41:04,340 - #13 void
INFO  11:41:04,340 - #45 meth1
INFO  11:41:04,340 - #6 (
INFO  11:41:04,345 - #7 )
INFO  11:41:04,345 - #3 {
INFO  11:41:04,345 - #4 }
INFO  11:41:04,345 - #4 }
INFO  11:41:04,345 - #4 }
INFO  11:41:04,345 - #3 {
INFO  11:41:04,345 - #45 int
INFO  11:41:04,345 - #45 main
INFO  11:41:04,345 - #6 (
INFO  11:41:04,345 - #7 )
INFO  11:41:04,350 - #45 int
INFO  11:41:04,350 - #45 var
INFO  11:41:04,350 - #5 ;
INFO  11:41:04,350 - #45 A
INFO  11:41:04,350 - #45 a
INFO  11:41:04,350 - #5 ;
INFO  11:41:04,350 - #3 {
INFO  11:41:04,350 - #45 a
INFO  11:41:04,350 - #12 =
INFO  11:41:04,350 - #18 new
INFO  11:41:04,350 - #45 A
INFO  11:41:04,350 - #5 ;
INFO  11:41:04,355 - #45 a
INFO  11:41:04,355 - #15 .
INFO  11:41:04,355 - #45 fld2
INFO  11:41:04,355 - #12 =
INFO  11:41:04,355 - #43 a
INFO  11:41:04,355 - #5 ;
INFO  11:41:04,355 - #45 a
INFO  11:41:04,355 - #15 .
INFO  11:41:04,355 - #45 meth1
INFO  11:41:04,355 - #6 (
INFO  11:41:04,355 - #7 )
INFO  11:41:04,355 - #5 ;
INFO  11:41:04,355 - #10 return
INFO  11:41:04,355 - #42 0
INFO  11:41:04,355 - #5 ;
INFO  11:41:04,355 - #4 }
INFO  11:41:04,355 - #4 }
INFO  11:41:04,370 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth1
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  11:41:04,370 - ===================================
INFO  11:41:04,375 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  11:41:04,375 - INFO:  Deklarisana konstanta x na liniji 6
INFO  11:41:04,375 - INFO:  Deklarisana konstanta init na liniji 6
INFO  11:41:04,375 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  11:41:04,375 - INFO:  Deklarisan niz x3 na liniji 7
INFO  11:41:04,375 - INFO:  Deklarisan niz x2 na liniji 8
INFO  11:41:04,375 - INFO:  Definisan enum tip nums na liniji 9
INFO  11:41:04,375 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  11:41:04,375 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  11:41:04,385 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  11:41:04,385 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  11:41:04,385 - INFO:  Definisana klasa A na liniji 11
INFO  11:41:04,385 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  11:41:04,385 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  11:41:04,385 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  11:41:04,385 - INFO:  Pristup simbolu a na liniji 29
INFO  11:41:04,385 - INFO:  Pristup simbolu a na liniji 31
INFO  11:41:04,385 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  11:41:04,385 - INFO:  Pristup simbolu a na liniji 32
INFO  11:41:04,385 - INFO: Pristup strukturi a, polju meth1 na liniji 32
INFO  11:41:04,385 - INFO:  Pozvana metoda meth1 na liniji 32
INFO  11:41:04,385 - INFO:  Deklarisan metod main na liniji 27
INFO  11:41:04,385 - ===================================
INFO  11:41:04,395 - Uspesno parsiranje!
INFO  11:41:07,801 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  11:41:07,986 - #2 program
INFO  11:41:07,991 - #45 SemanticTest
INFO  11:41:07,991 - #22 const
INFO  11:41:07,991 - #45 int
INFO  11:41:07,991 - #45 x
INFO  11:41:07,991 - #12 =
INFO  11:41:07,991 - #42 6
INFO  11:41:07,991 - #8 ,
INFO  11:41:07,996 - #45 init
INFO  11:41:07,996 - #12 =
INFO  11:41:07,996 - #42 0
INFO  11:41:07,996 - #5 ;
INFO  11:41:07,996 - #45 int
INFO  11:41:07,996 - #45 x1
INFO  11:41:07,996 - #8 ,
INFO  11:41:08,006 - #45 x3
INFO  11:41:08,006 - #25 [
INFO  11:41:08,006 - #34 ]
INFO  11:41:08,006 - #5 ;
INFO  11:41:08,006 - #45 int
INFO  11:41:08,006 - #45 x2
INFO  11:41:08,006 - #25 [
INFO  11:41:08,006 - #34 ]
INFO  11:41:08,011 - #5 ;
INFO  11:41:08,011 - #29 enum
INFO  11:41:08,011 - #45 nums
INFO  11:41:08,011 - #3 {
INFO  11:41:08,011 - #45 ONE
INFO  11:41:08,011 - #12 =
INFO  11:41:08,011 - #42 1
INFO  11:41:08,011 - #8 ,
INFO  11:41:08,011 - #45 TWO
INFO  11:41:08,011 - #12 =
INFO  11:41:08,011 - #42 5
INFO  11:41:08,011 - #8 ,
INFO  11:41:08,011 - #45 THREE
INFO  11:41:08,011 - #4 }
INFO  11:41:08,011 - #16 class
INFO  11:41:08,011 - #45 A
INFO  11:41:08,011 - #3 {
INFO  11:41:08,021 - #45 int
INFO  11:41:08,021 - #45 fld1
INFO  11:41:08,021 - #5 ;
INFO  11:41:08,021 - #45 char
INFO  11:41:08,021 - #45 fld2
INFO  11:41:08,021 - #5 ;
INFO  11:41:08,021 - #3 {
INFO  11:41:08,021 - #13 void
INFO  11:41:08,021 - #45 meth1
INFO  11:41:08,026 - #6 (
INFO  11:41:08,026 - #7 )
INFO  11:41:08,026 - #3 {
INFO  11:41:08,026 - #4 }
INFO  11:41:08,026 - #4 }
INFO  11:41:08,026 - #4 }
INFO  11:41:08,031 - #3 {
INFO  11:41:08,031 - #45 int
INFO  11:41:08,031 - #45 main
INFO  11:41:08,031 - #6 (
INFO  11:41:08,031 - #7 )
INFO  11:41:08,031 - #45 int
INFO  11:41:08,031 - #45 var
INFO  11:41:08,031 - #5 ;
INFO  11:41:08,031 - #45 A
INFO  11:41:08,031 - #45 a
INFO  11:41:08,031 - #5 ;
INFO  11:41:08,031 - #3 {
INFO  11:41:08,031 - #45 a
INFO  11:41:08,031 - #12 =
INFO  11:41:08,031 - #18 new
INFO  11:41:08,036 - #45 A
INFO  11:41:08,036 - #5 ;
INFO  11:41:08,036 - #45 a
INFO  11:41:08,036 - #15 .
INFO  11:41:08,036 - #45 fld2
INFO  11:41:08,036 - #12 =
INFO  11:41:08,036 - #43 a
INFO  11:41:08,041 - #5 ;
INFO  11:41:08,041 - #45 a
INFO  11:41:08,041 - #15 .
INFO  11:41:08,041 - #45 meth1
INFO  11:41:08,041 - #6 (
INFO  11:41:08,041 - #7 )
INFO  11:41:08,041 - #5 ;
INFO  11:41:08,041 - #10 return
INFO  11:41:08,041 - #42 0
INFO  11:41:08,041 - #5 ;
INFO  11:41:08,046 - #4 }
INFO  11:41:08,046 - #4 }
INFO  11:41:08,131 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth1
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  11:41:08,132 - ===================================
INFO  11:41:08,132 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  11:41:08,133 - INFO:  Deklarisana konstanta x na liniji 6
INFO  11:41:08,133 - INFO:  Deklarisana konstanta init na liniji 6
INFO  11:41:08,133 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  11:41:08,134 - INFO:  Deklarisan niz x3 na liniji 7
INFO  11:41:08,134 - INFO:  Deklarisan niz x2 na liniji 8
INFO  11:41:08,134 - INFO:  Definisan enum tip nums na liniji 9
INFO  11:41:08,134 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  11:41:08,134 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  11:41:08,144 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  11:41:08,144 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  11:41:08,144 - INFO:  Definisana klasa A na liniji 11
INFO  11:41:08,144 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  11:41:08,144 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  11:41:08,144 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  11:41:08,144 - INFO:  Pristup simbolu a na liniji 29
INFO  11:41:12,590 - INFO:  Pristup simbolu a na liniji 31
INFO  11:41:15,866 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  11:41:15,868 - INFO:  Pristup simbolu a na liniji 32
INFO  11:41:16,885 - INFO: Pristup strukturi a, polju meth1 na liniji 32
INFO  11:41:18,866 - INFO:  Pozvana metoda meth1 na liniji 32
INFO  11:41:18,868 - INFO:  Deklarisan metod main na liniji 27
INFO  11:41:18,868 - ===================================
INFO  11:45:25,063 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\mytest.mj
INFO  11:45:25,304 - #2 program
INFO  11:45:25,304 - #45 SemanticTest
INFO  11:45:25,304 - #22 const
INFO  11:45:25,307 - #45 int
INFO  11:45:25,307 - #45 x
INFO  11:45:25,309 - #12 =
INFO  11:45:25,310 - #42 6
INFO  11:45:25,310 - #8 ,
INFO  11:45:25,312 - #45 init
INFO  11:45:25,312 - #12 =
INFO  11:45:25,312 - #42 0
INFO  11:45:25,313 - #5 ;
INFO  11:45:25,313 - #45 int
INFO  11:45:25,314 - #45 x1
INFO  11:45:25,314 - #8 ,
INFO  11:45:25,314 - #45 x3
INFO  11:45:25,314 - #25 [
INFO  11:45:25,314 - #34 ]
INFO  11:45:25,314 - #5 ;
INFO  11:45:25,314 - #45 int
INFO  11:45:25,319 - #45 x2
INFO  11:45:25,319 - #25 [
INFO  11:45:25,319 - #34 ]
INFO  11:45:25,319 - #5 ;
INFO  11:45:25,319 - #29 enum
INFO  11:45:25,319 - #45 nums
INFO  11:45:25,319 - #3 {
INFO  11:45:25,319 - #45 ONE
INFO  11:45:25,319 - #12 =
INFO  11:45:25,319 - #42 1
INFO  11:45:25,319 - #8 ,
INFO  11:45:25,319 - #45 TWO
INFO  11:45:25,319 - #12 =
INFO  11:45:25,319 - #42 5
INFO  11:45:25,319 - #8 ,
INFO  11:45:25,319 - #45 THREE
INFO  11:45:25,319 - #4 }
INFO  11:45:25,319 - #16 class
INFO  11:45:25,319 - #45 A
INFO  11:45:25,324 - #3 {
INFO  11:45:25,324 - #45 int
INFO  11:45:25,324 - #45 fld1
INFO  11:45:25,324 - #5 ;
INFO  11:45:25,324 - #45 char
INFO  11:45:25,329 - #45 fld2
INFO  11:45:25,329 - #5 ;
INFO  11:45:25,329 - #3 {
INFO  11:45:25,329 - #13 void
INFO  11:45:25,329 - #45 meth1
INFO  11:45:25,329 - #6 (
INFO  11:45:25,329 - #7 )
INFO  11:45:25,329 - #3 {
INFO  11:45:25,334 - #4 }
INFO  11:45:25,334 - #4 }
INFO  11:45:25,334 - #4 }
INFO  11:45:25,334 - #3 {
INFO  11:45:25,334 - #45 int
INFO  11:45:25,334 - #45 main
INFO  11:45:25,334 - #6 (
INFO  11:45:25,334 - #7 )
INFO  11:45:25,334 - #45 int
INFO  11:45:25,334 - #45 var
INFO  11:45:25,334 - #5 ;
INFO  11:45:25,334 - #45 A
INFO  11:45:25,334 - #45 a
INFO  11:45:25,334 - #5 ;
INFO  11:45:25,334 - #3 {
INFO  11:45:25,334 - #45 a
INFO  11:45:25,334 - #12 =
INFO  11:45:25,334 - #18 new
INFO  11:45:25,339 - #45 A
INFO  11:45:25,339 - #5 ;
INFO  11:45:25,344 - #45 a
INFO  11:45:25,344 - #15 .
INFO  11:45:25,344 - #45 fld2
INFO  11:45:25,344 - #12 =
INFO  11:45:25,344 - #43 a
INFO  11:45:25,344 - #5 ;
INFO  11:45:25,344 - #45 a
INFO  11:45:25,344 - #15 .
INFO  11:45:25,344 - #45 meth1
INFO  11:45:25,344 - #6 (
INFO  11:45:25,344 - #7 )
INFO  11:45:25,344 - #5 ;
INFO  11:45:25,344 - #10 return
INFO  11:45:25,344 - #42 0
INFO  11:45:25,349 - #5 ;
INFO  11:45:25,349 - #4 }
INFO  11:45:25,349 - #4 }
INFO  11:45:25,474 - Program(
  ProgName(
   SemanticTest
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            ConstDeclaration(
              ConstDeclarations(
                Type(
                 int
                ) [Type]
                MultipleConsts(
                  SingleConst(
                    ConstItem(
                     x
                      InitializerNum(
                       6
                      ) [InitializerNum]
                    ) [ConstItem]
                  ) [SingleConst]
                  ConstItem(
                   init
                    InitializerNum(
                     0
                    ) [InitializerNum]
                  ) [ConstItem]
                ) [MultipleConsts]
              ) [ConstDeclarations]
            ) [ConstDeclaration]
          ) [VarDeclLists]
          VarDeclaration(
            VarDeclarations(
              Type(
               int
              ) [Type]
              MultipleVars(
                SingleVar(
                  Var(
                   x1
                    NoArrayVar(
                    ) [NoArrayVar]
                  ) [Var]
                ) [SingleVar]
                Var(
                 x3
                  ArrayVar(
                  ) [ArrayVar]
                ) [Var]
              ) [MultipleVars]
            ) [VarDeclarations]
          ) [VarDeclaration]
        ) [VarDeclLists]
        VarDeclaration(
          VarDeclarations(
            Type(
             int
            ) [Type]
            SingleVar(
              Var(
               x2
                ArrayVar(
                ) [ArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [VarDeclaration]
      ) [VarDeclLists]
      EnumDeclaration(
        EnumDeclarations(
          EnumNamed(
           nums
          ) [EnumNamed]
          MultipleEnums(
            MultipleEnums(
              SingleEnum(
                InitEnum(
                 ONE
                 1
                ) [InitEnum]
              ) [SingleEnum]
              InitEnum(
               TWO
               5
              ) [InitEnum]
            ) [MultipleEnums]
            NoInitEnum(
             THREE
            ) [NoInitEnum]
          ) [MultipleEnums]
        ) [EnumDeclarations]
      ) [EnumDeclaration]
    ) [VarDeclLists]
    ClasstDeclaration(
      ClassDeclaration(
        ClassName(
         A
        ) [ClassName]
        NoSuperClass(
        ) [NoSuperClass]
        NoImplInteraces(
        ) [NoImplInteraces]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 fld1
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             char
            ) [Type]
            SingleVar(
              Var(
               fld2
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        ClassMethodDecl(
          OptMethods(
            NoOptMethods(
            ) [NoOptMethods]
            MethodDeclarations(
              MethodDeclTypeName(
                VoidIdentificator(
                ) [VoidIdentificator]
               meth1
              ) [MethodDeclTypeName]
              NoOptionalFormPars(
              ) [NoOptionalFormPars]
              NoOptVars(
              ) [NoOptVars]
              NoOptionalStmt(
              ) [NoOptionalStmt]
            ) [MethodDeclarations]
          ) [OptMethods]
        ) [ClassMethodDecl]
      ) [ClassDeclaration]
    ) [ClasstDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      NoOptMethods(
      ) [NoOptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          TypeIdentificator(
            Type(
             int
            ) [Type]
          ) [TypeIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 var
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             A
            ) [Type]
            SingleVar(
              Var(
               a
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [SingleVar]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                NoOptionalStmt(
                ) [NoOptionalStmt]
                DesignatorStmt(
                  AssignOper(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                    AssignOperation(
                    ) [AssignOperation]
                    Expression(
                      Positive(
                      ) [Positive]
                      Terms(
                        NewFactor(
                          Type(
                           A
                          ) [Type]
                        ) [NewFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                      NoAddTerms(
                      ) [NoAddTerms]
                    ) [Expression]
                  ) [AssignOper]
                ) [DesignatorStmt]
              ) [OptionalStmt]
              DesignatorStmt(
                AssignOper(
                  DesignFld(
                    DesignVar(
                      DesignatorName(
                       a
                      ) [DesignatorName]
                    ) [DesignVar]
                   fld2
                  ) [DesignFld]
                  AssignOperation(
                  ) [AssignOperation]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      CharFactor(
                       a
                      ) [CharFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [AssignOper]
              ) [DesignatorStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              ProcCall(
                DesignFld(
                  DesignVar(
                    DesignatorName(
                     a
                    ) [DesignatorName]
                  ) [DesignVar]
                 meth1
                ) [DesignFld]
                NoActPars(
                ) [NoActPars]
              ) [ProcCall]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          ReturnStmt(
            RetExpr(
              Expression(
                Positive(
                ) [Positive]
                Terms(
                  NumFactor(
                   0
                  ) [NumFactor]
                  NoMulFacts(
                  ) [NoMulFacts]
                ) [Terms]
                NoAddTerms(
                ) [NoAddTerms]
              ) [Expression]
            ) [RetExpr]
          ) [ReturnStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  11:45:25,474 - ===================================
INFO  11:45:25,474 - INFO:  Pocetak programa SemanticTest na liniji 4
INFO  11:45:25,474 - INFO:  Deklarisana konstanta x na liniji 6
INFO  11:45:25,474 - INFO:  Deklarisana konstanta init na liniji 6
INFO  11:45:25,474 - INFO:  Deklarisana globalna promenljiva x1 na liniji 7
INFO  11:45:25,474 - INFO:  Deklarisan niz x3 na liniji 7
INFO  11:45:25,479 - INFO:  Deklarisan niz x2 na liniji 8
INFO  11:45:25,479 - INFO:  Definisan enum tip nums na liniji 9
INFO  11:45:25,479 - INFO:  Deklarisana promenljiva fld1 na liniji 12
INFO  11:45:25,479 - INFO:  Deklarisana promenljiva fld2 na liniji 13
INFO  11:45:25,489 - INFO:  Obradjuje se funkcija meth1 na liniji 15
INFO  11:45:25,489 - INFO:  Deklarisan metod meth1 na liniji 15
INFO  11:45:25,489 - INFO:  Definisana klasa A na liniji 11
INFO  11:45:25,489 - INFO:  Obradjuje se funkcija main na liniji 27
INFO  11:45:25,489 - INFO:  Deklarisana promenljiva var na liniji 27
INFO  11:45:25,489 - INFO:  Deklarisana promenljiva a na liniji 27
INFO  11:45:25,489 - INFO:  Pristup simbolu a na liniji 29
INFO  11:45:38,539 - INFO:  Pristup simbolu a na liniji 31
INFO  11:45:46,276 - INFO: Pristup strukturi a, polju fld2 na liniji 31
INFO  11:46:35,120 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\test301.mj
INFO  11:46:35,301 - #2 program
INFO  11:46:35,302 - #45 test301
INFO  11:46:35,302 - #29 enum
INFO  11:46:35,304 - #45 Broj
INFO  11:46:35,304 - #3 {
INFO  11:46:35,304 - #45 NULA
INFO  11:46:35,304 - #8 ,
INFO  11:46:35,305 - #45 JEDAN
INFO  11:46:35,305 - #8 ,
INFO  11:46:35,305 - #45 PET
INFO  11:46:35,305 - #12 =
INFO  11:46:35,306 - #42 5
INFO  11:46:35,306 - #8 ,
INFO  11:46:35,306 - #45 DESET
INFO  11:46:35,306 - #12 =
INFO  11:46:35,306 - #42 10
INFO  11:46:35,306 - #4 }
INFO  11:46:35,307 - #22 const
INFO  11:46:35,307 - #45 int
INFO  11:46:35,308 - #45 jedan
INFO  11:46:35,308 - #12 =
INFO  11:46:35,309 - #42 1
INFO  11:46:35,309 - #5 ;
INFO  11:46:35,310 - #22 const
INFO  11:46:35,310 - #45 int
INFO  11:46:35,310 - #45 pet
INFO  11:46:35,310 - #12 =
INFO  11:46:35,310 - #42 5
INFO  11:46:35,310 - #5 ;
INFO  11:46:35,310 - #45 int
INFO  11:46:35,310 - #45 niz
INFO  11:46:35,310 - #25 [
INFO  11:46:35,310 - #34 ]
INFO  11:46:35,310 - #5 ;
INFO  11:46:35,315 - #45 char
INFO  11:46:35,315 - #45 nizch
INFO  11:46:35,315 - #25 [
INFO  11:46:35,315 - #34 ]
INFO  11:46:35,315 - #5 ;
INFO  11:46:35,315 - #3 {
INFO  11:46:35,315 - #45 int
INFO  11:46:35,315 - #45 inc
INFO  11:46:35,315 - #6 (
INFO  11:46:35,315 - #45 int
INFO  11:46:35,315 - #45 broj
INFO  11:46:35,315 - #7 )
INFO  11:46:35,315 - #3 {
INFO  11:46:35,320 - #10 return
INFO  11:46:35,320 - #45 broj
INFO  11:46:35,320 - #11 +
INFO  11:46:35,325 - #45 Broj
INFO  11:46:35,325 - #15 .
INFO  11:46:35,325 - #45 JEDAN
INFO  11:46:35,325 - #5 ;
INFO  11:46:35,325 - #4 }
INFO  11:46:35,325 - #13 void
INFO  11:46:35,325 - #45 mul
INFO  11:46:35,325 - #6 (
INFO  11:46:35,325 - #45 int
INFO  11:46:35,330 - #45 arr
INFO  11:46:35,330 - #25 [
INFO  11:46:35,330 - #34 ]
INFO  11:46:35,330 - #8 ,
INFO  11:46:35,330 - #45 int
INFO  11:46:35,330 - #45 index
INFO  11:46:35,330 - #8 ,
INFO  11:46:35,330 - #45 int
INFO  11:46:35,330 - #45 b
INFO  11:46:35,330 - #7 )
INFO  11:46:35,330 - #3 {
INFO  11:46:35,330 - #45 arr
INFO  11:46:35,330 - #25 [
INFO  11:46:35,330 - #45 index
INFO  11:46:35,330 - #34 ]
INFO  11:46:35,330 - #12 =
INFO  11:46:35,330 - #45 arr
INFO  11:46:35,330 - #25 [
INFO  11:46:35,330 - #45 index
INFO  11:46:35,330 - #34 ]
INFO  11:46:35,330 - #30 *
INFO  11:46:35,330 - #45 b
INFO  11:46:35,335 - #5 ;
INFO  11:46:35,335 - #4 }
INFO  11:46:35,335 - #13 void
INFO  11:46:35,335 - #45 main
INFO  11:46:35,335 - #6 (
INFO  11:46:35,335 - #7 )
INFO  11:46:35,335 - #45 int
INFO  11:46:35,335 - #45 bodovi
INFO  11:46:35,335 - #5 ;
INFO  11:46:35,335 - #45 Broj
INFO  11:46:35,335 - #45 nula
INFO  11:46:35,335 - #8 ,
INFO  11:46:35,335 - #45 jedan
INFO  11:46:35,335 - #5 ;
INFO  11:46:35,335 - #3 {
INFO  11:46:35,335 - #45 nula
INFO  11:46:35,335 - #12 =
INFO  11:46:35,335 - #45 Broj
INFO  11:46:35,335 - #15 .
INFO  11:46:35,335 - #45 NULA
INFO  11:46:35,335 - #5 ;
INFO  11:46:35,335 - #45 jedan
INFO  11:46:35,335 - #12 =
INFO  11:46:35,335 - #45 Broj
INFO  11:46:35,335 - #15 .
INFO  11:46:35,335 - #45 JEDAN
INFO  11:46:35,335 - #5 ;
INFO  11:46:35,340 - #45 bodovi
INFO  11:46:35,340 - #12 =
INFO  11:46:35,340 - #42 0
INFO  11:46:35,340 - #5 ;
INFO  11:46:35,340 - #45 bodovi
INFO  11:46:35,340 - #38 ++
INFO  11:46:35,340 - #5 ;
INFO  11:46:35,340 - #45 bodovi
INFO  11:46:35,340 - #12 =
INFO  11:46:35,340 - #45 bodovi
INFO  11:46:35,340 - #11 +
INFO  11:46:35,340 - #45 Broj
INFO  11:46:35,340 - #15 .
INFO  11:46:35,340 - #45 JEDAN
INFO  11:46:35,340 - #5 ;
INFO  11:46:35,340 - #45 bodovi
INFO  11:46:35,340 - #12 =
INFO  11:46:35,340 - #45 bodovi
INFO  11:46:35,340 - #30 *
INFO  11:46:35,345 - #45 Broj
INFO  11:46:35,345 - #15 .
INFO  11:46:35,345 - #45 PET
INFO  11:46:35,345 - #5 ;
INFO  11:46:35,345 - #45 bodovi
INFO  11:46:35,345 - #21 --
INFO  11:46:35,345 - #5 ;
INFO  11:46:35,345 - #9 print
INFO  11:46:35,345 - #6 (
INFO  11:46:35,345 - #45 bodovi
INFO  11:46:35,345 - #7 )
INFO  11:46:35,345 - #5 ;
INFO  11:46:35,345 - #45 niz
INFO  11:46:35,345 - #12 =
INFO  11:46:35,345 - #18 new
INFO  11:46:35,345 - #45 int
INFO  11:46:35,345 - #25 [
INFO  11:46:35,345 - #42 2
INFO  11:46:35,345 - #34 ]
INFO  11:46:35,345 - #5 ;
INFO  11:46:35,345 - #45 niz
INFO  11:46:35,345 - #25 [
INFO  11:46:35,345 - #45 nula
INFO  11:46:35,345 - #34 ]
INFO  11:46:35,345 - #12 =
INFO  11:46:35,345 - #45 pet
INFO  11:46:35,345 - #5 ;
INFO  11:46:35,345 - #45 niz
INFO  11:46:35,345 - #25 [
INFO  11:46:35,345 - #42 1
INFO  11:46:35,345 - #34 ]
INFO  11:46:35,350 - #12 =
INFO  11:46:35,350 - #45 Broj
INFO  11:46:35,350 - #15 .
INFO  11:46:35,350 - #45 DESET
INFO  11:46:35,350 - #5 ;
INFO  11:46:35,350 - #45 mul
INFO  11:46:35,355 - #6 (
INFO  11:46:35,355 - #45 niz
INFO  11:46:35,355 - #8 ,
INFO  11:46:35,355 - #45 inc
INFO  11:46:35,355 - #6 (
INFO  11:46:35,355 - #42 0
INFO  11:46:35,355 - #7 )
INFO  11:46:35,355 - #8 ,
INFO  11:46:35,355 - #42 2
INFO  11:46:35,355 - #7 )
INFO  11:46:35,355 - #5 ;
INFO  11:46:35,355 - #45 mul
INFO  11:46:35,355 - #6 (
INFO  11:46:35,355 - #45 niz
INFO  11:46:35,355 - #8 ,
INFO  11:46:35,355 - #45 Broj
INFO  11:46:35,355 - #15 .
INFO  11:46:35,355 - #45 NULA
INFO  11:46:35,355 - #8 ,
INFO  11:46:35,355 - #45 inc
INFO  11:46:35,355 - #6 (
INFO  11:46:35,355 - #45 inc
INFO  11:46:35,355 - #6 (
INFO  11:46:35,355 - #45 Broj
INFO  11:46:35,355 - #15 .
INFO  11:46:35,355 - #45 JEDAN
INFO  11:46:35,355 - #7 )
INFO  11:46:35,355 - #11 +
INFO  11:46:35,360 - #42 1
INFO  11:46:35,360 - #7 )
INFO  11:46:35,360 - #7 )
INFO  11:46:35,360 - #5 ;
INFO  11:46:35,360 - #45 bodovi
INFO  11:46:35,360 - #12 =
INFO  11:46:35,360 - #45 niz
INFO  11:46:35,360 - #25 [
INFO  11:46:35,360 - #42 1
INFO  11:46:35,360 - #34 ]
INFO  11:46:35,360 - #27 /
INFO  11:46:35,360 - #45 niz
INFO  11:46:35,360 - #25 [
INFO  11:46:35,360 - #42 0
INFO  11:46:35,360 - #34 ]
INFO  11:46:35,360 - #5 ;
INFO  11:46:35,360 - #9 print
INFO  11:46:35,360 - #6 (
INFO  11:46:35,360 - #45 bodovi
INFO  11:46:35,360 - #7 )
INFO  11:46:35,360 - #5 ;
INFO  11:46:35,360 - #9 print
INFO  11:46:35,360 - #6 (
INFO  11:46:35,360 - #45 niz
INFO  11:46:35,360 - #25 [
INFO  11:46:35,360 - #45 Broj
INFO  11:46:35,360 - #15 .
INFO  11:46:35,360 - #45 JEDAN
INFO  11:46:35,360 - #34 ]
INFO  11:46:35,360 - #7 )
INFO  11:46:35,360 - #5 ;
INFO  11:46:35,360 - #45 nizch
INFO  11:46:35,360 - #12 =
INFO  11:46:35,360 - #18 new
INFO  11:46:35,360 - #45 char
INFO  11:46:35,360 - #25 [
INFO  11:46:35,360 - #42 3
INFO  11:46:35,360 - #34 ]
INFO  11:46:35,360 - #5 ;
INFO  11:46:35,360 - #45 nizch
INFO  11:46:35,360 - #25 [
INFO  11:46:35,360 - #42 0
INFO  11:46:35,360 - #34 ]
INFO  11:46:35,365 - #12 =
INFO  11:46:35,365 - #43 a
INFO  11:46:35,365 - #5 ;
INFO  11:46:35,365 - #45 nizch
INFO  11:46:35,365 - #25 [
INFO  11:46:35,365 - #45 jedan
INFO  11:46:35,365 - #34 ]
INFO  11:46:35,365 - #12 =
INFO  11:46:35,365 - #43 b
INFO  11:46:35,365 - #5 ;
INFO  11:46:35,365 - #45 nizch
INFO  11:46:35,365 - #25 [
INFO  11:46:35,365 - #45 pet
INFO  11:46:35,365 - #33 -
INFO  11:46:35,365 - #42 3
INFO  11:46:35,365 - #34 ]
INFO  11:46:35,365 - #12 =
INFO  11:46:35,365 - #43 c
INFO  11:46:35,365 - #5 ;
INFO  11:46:35,365 - #9 print
INFO  11:46:35,365 - #6 (
INFO  11:46:35,365 - #45 nizch
INFO  11:46:35,365 - #25 [
INFO  11:46:35,365 - #45 inc
INFO  11:46:35,365 - #6 (
INFO  11:46:35,365 - #42 0
INFO  11:46:35,365 - #7 )
INFO  11:46:35,365 - #34 ]
INFO  11:46:35,365 - #7 )
INFO  11:46:35,365 - #5 ;
INFO  11:46:35,365 - #9 print
INFO  11:46:35,365 - #6 (
INFO  11:46:35,365 - #45 nizch
INFO  11:46:35,365 - #25 [
INFO  11:46:35,365 - #45 jedan
INFO  11:46:35,365 - #30 *
INFO  11:46:35,365 - #42 2
INFO  11:46:35,365 - #34 ]
INFO  11:46:35,365 - #7 )
INFO  11:46:35,365 - #5 ;
INFO  11:46:35,365 - #45 bodovi
INFO  11:46:35,365 - #12 =
INFO  11:46:35,365 - #45 bodovi
INFO  11:46:35,370 - #11 +
INFO  11:46:35,370 - #6 (
INFO  11:46:35,370 - #6 (
INFO  11:46:35,370 - #45 pet
INFO  11:46:35,370 - #30 *
INFO  11:46:35,370 - #45 jedan
INFO  11:46:35,370 - #33 -
INFO  11:46:35,370 - #42 1
INFO  11:46:35,370 - #7 )
INFO  11:46:35,370 - #30 *
INFO  11:46:35,370 - #45 inc
INFO  11:46:35,370 - #6 (
INFO  11:46:35,370 - #45 Broj
INFO  11:46:35,370 - #15 .
INFO  11:46:35,370 - #45 JEDAN
INFO  11:46:35,370 - #7 )
INFO  11:46:35,370 - #33 -
INFO  11:46:35,370 - #6 (
INFO  11:46:35,370 - #42 3
INFO  11:46:35,370 - #24 %
INFO  11:46:35,370 - #42 2
INFO  11:46:35,370 - #11 +
INFO  11:46:35,370 - #42 3
INFO  11:46:35,370 - #30 *
INFO  11:46:35,370 - #42 2
INFO  11:46:35,370 - #33 -
INFO  11:46:35,370 - #42 3
INFO  11:46:35,370 - #7 )
INFO  11:46:35,370 - #33 -
INFO  11:46:35,370 - #45 inc
INFO  11:46:35,370 - #6 (
INFO  11:46:35,370 - #45 Broj
INFO  11:46:35,370 - #15 .
INFO  11:46:35,370 - #45 NULA
INFO  11:46:35,370 - #7 )
INFO  11:46:35,370 - #30 *
INFO  11:46:35,370 - #42 0
INFO  11:46:35,370 - #7 )
INFO  11:46:35,370 - #5 ;
INFO  11:46:35,370 - #9 print
INFO  11:46:35,375 - #6 (
INFO  11:46:35,375 - #45 bodovi
INFO  11:46:35,375 - #7 )
INFO  11:46:35,375 - #5 ;
INFO  11:46:35,375 - #26 read
INFO  11:46:35,375 - #6 (
INFO  11:46:35,375 - #45 bodovi
INFO  11:46:35,375 - #7 )
INFO  11:46:35,375 - #5 ;
INFO  11:46:35,375 - #45 bodovi
INFO  11:46:35,375 - #12 =
INFO  11:46:35,375 - #45 inc
INFO  11:46:35,375 - #6 (
INFO  11:46:35,375 - #45 bodovi
INFO  11:46:35,375 - #7 )
INFO  11:46:35,375 - #5 ;
INFO  11:46:35,375 - #9 print
INFO  11:46:35,375 - #6 (
INFO  11:46:35,375 - #45 bodovi
INFO  11:46:35,375 - #7 )
INFO  11:46:35,375 - #5 ;
INFO  11:46:35,375 - #4 }
INFO  11:46:35,375 - #4 }
INFO  11:46:35,405 - Program(
  ProgName(
   test301
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            EnumDeclaration(
              EnumDeclarations(
                EnumNamed(
                 Broj
                ) [EnumNamed]
                MultipleEnums(
                  MultipleEnums(
                    MultipleEnums(
                      SingleEnum(
                        NoInitEnum(
                         NULA
                        ) [NoInitEnum]
                      ) [SingleEnum]
                      NoInitEnum(
                       JEDAN
                      ) [NoInitEnum]
                    ) [MultipleEnums]
                    InitEnum(
                     PET
                     5
                    ) [InitEnum]
                  ) [MultipleEnums]
                  InitEnum(
                   DESET
                   10
                  ) [InitEnum]
                ) [MultipleEnums]
              ) [EnumDeclarations]
            ) [EnumDeclaration]
          ) [VarDeclLists]
          ConstDeclaration(
            ConstDeclarations(
              Type(
               int
              ) [Type]
              SingleConst(
                ConstItem(
                 jedan
                  InitializerNum(
                   1
                  ) [InitializerNum]
                ) [ConstItem]
              ) [SingleConst]
            ) [ConstDeclarations]
          ) [ConstDeclaration]
        ) [VarDeclLists]
        ConstDeclaration(
          ConstDeclarations(
            Type(
             int
            ) [Type]
            SingleConst(
              ConstItem(
               pet
                InitializerNum(
                 5
                ) [InitializerNum]
              ) [ConstItem]
            ) [SingleConst]
          ) [ConstDeclarations]
        ) [ConstDeclaration]
      ) [VarDeclLists]
      VarDeclaration(
        VarDeclarations(
          Type(
           int
          ) [Type]
          SingleVar(
            Var(
             niz
              ArrayVar(
              ) [ArrayVar]
            ) [Var]
          ) [SingleVar]
        ) [VarDeclarations]
      ) [VarDeclaration]
    ) [VarDeclLists]
    VarDeclaration(
      VarDeclarations(
        Type(
         char
        ) [Type]
        SingleVar(
          Var(
           nizch
            ArrayVar(
            ) [ArrayVar]
          ) [Var]
        ) [SingleVar]
      ) [VarDeclarations]
    ) [VarDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      OptMethods(
        OptMethods(
          NoOptMethods(
          ) [NoOptMethods]
          MethodDeclarations(
            MethodDeclTypeName(
              TypeIdentificator(
                Type(
                 int
                ) [Type]
              ) [TypeIdentificator]
             inc
            ) [MethodDeclTypeName]
            OptionalFormPars(
              SingleFormPars(
                FormParItem(
                  Type(
                   int
                  ) [Type]
                 broj
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [SingleFormPars]
            ) [OptionalFormPars]
            NoOptVars(
            ) [NoOptVars]
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              ReturnStmt(
                RetExpr(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           broj
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    WithAddTerms(
                      NoAddTerms(
                      ) [NoAddTerms]
                      PlusOp(
                      ) [PlusOp]
                      Terms(
                        DesignFactor(
                          DesignFld(
                            DesignVar(
                              DesignatorName(
                               Broj
                              ) [DesignatorName]
                            ) [DesignVar]
                           JEDAN
                          ) [DesignFld]
                          NoMethodCall(
                          ) [NoMethodCall]
                        ) [DesignFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                    ) [WithAddTerms]
                  ) [Expression]
                ) [RetExpr]
              ) [ReturnStmt]
            ) [OptionalStmt]
          ) [MethodDeclarations]
        ) [OptMethods]
        MethodDeclarations(
          MethodDeclTypeName(
            VoidIdentificator(
            ) [VoidIdentificator]
           mul
          ) [MethodDeclTypeName]
          OptionalFormPars(
            MultipleFormPars(
              MultipleFormPars(
                SingleFormPars(
                  FormParItem(
                    Type(
                     int
                    ) [Type]
                   arr
                    ArrayVar(
                    ) [ArrayVar]
                  ) [FormParItem]
                ) [SingleFormPars]
                FormParItem(
                  Type(
                   int
                  ) [Type]
                 index
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [MultipleFormPars]
              FormParItem(
                Type(
                 int
                ) [Type]
               b
                NoArrayVar(
                ) [NoArrayVar]
              ) [FormParItem]
            ) [MultipleFormPars]
          ) [OptionalFormPars]
          NoOptVars(
          ) [NoOptVars]
          OptionalStmt(
            NoOptionalStmt(
            ) [NoOptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignArr(
                  DesignVar(
                    DesignatorName(
                     arr
                    ) [DesignatorName]
                  ) [DesignVar]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           index
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [DesignArr]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    DesignFactor(
                      DesignArr(
                        DesignVar(
                          DesignatorName(
                           arr
                          ) [DesignatorName]
                        ) [DesignVar]
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignVar(
                                DesignatorName(
                                 index
                                ) [DesignatorName]
                              ) [DesignVar]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                      ) [DesignArr]
                      NoMethodCall(
                      ) [NoMethodCall]
                    ) [DesignFactor]
                    WithMulFacts(
                      NoMulFacts(
                      ) [NoMulFacts]
                      MultOp(
                      ) [MultOp]
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           b
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                    ) [WithMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
        ) [MethodDeclarations]
      ) [OptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          VoidIdentificator(
          ) [VoidIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 bodovi
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             Broj
            ) [Type]
            MultipleVars(
              SingleVar(
                Var(
                 nula
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
              Var(
               jedan
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [MultipleVars]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                OptionalStmt(
                  OptionalStmt(
                    OptionalStmt(
                      OptionalStmt(
                        OptionalStmt(
                          OptionalStmt(
                            OptionalStmt(
                              OptionalStmt(
                                OptionalStmt(
                                  OptionalStmt(
                                    OptionalStmt(
                                      OptionalStmt(
                                        OptionalStmt(
                                          OptionalStmt(
                                            OptionalStmt(
                                              OptionalStmt(
                                                OptionalStmt(
                                                  OptionalStmt(
                                                    OptionalStmt(
                                                      OptionalStmt(
                                                        OptionalStmt(
                                                          OptionalStmt(
                                                            OptionalStmt(
                                                              NoOptionalStmt(
                                                              ) [NoOptionalStmt]
                                                              DesignatorStmt(
                                                                AssignOper(
                                                                  DesignVar(
                                                                    DesignatorName(
                                                                     nula
                                                                    ) [DesignatorName]
                                                                  ) [DesignVar]
                                                                  AssignOperation(
                                                                  ) [AssignOperation]
                                                                  Expression(
                                                                    Positive(
                                                                    ) [Positive]
                                                                    Terms(
                                                                      DesignFactor(
                                                                        DesignFld(
                                                                          DesignVar(
                                                                            DesignatorName(
                                                                             Broj
                                                                            ) [DesignatorName]
                                                                          ) [DesignVar]
                                                                         NULA
                                                                        ) [DesignFld]
                                                                        NoMethodCall(
                                                                        ) [NoMethodCall]
                                                                      ) [DesignFactor]
                                                                      NoMulFacts(
                                                                      ) [NoMulFacts]
                                                                    ) [Terms]
                                                                    NoAddTerms(
                                                                    ) [NoAddTerms]
                                                                  ) [Expression]
                                                                ) [AssignOper]
                                                              ) [DesignatorStmt]
                                                            ) [OptionalStmt]
                                                            DesignatorStmt(
                                                              AssignOper(
                                                                DesignVar(
                                                                  DesignatorName(
                                                                   jedan
                                                                  ) [DesignatorName]
                                                                ) [DesignVar]
                                                                AssignOperation(
                                                                ) [AssignOperation]
                                                                Expression(
                                                                  Positive(
                                                                  ) [Positive]
                                                                  Terms(
                                                                    DesignFactor(
                                                                      DesignFld(
                                                                        DesignVar(
                                                                          DesignatorName(
                                                                           Broj
                                                                          ) [DesignatorName]
                                                                        ) [DesignVar]
                                                                       JEDAN
                                                                      ) [DesignFld]
                                                                      NoMethodCall(
                                                                      ) [NoMethodCall]
                                                                    ) [DesignFactor]
                                                                    NoMulFacts(
                                                                    ) [NoMulFacts]
                                                                  ) [Terms]
                                                                  NoAddTerms(
                                                                  ) [NoAddTerms]
                                                                ) [Expression]
                                                              ) [AssignOper]
                                                            ) [DesignatorStmt]
                                                          ) [OptionalStmt]
                                                          DesignatorStmt(
                                                            AssignOper(
                                                              DesignVar(
                                                                DesignatorName(
                                                                 bodovi
                                                                ) [DesignatorName]
                                                              ) [DesignVar]
                                                              AssignOperation(
                                                              ) [AssignOperation]
                                                              Expression(
                                                                Positive(
                                                                ) [Positive]
                                                                Terms(
                                                                  NumFactor(
                                                                   0
                                                                  ) [NumFactor]
                                                                  NoMulFacts(
                                                                  ) [NoMulFacts]
                                                                ) [Terms]
                                                                NoAddTerms(
                                                                ) [NoAddTerms]
                                                              ) [Expression]
                                                            ) [AssignOper]
                                                          ) [DesignatorStmt]
                                                        ) [OptionalStmt]
                                                        DesignatorStmt(
                                                          PlusPlusSideEff(
                                                            DesignVar(
                                                              DesignatorName(
                                                               bodovi
                                                              ) [DesignatorName]
                                                            ) [DesignVar]
                                                          ) [PlusPlusSideEff]
                                                        ) [DesignatorStmt]
                                                      ) [OptionalStmt]
                                                      DesignatorStmt(
                                                        AssignOper(
                                                          DesignVar(
                                                            DesignatorName(
                                                             bodovi
                                                            ) [DesignatorName]
                                                          ) [DesignVar]
                                                          AssignOperation(
                                                          ) [AssignOperation]
                                                          Expression(
                                                            Positive(
                                                            ) [Positive]
                                                            Terms(
                                                              DesignFactor(
                                                                DesignVar(
                                                                  DesignatorName(
                                                                   bodovi
                                                                  ) [DesignatorName]
                                                                ) [DesignVar]
                                                                NoMethodCall(
                                                                ) [NoMethodCall]
                                                              ) [DesignFactor]
                                                              NoMulFacts(
                                                              ) [NoMulFacts]
                                                            ) [Terms]
                                                            WithAddTerms(
                                                              NoAddTerms(
                                                              ) [NoAddTerms]
                                                              PlusOp(
                                                              ) [PlusOp]
                                                              Terms(
                                                                DesignFactor(
                                                                  DesignFld(
                                                                    DesignVar(
                                                                      DesignatorName(
                                                                       Broj
                                                                      ) [DesignatorName]
                                                                    ) [DesignVar]
                                                                   JEDAN
                                                                  ) [DesignFld]
                                                                  NoMethodCall(
                                                                  ) [NoMethodCall]
                                                                ) [DesignFactor]
                                                                NoMulFacts(
                                                                ) [NoMulFacts]
                                                              ) [Terms]
                                                            ) [WithAddTerms]
                                                          ) [Expression]
                                                        ) [AssignOper]
                                                      ) [DesignatorStmt]
                                                    ) [OptionalStmt]
                                                    DesignatorStmt(
                                                      AssignOper(
                                                        DesignVar(
                                                          DesignatorName(
                                                           bodovi
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        AssignOperation(
                                                        ) [AssignOperation]
                                                        Expression(
                                                          Positive(
                                                          ) [Positive]
                                                          Terms(
                                                            DesignFactor(
                                                              DesignVar(
                                                                DesignatorName(
                                                                 bodovi
                                                                ) [DesignatorName]
                                                              ) [DesignVar]
                                                              NoMethodCall(
                                                              ) [NoMethodCall]
                                                            ) [DesignFactor]
                                                            WithMulFacts(
                                                              NoMulFacts(
                                                              ) [NoMulFacts]
                                                              MultOp(
                                                              ) [MultOp]
                                                              DesignFactor(
                                                                DesignFld(
                                                                  DesignVar(
                                                                    DesignatorName(
                                                                     Broj
                                                                    ) [DesignatorName]
                                                                  ) [DesignVar]
                                                                 PET
                                                                ) [DesignFld]
                                                                NoMethodCall(
                                                                ) [NoMethodCall]
                                                              ) [DesignFactor]
                                                            ) [WithMulFacts]
                                                          ) [Terms]
                                                          NoAddTerms(
                                                          ) [NoAddTerms]
                                                        ) [Expression]
                                                      ) [AssignOper]
                                                    ) [DesignatorStmt]
                                                  ) [OptionalStmt]
                                                  DesignatorStmt(
                                                    MinusMinusSideEff(
                                                      DesignVar(
                                                        DesignatorName(
                                                         bodovi
                                                        ) [DesignatorName]
                                                      ) [DesignVar]
                                                    ) [MinusMinusSideEff]
                                                  ) [DesignatorStmt]
                                                ) [OptionalStmt]
                                                PrintStmt(
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      DesignFactor(
                                                        DesignVar(
                                                          DesignatorName(
                                                           bodovi
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        NoMethodCall(
                                                        ) [NoMethodCall]
                                                      ) [DesignFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                  OptNumConstDerived2(
                                                  ) [OptNumConstDerived2]
                                                ) [PrintStmt]
                                              ) [OptionalStmt]
                                              DesignatorStmt(
                                                AssignOper(
                                                  DesignVar(
                                                    DesignatorName(
                                                     niz
                                                    ) [DesignatorName]
                                                  ) [DesignVar]
                                                  AssignOperation(
                                                  ) [AssignOperation]
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      NewArrFactor(
                                                        Type(
                                                         int
                                                        ) [Type]
                                                        Expression(
                                                          Positive(
                                                          ) [Positive]
                                                          Terms(
                                                            NumFactor(
                                                             2
                                                            ) [NumFactor]
                                                            NoMulFacts(
                                                            ) [NoMulFacts]
                                                          ) [Terms]
                                                          NoAddTerms(
                                                          ) [NoAddTerms]
                                                        ) [Expression]
                                                      ) [NewArrFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [AssignOper]
                                              ) [DesignatorStmt]
                                            ) [OptionalStmt]
                                            DesignatorStmt(
                                              AssignOper(
                                                DesignArr(
                                                  DesignVar(
                                                    DesignatorName(
                                                     niz
                                                    ) [DesignatorName]
                                                  ) [DesignVar]
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      DesignFactor(
                                                        DesignVar(
                                                          DesignatorName(
                                                           nula
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        NoMethodCall(
                                                        ) [NoMethodCall]
                                                      ) [DesignFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [DesignArr]
                                                AssignOperation(
                                                ) [AssignOperation]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    DesignFactor(
                                                      DesignVar(
                                                        DesignatorName(
                                                         pet
                                                        ) [DesignatorName]
                                                      ) [DesignVar]
                                                      NoMethodCall(
                                                      ) [NoMethodCall]
                                                    ) [DesignFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [AssignOper]
                                            ) [DesignatorStmt]
                                          ) [OptionalStmt]
                                          DesignatorStmt(
                                            AssignOper(
                                              DesignArr(
                                                DesignVar(
                                                  DesignatorName(
                                                   niz
                                                  ) [DesignatorName]
                                                ) [DesignVar]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    NumFactor(
                                                     1
                                                    ) [NumFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [DesignArr]
                                              AssignOperation(
                                              ) [AssignOperation]
                                              Expression(
                                                Positive(
                                                ) [Positive]
                                                Terms(
                                                  DesignFactor(
                                                    DesignFld(
                                                      DesignVar(
                                                        DesignatorName(
                                                         Broj
                                                        ) [DesignatorName]
                                                      ) [DesignVar]
                                                     DESET
                                                    ) [DesignFld]
                                                    NoMethodCall(
                                                    ) [NoMethodCall]
                                                  ) [DesignFactor]
                                                  NoMulFacts(
                                                  ) [NoMulFacts]
                                                ) [Terms]
                                                NoAddTerms(
                                                ) [NoAddTerms]
                                              ) [Expression]
                                            ) [AssignOper]
                                          ) [DesignatorStmt]
                                        ) [OptionalStmt]
                                        DesignatorStmt(
                                          ProcCall(
                                            DesignVar(
                                              DesignatorName(
                                               mul
                                              ) [DesignatorName]
                                            ) [DesignVar]
                                            WithActPars(
                                              MultiActPars(
                                                MultiActPars(
                                                  SingleActPars(
                                                    Expression(
                                                      Positive(
                                                      ) [Positive]
                                                      Terms(
                                                        DesignFactor(
                                                          DesignVar(
                                                            DesignatorName(
                                                             niz
                                                            ) [DesignatorName]
                                                          ) [DesignVar]
                                                          NoMethodCall(
                                                          ) [NoMethodCall]
                                                        ) [DesignFactor]
                                                        NoMulFacts(
                                                        ) [NoMulFacts]
                                                      ) [Terms]
                                                      NoAddTerms(
                                                      ) [NoAddTerms]
                                                    ) [Expression]
                                                  ) [SingleActPars]
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      DesignFactor(
                                                        DesignVar(
                                                          DesignatorName(
                                                           inc
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        WithMethodCall(
                                                          WithActPars(
                                                            SingleActPars(
                                                              Expression(
                                                                Positive(
                                                                ) [Positive]
                                                                Terms(
                                                                  NumFactor(
                                                                   0
                                                                  ) [NumFactor]
                                                                  NoMulFacts(
                                                                  ) [NoMulFacts]
                                                                ) [Terms]
                                                                NoAddTerms(
                                                                ) [NoAddTerms]
                                                              ) [Expression]
                                                            ) [SingleActPars]
                                                          ) [WithActPars]
                                                        ) [WithMethodCall]
                                                      ) [DesignFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [MultiActPars]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    NumFactor(
                                                     2
                                                    ) [NumFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [MultiActPars]
                                            ) [WithActPars]
                                          ) [ProcCall]
                                        ) [DesignatorStmt]
                                      ) [OptionalStmt]
                                      DesignatorStmt(
                                        ProcCall(
                                          DesignVar(
                                            DesignatorName(
                                             mul
                                            ) [DesignatorName]
                                          ) [DesignVar]
                                          WithActPars(
                                            MultiActPars(
                                              MultiActPars(
                                                SingleActPars(
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      DesignFactor(
                                                        DesignVar(
                                                          DesignatorName(
                                                           niz
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        NoMethodCall(
                                                        ) [NoMethodCall]
                                                      ) [DesignFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [SingleActPars]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    DesignFactor(
                                                      DesignFld(
                                                        DesignVar(
                                                          DesignatorName(
                                                           Broj
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                       NULA
                                                      ) [DesignFld]
                                                      NoMethodCall(
                                                      ) [NoMethodCall]
                                                    ) [DesignFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [MultiActPars]
                                              Expression(
                                                Positive(
                                                ) [Positive]
                                                Terms(
                                                  DesignFactor(
                                                    DesignVar(
                                                      DesignatorName(
                                                       inc
                                                      ) [DesignatorName]
                                                    ) [DesignVar]
                                                    WithMethodCall(
                                                      WithActPars(
                                                        SingleActPars(
                                                          Expression(
                                                            Positive(
                                                            ) [Positive]
                                                            Terms(
                                                              DesignFactor(
                                                                DesignVar(
                                                                  DesignatorName(
                                                                   inc
                                                                  ) [DesignatorName]
                                                                ) [DesignVar]
                                                                WithMethodCall(
                                                                  WithActPars(
                                                                    SingleActPars(
                                                                      Expression(
                                                                        Positive(
                                                                        ) [Positive]
                                                                        Terms(
                                                                          DesignFactor(
                                                                            DesignFld(
                                                                              DesignVar(
                                                                                DesignatorName(
                                                                                 Broj
                                                                                ) [DesignatorName]
                                                                              ) [DesignVar]
                                                                             JEDAN
                                                                            ) [DesignFld]
                                                                            NoMethodCall(
                                                                            ) [NoMethodCall]
                                                                          ) [DesignFactor]
                                                                          NoMulFacts(
                                                                          ) [NoMulFacts]
                                                                        ) [Terms]
                                                                        NoAddTerms(
                                                                        ) [NoAddTerms]
                                                                      ) [Expression]
                                                                    ) [SingleActPars]
                                                                  ) [WithActPars]
                                                                ) [WithMethodCall]
                                                              ) [DesignFactor]
                                                              NoMulFacts(
                                                              ) [NoMulFacts]
                                                            ) [Terms]
                                                            WithAddTerms(
                                                              NoAddTerms(
                                                              ) [NoAddTerms]
                                                              PlusOp(
                                                              ) [PlusOp]
                                                              Terms(
                                                                NumFactor(
                                                                 1
                                                                ) [NumFactor]
                                                                NoMulFacts(
                                                                ) [NoMulFacts]
                                                              ) [Terms]
                                                            ) [WithAddTerms]
                                                          ) [Expression]
                                                        ) [SingleActPars]
                                                      ) [WithActPars]
                                                    ) [WithMethodCall]
                                                  ) [DesignFactor]
                                                  NoMulFacts(
                                                  ) [NoMulFacts]
                                                ) [Terms]
                                                NoAddTerms(
                                                ) [NoAddTerms]
                                              ) [Expression]
                                            ) [MultiActPars]
                                          ) [WithActPars]
                                        ) [ProcCall]
                                      ) [DesignatorStmt]
                                    ) [OptionalStmt]
                                    DesignatorStmt(
                                      AssignOper(
                                        DesignVar(
                                          DesignatorName(
                                           bodovi
                                          ) [DesignatorName]
                                        ) [DesignVar]
                                        AssignOperation(
                                        ) [AssignOperation]
                                        Expression(
                                          Positive(
                                          ) [Positive]
                                          Terms(
                                            DesignFactor(
                                              DesignArr(
                                                DesignVar(
                                                  DesignatorName(
                                                   niz
                                                  ) [DesignatorName]
                                                ) [DesignVar]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    NumFactor(
                                                     1
                                                    ) [NumFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [DesignArr]
                                              NoMethodCall(
                                              ) [NoMethodCall]
                                            ) [DesignFactor]
                                            WithMulFacts(
                                              NoMulFacts(
                                              ) [NoMulFacts]
                                              DivOp(
                                              ) [DivOp]
                                              DesignFactor(
                                                DesignArr(
                                                  DesignVar(
                                                    DesignatorName(
                                                     niz
                                                    ) [DesignatorName]
                                                  ) [DesignVar]
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      NumFactor(
                                                       0
                                                      ) [NumFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [DesignArr]
                                                NoMethodCall(
                                                ) [NoMethodCall]
                                              ) [DesignFactor]
                                            ) [WithMulFacts]
                                          ) [Terms]
                                          NoAddTerms(
                                          ) [NoAddTerms]
                                        ) [Expression]
                                      ) [AssignOper]
                                    ) [DesignatorStmt]
                                  ) [OptionalStmt]
                                  PrintStmt(
                                    Expression(
                                      Positive(
                                      ) [Positive]
                                      Terms(
                                        DesignFactor(
                                          DesignVar(
                                            DesignatorName(
                                             bodovi
                                            ) [DesignatorName]
                                          ) [DesignVar]
                                          NoMethodCall(
                                          ) [NoMethodCall]
                                        ) [DesignFactor]
                                        NoMulFacts(
                                        ) [NoMulFacts]
                                      ) [Terms]
                                      NoAddTerms(
                                      ) [NoAddTerms]
                                    ) [Expression]
                                    OptNumConstDerived2(
                                    ) [OptNumConstDerived2]
                                  ) [PrintStmt]
                                ) [OptionalStmt]
                                PrintStmt(
                                  Expression(
                                    Positive(
                                    ) [Positive]
                                    Terms(
                                      DesignFactor(
                                        DesignArr(
                                          DesignVar(
                                            DesignatorName(
                                             niz
                                            ) [DesignatorName]
                                          ) [DesignVar]
                                          Expression(
                                            Positive(
                                            ) [Positive]
                                            Terms(
                                              DesignFactor(
                                                DesignFld(
                                                  DesignVar(
                                                    DesignatorName(
                                                     Broj
                                                    ) [DesignatorName]
                                                  ) [DesignVar]
                                                 JEDAN
                                                ) [DesignFld]
                                                NoMethodCall(
                                                ) [NoMethodCall]
                                              ) [DesignFactor]
                                              NoMulFacts(
                                              ) [NoMulFacts]
                                            ) [Terms]
                                            NoAddTerms(
                                            ) [NoAddTerms]
                                          ) [Expression]
                                        ) [DesignArr]
                                        NoMethodCall(
                                        ) [NoMethodCall]
                                      ) [DesignFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                  ) [Expression]
                                  OptNumConstDerived2(
                                  ) [OptNumConstDerived2]
                                ) [PrintStmt]
                              ) [OptionalStmt]
                              DesignatorStmt(
                                AssignOper(
                                  DesignVar(
                                    DesignatorName(
                                     nizch
                                    ) [DesignatorName]
                                  ) [DesignVar]
                                  AssignOperation(
                                  ) [AssignOperation]
                                  Expression(
                                    Positive(
                                    ) [Positive]
                                    Terms(
                                      NewArrFactor(
                                        Type(
                                         char
                                        ) [Type]
                                        Expression(
                                          Positive(
                                          ) [Positive]
                                          Terms(
                                            NumFactor(
                                             3
                                            ) [NumFactor]
                                            NoMulFacts(
                                            ) [NoMulFacts]
                                          ) [Terms]
                                          NoAddTerms(
                                          ) [NoAddTerms]
                                        ) [Expression]
                                      ) [NewArrFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                  ) [Expression]
                                ) [AssignOper]
                              ) [DesignatorStmt]
                            ) [OptionalStmt]
                            DesignatorStmt(
                              AssignOper(
                                DesignArr(
                                  DesignVar(
                                    DesignatorName(
                                     nizch
                                    ) [DesignatorName]
                                  ) [DesignVar]
                                  Expression(
                                    Positive(
                                    ) [Positive]
                                    Terms(
                                      NumFactor(
                                       0
                                      ) [NumFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                  ) [Expression]
                                ) [DesignArr]
                                AssignOperation(
                                ) [AssignOperation]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    CharFactor(
                                     a
                                    ) [CharFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [AssignOper]
                            ) [DesignatorStmt]
                          ) [OptionalStmt]
                          DesignatorStmt(
                            AssignOper(
                              DesignArr(
                                DesignVar(
                                  DesignatorName(
                                   nizch
                                  ) [DesignatorName]
                                ) [DesignVar]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    DesignFactor(
                                      DesignVar(
                                        DesignatorName(
                                         jedan
                                        ) [DesignatorName]
                                      ) [DesignVar]
                                      NoMethodCall(
                                      ) [NoMethodCall]
                                    ) [DesignFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [DesignArr]
                              AssignOperation(
                              ) [AssignOperation]
                              Expression(
                                Positive(
                                ) [Positive]
                                Terms(
                                  CharFactor(
                                   b
                                  ) [CharFactor]
                                  NoMulFacts(
                                  ) [NoMulFacts]
                                ) [Terms]
                                NoAddTerms(
                                ) [NoAddTerms]
                              ) [Expression]
                            ) [AssignOper]
                          ) [DesignatorStmt]
                        ) [OptionalStmt]
                        DesignatorStmt(
                          AssignOper(
                            DesignArr(
                              DesignVar(
                                DesignatorName(
                                 nizch
                                ) [DesignatorName]
                              ) [DesignVar]
                              Expression(
                                Positive(
                                ) [Positive]
                                Terms(
                                  DesignFactor(
                                    DesignVar(
                                      DesignatorName(
                                       pet
                                      ) [DesignatorName]
                                    ) [DesignVar]
                                    NoMethodCall(
                                    ) [NoMethodCall]
                                  ) [DesignFactor]
                                  NoMulFacts(
                                  ) [NoMulFacts]
                                ) [Terms]
                                WithAddTerms(
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                  MinusOp(
                                  ) [MinusOp]
                                  Terms(
                                    NumFactor(
                                     3
                                    ) [NumFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                ) [WithAddTerms]
                              ) [Expression]
                            ) [DesignArr]
                            AssignOperation(
                            ) [AssignOperation]
                            Expression(
                              Positive(
                              ) [Positive]
                              Terms(
                                CharFactor(
                                 c
                                ) [CharFactor]
                                NoMulFacts(
                                ) [NoMulFacts]
                              ) [Terms]
                              NoAddTerms(
                              ) [NoAddTerms]
                            ) [Expression]
                          ) [AssignOper]
                        ) [DesignatorStmt]
                      ) [OptionalStmt]
                      PrintStmt(
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignArr(
                                DesignVar(
                                  DesignatorName(
                                   nizch
                                  ) [DesignatorName]
                                ) [DesignVar]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    DesignFactor(
                                      DesignVar(
                                        DesignatorName(
                                         inc
                                        ) [DesignatorName]
                                      ) [DesignVar]
                                      WithMethodCall(
                                        WithActPars(
                                          SingleActPars(
                                            Expression(
                                              Positive(
                                              ) [Positive]
                                              Terms(
                                                NumFactor(
                                                 0
                                                ) [NumFactor]
                                                NoMulFacts(
                                                ) [NoMulFacts]
                                              ) [Terms]
                                              NoAddTerms(
                                              ) [NoAddTerms]
                                            ) [Expression]
                                          ) [SingleActPars]
                                        ) [WithActPars]
                                      ) [WithMethodCall]
                                    ) [DesignFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [DesignArr]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                        OptNumConstDerived2(
                        ) [OptNumConstDerived2]
                      ) [PrintStmt]
                    ) [OptionalStmt]
                    PrintStmt(
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          DesignFactor(
                            DesignArr(
                              DesignVar(
                                DesignatorName(
                                 nizch
                                ) [DesignatorName]
                              ) [DesignVar]
                              Expression(
                                Positive(
                                ) [Positive]
                                Terms(
                                  DesignFactor(
                                    DesignVar(
                                      DesignatorName(
                                       jedan
                                      ) [DesignatorName]
                                    ) [DesignVar]
                                    NoMethodCall(
                                    ) [NoMethodCall]
                                  ) [DesignFactor]
                                  WithMulFacts(
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                    MultOp(
                                    ) [MultOp]
                                    NumFactor(
                                     2
                                    ) [NumFactor]
                                  ) [WithMulFacts]
                                ) [Terms]
                                NoAddTerms(
                                ) [NoAddTerms]
                              ) [Expression]
                            ) [DesignArr]
                            NoMethodCall(
                            ) [NoMethodCall]
                          ) [DesignFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                      OptNumConstDerived2(
                      ) [OptNumConstDerived2]
                    ) [PrintStmt]
                  ) [OptionalStmt]
                  DesignatorStmt(
                    AssignOper(
                      DesignVar(
                        DesignatorName(
                         bodovi
                        ) [DesignatorName]
                      ) [DesignVar]
                      AssignOperation(
                      ) [AssignOperation]
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          DesignFactor(
                            DesignVar(
                              DesignatorName(
                               bodovi
                              ) [DesignatorName]
                            ) [DesignVar]
                            NoMethodCall(
                            ) [NoMethodCall]
                          ) [DesignFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        WithAddTerms(
                          NoAddTerms(
                          ) [NoAddTerms]
                          PlusOp(
                          ) [PlusOp]
                          Terms(
                            ExprFactor(
                              Expression(
                                Positive(
                                ) [Positive]
                                Terms(
                                  ExprFactor(
                                    Expression(
                                      Positive(
                                      ) [Positive]
                                      Terms(
                                        DesignFactor(
                                          DesignVar(
                                            DesignatorName(
                                             pet
                                            ) [DesignatorName]
                                          ) [DesignVar]
                                          NoMethodCall(
                                          ) [NoMethodCall]
                                        ) [DesignFactor]
                                        WithMulFacts(
                                          NoMulFacts(
                                          ) [NoMulFacts]
                                          MultOp(
                                          ) [MultOp]
                                          DesignFactor(
                                            DesignVar(
                                              DesignatorName(
                                               jedan
                                              ) [DesignatorName]
                                            ) [DesignVar]
                                            NoMethodCall(
                                            ) [NoMethodCall]
                                          ) [DesignFactor]
                                        ) [WithMulFacts]
                                      ) [Terms]
                                      WithAddTerms(
                                        NoAddTerms(
                                        ) [NoAddTerms]
                                        MinusOp(
                                        ) [MinusOp]
                                        Terms(
                                          NumFactor(
                                           1
                                          ) [NumFactor]
                                          NoMulFacts(
                                          ) [NoMulFacts]
                                        ) [Terms]
                                      ) [WithAddTerms]
                                    ) [Expression]
                                  ) [ExprFactor]
                                  WithMulFacts(
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                    MultOp(
                                    ) [MultOp]
                                    DesignFactor(
                                      DesignVar(
                                        DesignatorName(
                                         inc
                                        ) [DesignatorName]
                                      ) [DesignVar]
                                      WithMethodCall(
                                        WithActPars(
                                          SingleActPars(
                                            Expression(
                                              Positive(
                                              ) [Positive]
                                              Terms(
                                                DesignFactor(
                                                  DesignFld(
                                                    DesignVar(
                                                      DesignatorName(
                                                       Broj
                                                      ) [DesignatorName]
                                                    ) [DesignVar]
                                                   JEDAN
                                                  ) [DesignFld]
                                                  NoMethodCall(
                                                  ) [NoMethodCall]
                                                ) [DesignFactor]
                                                NoMulFacts(
                                                ) [NoMulFacts]
                                              ) [Terms]
                                              NoAddTerms(
                                              ) [NoAddTerms]
                                            ) [Expression]
                                          ) [SingleActPars]
                                        ) [WithActPars]
                                      ) [WithMethodCall]
                                    ) [DesignFactor]
                                  ) [WithMulFacts]
                                ) [Terms]
                                WithAddTerms(
                                  WithAddTerms(
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                    MinusOp(
                                    ) [MinusOp]
                                    Terms(
                                      ExprFactor(
                                        Expression(
                                          Positive(
                                          ) [Positive]
                                          Terms(
                                            NumFactor(
                                             3
                                            ) [NumFactor]
                                            WithMulFacts(
                                              NoMulFacts(
                                              ) [NoMulFacts]
                                              ModOp(
                                              ) [ModOp]
                                              NumFactor(
                                               2
                                              ) [NumFactor]
                                            ) [WithMulFacts]
                                          ) [Terms]
                                          WithAddTerms(
                                            WithAddTerms(
                                              NoAddTerms(
                                              ) [NoAddTerms]
                                              PlusOp(
                                              ) [PlusOp]
                                              Terms(
                                                NumFactor(
                                                 3
                                                ) [NumFactor]
                                                WithMulFacts(
                                                  NoMulFacts(
                                                  ) [NoMulFacts]
                                                  MultOp(
                                                  ) [MultOp]
                                                  NumFactor(
                                                   2
                                                  ) [NumFactor]
                                                ) [WithMulFacts]
                                              ) [Terms]
                                            ) [WithAddTerms]
                                            MinusOp(
                                            ) [MinusOp]
                                            Terms(
                                              NumFactor(
                                               3
                                              ) [NumFactor]
                                              NoMulFacts(
                                              ) [NoMulFacts]
                                            ) [Terms]
                                          ) [WithAddTerms]
                                        ) [Expression]
                                      ) [ExprFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                  ) [WithAddTerms]
                                  MinusOp(
                                  ) [MinusOp]
                                  Terms(
                                    DesignFactor(
                                      DesignVar(
                                        DesignatorName(
                                         inc
                                        ) [DesignatorName]
                                      ) [DesignVar]
                                      WithMethodCall(
                                        WithActPars(
                                          SingleActPars(
                                            Expression(
                                              Positive(
                                              ) [Positive]
                                              Terms(
                                                DesignFactor(
                                                  DesignFld(
                                                    DesignVar(
                                                      DesignatorName(
                                                       Broj
                                                      ) [DesignatorName]
                                                    ) [DesignVar]
                                                   NULA
                                                  ) [DesignFld]
                                                  NoMethodCall(
                                                  ) [NoMethodCall]
                                                ) [DesignFactor]
                                                NoMulFacts(
                                                ) [NoMulFacts]
                                              ) [Terms]
                                              NoAddTerms(
                                              ) [NoAddTerms]
                                            ) [Expression]
                                          ) [SingleActPars]
                                        ) [WithActPars]
                                      ) [WithMethodCall]
                                    ) [DesignFactor]
                                    WithMulFacts(
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                      MultOp(
                                      ) [MultOp]
                                      NumFactor(
                                       0
                                      ) [NumFactor]
                                    ) [WithMulFacts]
                                  ) [Terms]
                                ) [WithAddTerms]
                              ) [Expression]
                            ) [ExprFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                        ) [WithAddTerms]
                      ) [Expression]
                    ) [AssignOper]
                  ) [DesignatorStmt]
                ) [OptionalStmt]
                PrintStmt(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           bodovi
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                  OptNumConstDerived2(
                  ) [OptNumConstDerived2]
                ) [PrintStmt]
              ) [OptionalStmt]
              ReadStmt(
                DesignVar(
                  DesignatorName(
                   bodovi
                  ) [DesignatorName]
                ) [DesignVar]
              ) [ReadStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignVar(
                  DesignatorName(
                   bodovi
                  ) [DesignatorName]
                ) [DesignVar]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    DesignFactor(
                      DesignVar(
                        DesignatorName(
                         inc
                        ) [DesignatorName]
                      ) [DesignVar]
                      WithMethodCall(
                        WithActPars(
                          SingleActPars(
                            Expression(
                              Positive(
                              ) [Positive]
                              Terms(
                                DesignFactor(
                                  DesignVar(
                                    DesignatorName(
                                     bodovi
                                    ) [DesignatorName]
                                  ) [DesignVar]
                                  NoMethodCall(
                                  ) [NoMethodCall]
                                ) [DesignFactor]
                                NoMulFacts(
                                ) [NoMulFacts]
                              ) [Terms]
                              NoAddTerms(
                              ) [NoAddTerms]
                            ) [Expression]
                          ) [SingleActPars]
                        ) [WithActPars]
                      ) [WithMethodCall]
                    ) [DesignFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          PrintStmt(
            Expression(
              Positive(
              ) [Positive]
              Terms(
                DesignFactor(
                  DesignVar(
                    DesignatorName(
                     bodovi
                    ) [DesignatorName]
                  ) [DesignVar]
                  NoMethodCall(
                  ) [NoMethodCall]
                ) [DesignFactor]
                NoMulFacts(
                ) [NoMulFacts]
              ) [Terms]
              NoAddTerms(
              ) [NoAddTerms]
            ) [Expression]
            OptNumConstDerived2(
            ) [OptNumConstDerived2]
          ) [PrintStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  11:46:35,410 - ===================================
INFO  11:46:35,410 - INFO:  Pocetak programa test301 na liniji 3
INFO  11:46:35,410 - INFO:  Definisan enum tip Broj na liniji 5
INFO  11:46:35,415 - INFO:  Deklarisana konstanta jedan na liniji 7
INFO  11:46:35,415 - INFO:  Deklarisana konstanta pet na liniji 8
INFO  11:46:35,415 - INFO:  Deklarisan niz niz na liniji 10
INFO  11:46:35,415 - INFO:  Deklarisan niz nizch na liniji 11
INFO  11:46:35,415 - INFO:  Obradjuje se funkcija inc na liniji 14
INFO  11:46:35,415 - INFO:  Deklarisan formalni parametar broj na liniji 14
INFO  11:46:35,415 - INFO:  Pristup simbolu broj na liniji 16
INFO  11:46:35,415 - INFO:  Pristup simbolu Broj na liniji 16
INFO  11:46:35,415 - INFO:  Pristup konstanti Broj.JEDAN na liniji 16
INFO  11:46:35,415 - INFO:  Deklarisan metod inc na liniji 14
INFO  11:46:35,415 - INFO:  Obradjuje se funkcija mul na liniji 19
INFO  11:46:35,415 - INFO:  Deklarisan formalni parametar arr na liniji 19
INFO  11:46:35,415 - INFO:  Deklarisan formalni parametar index na liniji 19
INFO  11:46:35,415 - INFO:  Deklarisan formalni parametar b na liniji 19
INFO  11:46:35,415 - INFO:  Pristup simbolu arr na liniji 21
INFO  11:46:35,415 - INFO:  Pristup simbolu index na liniji 21
INFO  11:46:35,415 - INFO:  Pristup elementu niza arr na liniji 21
INFO  11:46:35,415 - INFO:  Pristup simbolu arr na liniji 21
INFO  11:46:35,415 - INFO:  Pristup simbolu index na liniji 21
INFO  11:46:35,415 - INFO:  Pristup elementu niza arr na liniji 21
INFO  11:46:35,415 - INFO:  Pristup simbolu b na liniji 21
INFO  11:46:35,415 - INFO:  Deklarisan metod mul na liniji 19
INFO  11:46:35,415 - INFO:  Obradjuje se funkcija main na liniji 25
INFO  11:46:35,415 - INFO:  Deklarisana promenljiva bodovi na liniji 26
INFO  11:46:35,415 - INFO:  Deklarisana promenljiva nula na liniji 27
INFO  11:46:35,415 - INFO:  Deklarisana promenljiva jedan na liniji 27
INFO  11:46:35,415 - INFO:  Pristup simbolu nula na liniji 31
INFO  11:46:35,415 - INFO:  Pristup simbolu Broj na liniji 31
INFO  11:46:35,415 - INFO:  Pristup konstanti Broj.NULA na liniji 31
INFO  11:46:35,415 - INFO:  Pristup simbolu jedan na liniji 32
INFO  11:46:35,415 - INFO:  Pristup simbolu Broj na liniji 32
INFO  11:46:35,415 - INFO:  Pristup konstanti Broj.JEDAN na liniji 32
INFO  11:46:35,415 - INFO:  Pristup simbolu bodovi na liniji 34
INFO  11:46:35,415 - INFO:  Pristup simbolu bodovi na liniji 35
INFO  11:46:35,415 - INFO:  Pristup simbolu bodovi na liniji 36
INFO  11:46:35,415 - INFO:  Pristup simbolu bodovi na liniji 36
INFO  11:46:35,415 - INFO:  Pristup simbolu Broj na liniji 36
INFO  11:46:35,415 - INFO:  Pristup konstanti Broj.JEDAN na liniji 36
INFO  11:46:35,415 - INFO:  Pristup simbolu bodovi na liniji 37
INFO  11:46:35,415 - INFO:  Pristup simbolu bodovi na liniji 37
INFO  11:46:35,415 - INFO:  Pristup simbolu Broj na liniji 37
INFO  11:46:35,415 - INFO:  Pristup konstanti Broj.PET na liniji 37
INFO  11:46:35,415 - INFO:  Pristup simbolu bodovi na liniji 38
INFO  11:46:35,415 - INFO:  Pristup simbolu bodovi na liniji 39
INFO  11:46:35,415 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:35,415 - INFO:  Pristup simbolu niz na liniji 42
INFO  11:46:35,415 - INFO:  Pristup simbolu niz na liniji 43
INFO  11:46:35,415 - INFO:  Pristup simbolu nula na liniji 43
INFO  11:46:35,415 - INFO:  Pristup elementu niza niz na liniji 43
INFO  11:46:35,415 - INFO:  Pristup simbolu pet na liniji 43
INFO  11:46:35,415 - INFO:  Pristup simbolu niz na liniji 44
INFO  11:46:35,415 - INFO:  Pristup elementu niza niz na liniji 44
INFO  11:46:35,415 - INFO:  Pristup simbolu Broj na liniji 44
INFO  11:46:35,415 - INFO:  Pristup konstanti Broj.DESET na liniji 44
INFO  11:46:35,415 - INFO:  Pristup metodi mul na liniji 45
INFO  11:46:35,415 - INFO:  Pristup simbolu niz na liniji 45
INFO  11:46:35,420 - INFO:  Pristup metodi inc na liniji 45
INFO  11:46:35,420 - INFO:  Pozvana metoda inc na liniji 45
INFO  11:46:35,420 - INFO:  Pozvana metoda mul na liniji 45
INFO  11:46:35,420 - INFO:  Pristup metodi mul na liniji 46
INFO  11:46:35,420 - INFO:  Pristup simbolu niz na liniji 46
INFO  11:46:35,420 - INFO:  Pristup simbolu Broj na liniji 46
INFO  11:46:35,420 - INFO:  Pristup konstanti Broj.NULA na liniji 46
INFO  11:46:35,420 - INFO:  Pristup metodi inc na liniji 46
INFO  11:46:35,420 - INFO:  Pristup metodi inc na liniji 46
INFO  11:46:35,420 - INFO:  Pristup simbolu Broj na liniji 46
INFO  11:46:35,420 - INFO:  Pristup konstanti Broj.JEDAN na liniji 46
INFO  11:46:35,420 - INFO:  Pozvana metoda inc na liniji 46
INFO  11:46:35,420 - INFO:  Pozvana metoda inc na liniji 46
INFO  11:46:35,420 - INFO:  Pozvana metoda mul na liniji 46
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 47
INFO  11:46:35,420 - INFO:  Pristup simbolu niz na liniji 47
INFO  11:46:35,420 - INFO:  Pristup elementu niza niz na liniji 47
INFO  11:46:35,420 - INFO:  Pristup simbolu niz na liniji 47
INFO  11:46:35,420 - INFO:  Pristup elementu niza niz na liniji 47
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 48
INFO  11:46:35,420 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:35,420 - INFO:  Pristup simbolu niz na liniji 49
INFO  11:46:35,420 - INFO:  Pristup simbolu Broj na liniji 49
INFO  11:46:35,420 - INFO:  Pristup konstanti Broj.JEDAN na liniji 49
INFO  11:46:35,420 - INFO:  Pristup elementu niza niz na liniji 49
INFO  11:46:35,420 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:35,420 - INFO:  Pristup simbolu nizch na liniji 52
INFO  11:46:35,420 - INFO:  Pristup simbolu nizch na liniji 53
INFO  11:46:35,420 - INFO:  Pristup elementu niza nizch na liniji 53
INFO  11:46:35,420 - INFO:  Pristup simbolu nizch na liniji 54
INFO  11:46:35,420 - INFO:  Pristup simbolu jedan na liniji 54
INFO  11:46:35,420 - INFO:  Pristup elementu niza nizch na liniji 54
INFO  11:46:35,420 - INFO:  Pristup simbolu nizch na liniji 55
INFO  11:46:35,420 - INFO:  Pristup simbolu pet na liniji 55
INFO  11:46:35,420 - INFO:  Pristup elementu niza nizch na liniji 55
INFO  11:46:35,420 - INFO:  Pristup simbolu nizch na liniji 56
INFO  11:46:35,420 - INFO:  Pristup metodi inc na liniji 56
INFO  11:46:35,420 - INFO:  Pozvana metoda inc na liniji 56
INFO  11:46:35,420 - INFO:  Pristup elementu niza nizch na liniji 56
INFO  11:46:35,420 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:35,420 - INFO:  Pristup simbolu nizch na liniji 57
INFO  11:46:35,420 - INFO:  Pristup simbolu jedan na liniji 57
INFO  11:46:35,420 - INFO:  Pristup elementu niza nizch na liniji 57
INFO  11:46:35,420 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 60
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 60
INFO  11:46:35,420 - INFO:  Pristup simbolu pet na liniji 60
INFO  11:46:35,420 - INFO:  Pristup simbolu jedan na liniji 60
INFO  11:46:35,420 - INFO:  Pristup metodi inc na liniji 60
INFO  11:46:35,420 - INFO:  Pristup simbolu Broj na liniji 60
INFO  11:46:35,420 - INFO:  Pristup konstanti Broj.JEDAN na liniji 60
INFO  11:46:35,420 - INFO:  Pozvana metoda inc na liniji 60
INFO  11:46:35,420 - INFO:  Pristup metodi inc na liniji 60
INFO  11:46:35,420 - INFO:  Pristup simbolu Broj na liniji 60
INFO  11:46:35,420 - INFO:  Pristup konstanti Broj.NULA na liniji 60
INFO  11:46:35,420 - INFO:  Pozvana metoda inc na liniji 60
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 61
INFO  11:46:35,420 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 64
INFO  11:46:35,420 - INFO:  Poziv READ funkcije na liniji 64
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 65
INFO  11:46:35,420 - INFO:  Pristup metodi inc na liniji 65
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 65
INFO  11:46:35,420 - INFO:  Pozvana metoda inc na liniji 65
INFO  11:46:35,420 - INFO:  Pristup simbolu bodovi na liniji 66
INFO  11:46:35,420 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:35,420 - INFO:  Deklarisan metod main na liniji 25
INFO  11:46:35,420 - ===================================
INFO  11:46:35,435 - Uspesno parsiranje!
INFO  11:46:41,631 - Compiling source file: C:\Users\Ana\git\pp1\MJCompiler\test\test301.mj
INFO  11:46:41,716 - #2 program
INFO  11:46:41,716 - #45 test301
INFO  11:46:41,716 - #29 enum
INFO  11:46:41,716 - #45 Broj
INFO  11:46:41,716 - #3 {
INFO  11:46:41,721 - #45 NULA
INFO  11:46:41,721 - #8 ,
INFO  11:46:41,721 - #45 JEDAN
INFO  11:46:41,721 - #8 ,
INFO  11:46:41,721 - #45 PET
INFO  11:46:41,721 - #12 =
INFO  11:46:41,721 - #42 5
INFO  11:46:41,721 - #8 ,
INFO  11:46:41,721 - #45 DESET
INFO  11:46:41,721 - #12 =
INFO  11:46:41,721 - #42 10
INFO  11:46:41,721 - #4 }
INFO  11:46:41,721 - #22 const
INFO  11:46:41,721 - #45 int
INFO  11:46:41,721 - #45 jedan
INFO  11:46:41,721 - #12 =
INFO  11:46:41,721 - #42 1
INFO  11:46:41,721 - #5 ;
INFO  11:46:41,721 - #22 const
INFO  11:46:41,721 - #45 int
INFO  11:46:41,721 - #45 pet
INFO  11:46:41,721 - #12 =
INFO  11:46:41,721 - #42 5
INFO  11:46:41,721 - #5 ;
INFO  11:46:41,721 - #45 int
INFO  11:46:41,721 - #45 niz
INFO  11:46:41,721 - #25 [
INFO  11:46:41,721 - #34 ]
INFO  11:46:41,721 - #5 ;
INFO  11:46:41,726 - #45 char
INFO  11:46:41,726 - #45 nizch
INFO  11:46:41,726 - #25 [
INFO  11:46:41,726 - #34 ]
INFO  11:46:41,726 - #5 ;
INFO  11:46:41,726 - #3 {
INFO  11:46:41,726 - #45 int
INFO  11:46:41,726 - #45 inc
INFO  11:46:41,726 - #6 (
INFO  11:46:41,726 - #45 int
INFO  11:46:41,726 - #45 broj
INFO  11:46:41,726 - #7 )
INFO  11:46:41,726 - #3 {
INFO  11:46:41,726 - #10 return
INFO  11:46:41,731 - #45 broj
INFO  11:46:41,731 - #11 +
INFO  11:46:41,731 - #45 Broj
INFO  11:46:41,736 - #15 .
INFO  11:46:41,736 - #45 JEDAN
INFO  11:46:41,736 - #5 ;
INFO  11:46:41,736 - #4 }
INFO  11:46:41,736 - #13 void
INFO  11:46:41,736 - #45 mul
INFO  11:46:41,736 - #6 (
INFO  11:46:41,736 - #45 int
INFO  11:46:41,736 - #45 arr
INFO  11:46:41,736 - #25 [
INFO  11:46:41,736 - #34 ]
INFO  11:46:41,736 - #8 ,
INFO  11:46:41,736 - #45 int
INFO  11:46:41,736 - #45 index
INFO  11:46:41,736 - #8 ,
INFO  11:46:41,736 - #45 int
INFO  11:46:41,736 - #45 b
INFO  11:46:41,736 - #7 )
INFO  11:46:41,736 - #3 {
INFO  11:46:41,736 - #45 arr
INFO  11:46:41,736 - #25 [
INFO  11:46:41,736 - #45 index
INFO  11:46:41,736 - #34 ]
INFO  11:46:41,736 - #12 =
INFO  11:46:41,736 - #45 arr
INFO  11:46:41,736 - #25 [
INFO  11:46:41,736 - #45 index
INFO  11:46:41,736 - #34 ]
INFO  11:46:41,736 - #30 *
INFO  11:46:41,736 - #45 b
INFO  11:46:41,741 - #5 ;
INFO  11:46:41,741 - #4 }
INFO  11:46:41,741 - #13 void
INFO  11:46:41,741 - #45 main
INFO  11:46:41,741 - #6 (
INFO  11:46:41,741 - #7 )
INFO  11:46:41,741 - #45 int
INFO  11:46:41,741 - #45 bodovi
INFO  11:46:41,741 - #5 ;
INFO  11:46:41,741 - #45 Broj
INFO  11:46:41,741 - #45 nula
INFO  11:46:41,741 - #8 ,
INFO  11:46:41,741 - #45 jedan
INFO  11:46:41,741 - #5 ;
INFO  11:46:41,741 - #3 {
INFO  11:46:41,741 - #45 nula
INFO  11:46:41,741 - #12 =
INFO  11:46:41,741 - #45 Broj
INFO  11:46:41,741 - #15 .
INFO  11:46:41,746 - #45 NULA
INFO  11:46:41,746 - #5 ;
INFO  11:46:41,746 - #45 jedan
INFO  11:46:41,746 - #12 =
INFO  11:46:41,746 - #45 Broj
INFO  11:46:41,746 - #15 .
INFO  11:46:41,746 - #45 JEDAN
INFO  11:46:41,746 - #5 ;
INFO  11:46:41,746 - #45 bodovi
INFO  11:46:41,746 - #12 =
INFO  11:46:41,746 - #42 0
INFO  11:46:41,746 - #5 ;
INFO  11:46:41,746 - #45 bodovi
INFO  11:46:41,746 - #38 ++
INFO  11:46:41,746 - #5 ;
INFO  11:46:41,746 - #45 bodovi
INFO  11:46:41,746 - #12 =
INFO  11:46:41,746 - #45 bodovi
INFO  11:46:41,746 - #11 +
INFO  11:46:41,746 - #45 Broj
INFO  11:46:41,746 - #15 .
INFO  11:46:41,746 - #45 JEDAN
INFO  11:46:41,746 - #5 ;
INFO  11:46:41,751 - #45 bodovi
INFO  11:46:41,751 - #12 =
INFO  11:46:41,751 - #45 bodovi
INFO  11:46:41,751 - #30 *
INFO  11:46:41,751 - #45 Broj
INFO  11:46:41,751 - #15 .
INFO  11:46:41,751 - #45 PET
INFO  11:46:41,751 - #5 ;
INFO  11:46:41,751 - #45 bodovi
INFO  11:46:41,751 - #21 --
INFO  11:46:41,751 - #5 ;
INFO  11:46:41,751 - #9 print
INFO  11:46:41,751 - #6 (
INFO  11:46:41,751 - #45 bodovi
INFO  11:46:41,751 - #7 )
INFO  11:46:41,751 - #5 ;
INFO  11:46:41,751 - #45 niz
INFO  11:46:41,751 - #12 =
INFO  11:46:41,751 - #18 new
INFO  11:46:41,751 - #45 int
INFO  11:46:41,751 - #25 [
INFO  11:46:41,751 - #42 2
INFO  11:46:41,751 - #34 ]
INFO  11:46:41,751 - #5 ;
INFO  11:46:41,751 - #45 niz
INFO  11:46:41,751 - #25 [
INFO  11:46:41,751 - #45 nula
INFO  11:46:41,751 - #34 ]
INFO  11:46:41,751 - #12 =
INFO  11:46:41,751 - #45 pet
INFO  11:46:41,751 - #5 ;
INFO  11:46:41,751 - #45 niz
INFO  11:46:41,751 - #25 [
INFO  11:46:41,751 - #42 1
INFO  11:46:41,751 - #34 ]
INFO  11:46:41,751 - #12 =
INFO  11:46:41,751 - #45 Broj
INFO  11:46:41,751 - #15 .
INFO  11:46:41,751 - #45 DESET
INFO  11:46:41,751 - #5 ;
INFO  11:46:41,751 - #45 mul
INFO  11:46:41,751 - #6 (
INFO  11:46:41,751 - #45 niz
INFO  11:46:41,751 - #8 ,
INFO  11:46:41,751 - #45 inc
INFO  11:46:41,751 - #6 (
INFO  11:46:41,751 - #42 0
INFO  11:46:41,751 - #7 )
INFO  11:46:41,751 - #8 ,
INFO  11:46:41,751 - #42 2
INFO  11:46:41,751 - #7 )
INFO  11:46:41,751 - #5 ;
INFO  11:46:41,756 - #45 mul
INFO  11:46:41,756 - #6 (
INFO  11:46:41,756 - #45 niz
INFO  11:46:41,756 - #8 ,
INFO  11:46:41,756 - #45 Broj
INFO  11:46:41,756 - #15 .
INFO  11:46:41,756 - #45 NULA
INFO  11:46:41,756 - #8 ,
INFO  11:46:41,756 - #45 inc
INFO  11:46:41,756 - #6 (
INFO  11:46:41,756 - #45 inc
INFO  11:46:41,756 - #6 (
INFO  11:46:41,756 - #45 Broj
INFO  11:46:41,756 - #15 .
INFO  11:46:41,756 - #45 JEDAN
INFO  11:46:41,756 - #7 )
INFO  11:46:41,756 - #11 +
INFO  11:46:41,756 - #42 1
INFO  11:46:41,756 - #7 )
INFO  11:46:41,756 - #7 )
INFO  11:46:41,756 - #5 ;
INFO  11:46:41,756 - #45 bodovi
INFO  11:46:41,756 - #12 =
INFO  11:46:41,756 - #45 niz
INFO  11:46:41,756 - #25 [
INFO  11:46:41,756 - #42 1
INFO  11:46:41,756 - #34 ]
INFO  11:46:41,756 - #27 /
INFO  11:46:41,756 - #45 niz
INFO  11:46:41,756 - #25 [
INFO  11:46:41,756 - #42 0
INFO  11:46:41,756 - #34 ]
INFO  11:46:41,756 - #5 ;
INFO  11:46:41,756 - #9 print
INFO  11:46:41,756 - #6 (
INFO  11:46:41,756 - #45 bodovi
INFO  11:46:41,756 - #7 )
INFO  11:46:41,756 - #5 ;
INFO  11:46:41,756 - #9 print
INFO  11:46:41,756 - #6 (
INFO  11:46:41,756 - #45 niz
INFO  11:46:41,756 - #25 [
INFO  11:46:41,756 - #45 Broj
INFO  11:46:41,756 - #15 .
INFO  11:46:41,756 - #45 JEDAN
INFO  11:46:41,756 - #34 ]
INFO  11:46:41,756 - #7 )
INFO  11:46:41,756 - #5 ;
INFO  11:46:41,756 - #45 nizch
INFO  11:46:41,756 - #12 =
INFO  11:46:41,756 - #18 new
INFO  11:46:41,756 - #45 char
INFO  11:46:41,756 - #25 [
INFO  11:46:41,756 - #42 3
INFO  11:46:41,756 - #34 ]
INFO  11:46:41,756 - #5 ;
INFO  11:46:41,756 - #45 nizch
INFO  11:46:41,756 - #25 [
INFO  11:46:41,756 - #42 0
INFO  11:46:41,756 - #34 ]
INFO  11:46:41,756 - #12 =
INFO  11:46:41,756 - #43 a
INFO  11:46:41,756 - #5 ;
INFO  11:46:41,756 - #45 nizch
INFO  11:46:41,756 - #25 [
INFO  11:46:41,756 - #45 jedan
INFO  11:46:41,756 - #34 ]
INFO  11:46:41,761 - #12 =
INFO  11:46:41,761 - #43 b
INFO  11:46:41,761 - #5 ;
INFO  11:46:41,761 - #45 nizch
INFO  11:46:41,761 - #25 [
INFO  11:46:41,761 - #45 pet
INFO  11:46:41,761 - #33 -
INFO  11:46:41,761 - #42 3
INFO  11:46:41,761 - #34 ]
INFO  11:46:41,761 - #12 =
INFO  11:46:41,761 - #43 c
INFO  11:46:41,761 - #5 ;
INFO  11:46:41,761 - #9 print
INFO  11:46:41,761 - #6 (
INFO  11:46:41,761 - #45 nizch
INFO  11:46:41,761 - #25 [
INFO  11:46:41,761 - #45 inc
INFO  11:46:41,761 - #6 (
INFO  11:46:41,761 - #42 0
INFO  11:46:41,761 - #7 )
INFO  11:46:41,761 - #34 ]
INFO  11:46:41,761 - #7 )
INFO  11:46:41,761 - #5 ;
INFO  11:46:41,761 - #9 print
INFO  11:46:41,761 - #6 (
INFO  11:46:41,761 - #45 nizch
INFO  11:46:41,761 - #25 [
INFO  11:46:41,761 - #45 jedan
INFO  11:46:41,761 - #30 *
INFO  11:46:41,761 - #42 2
INFO  11:46:41,761 - #34 ]
INFO  11:46:41,761 - #7 )
INFO  11:46:41,761 - #5 ;
INFO  11:46:41,761 - #45 bodovi
INFO  11:46:41,761 - #12 =
INFO  11:46:41,761 - #45 bodovi
INFO  11:46:41,761 - #11 +
INFO  11:46:41,761 - #6 (
INFO  11:46:41,761 - #6 (
INFO  11:46:41,761 - #45 pet
INFO  11:46:41,761 - #30 *
INFO  11:46:41,761 - #45 jedan
INFO  11:46:41,761 - #33 -
INFO  11:46:41,761 - #42 1
INFO  11:46:41,761 - #7 )
INFO  11:46:41,761 - #30 *
INFO  11:46:41,766 - #45 inc
INFO  11:46:41,766 - #6 (
INFO  11:46:41,766 - #45 Broj
INFO  11:46:41,766 - #15 .
INFO  11:46:41,766 - #45 JEDAN
INFO  11:46:41,766 - #7 )
INFO  11:46:41,766 - #33 -
INFO  11:46:41,766 - #6 (
INFO  11:46:41,766 - #42 3
INFO  11:46:41,766 - #24 %
INFO  11:46:41,766 - #42 2
INFO  11:46:41,766 - #11 +
INFO  11:46:41,766 - #42 3
INFO  11:46:41,766 - #30 *
INFO  11:46:41,766 - #42 2
INFO  11:46:41,766 - #33 -
INFO  11:46:41,766 - #42 3
INFO  11:46:41,766 - #7 )
INFO  11:46:41,766 - #33 -
INFO  11:46:41,766 - #45 inc
INFO  11:46:41,766 - #6 (
INFO  11:46:41,766 - #45 Broj
INFO  11:46:41,766 - #15 .
INFO  11:46:41,766 - #45 NULA
INFO  11:46:41,766 - #7 )
INFO  11:46:41,766 - #30 *
INFO  11:46:41,766 - #42 0
INFO  11:46:41,766 - #7 )
INFO  11:46:41,766 - #5 ;
INFO  11:46:41,766 - #9 print
INFO  11:46:41,766 - #6 (
INFO  11:46:41,766 - #45 bodovi
INFO  11:46:41,766 - #7 )
INFO  11:46:41,766 - #5 ;
INFO  11:46:41,766 - #26 read
INFO  11:46:41,766 - #6 (
INFO  11:46:41,766 - #45 bodovi
INFO  11:46:41,766 - #7 )
INFO  11:46:41,766 - #5 ;
INFO  11:46:41,766 - #45 bodovi
INFO  11:46:41,766 - #12 =
INFO  11:46:41,766 - #45 inc
INFO  11:46:41,766 - #6 (
INFO  11:46:41,766 - #45 bodovi
INFO  11:46:41,766 - #7 )
INFO  11:46:41,766 - #5 ;
INFO  11:46:41,766 - #9 print
INFO  11:46:41,766 - #6 (
INFO  11:46:41,766 - #45 bodovi
INFO  11:46:41,766 - #7 )
INFO  11:46:41,766 - #5 ;
INFO  11:46:41,766 - #4 }
INFO  11:46:41,766 - #4 }
INFO  11:46:41,791 - Program(
  ProgName(
   test301
  ) [ProgName]
  VarDeclLists(
    VarDeclLists(
      VarDeclLists(
        VarDeclLists(
          VarDeclLists(
            NoVarDecl(
            ) [NoVarDecl]
            EnumDeclaration(
              EnumDeclarations(
                EnumNamed(
                 Broj
                ) [EnumNamed]
                MultipleEnums(
                  MultipleEnums(
                    MultipleEnums(
                      SingleEnum(
                        NoInitEnum(
                         NULA
                        ) [NoInitEnum]
                      ) [SingleEnum]
                      NoInitEnum(
                       JEDAN
                      ) [NoInitEnum]
                    ) [MultipleEnums]
                    InitEnum(
                     PET
                     5
                    ) [InitEnum]
                  ) [MultipleEnums]
                  InitEnum(
                   DESET
                   10
                  ) [InitEnum]
                ) [MultipleEnums]
              ) [EnumDeclarations]
            ) [EnumDeclaration]
          ) [VarDeclLists]
          ConstDeclaration(
            ConstDeclarations(
              Type(
               int
              ) [Type]
              SingleConst(
                ConstItem(
                 jedan
                  InitializerNum(
                   1
                  ) [InitializerNum]
                ) [ConstItem]
              ) [SingleConst]
            ) [ConstDeclarations]
          ) [ConstDeclaration]
        ) [VarDeclLists]
        ConstDeclaration(
          ConstDeclarations(
            Type(
             int
            ) [Type]
            SingleConst(
              ConstItem(
               pet
                InitializerNum(
                 5
                ) [InitializerNum]
              ) [ConstItem]
            ) [SingleConst]
          ) [ConstDeclarations]
        ) [ConstDeclaration]
      ) [VarDeclLists]
      VarDeclaration(
        VarDeclarations(
          Type(
           int
          ) [Type]
          SingleVar(
            Var(
             niz
              ArrayVar(
              ) [ArrayVar]
            ) [Var]
          ) [SingleVar]
        ) [VarDeclarations]
      ) [VarDeclaration]
    ) [VarDeclLists]
    VarDeclaration(
      VarDeclarations(
        Type(
         char
        ) [Type]
        SingleVar(
          Var(
           nizch
            ArrayVar(
            ) [ArrayVar]
          ) [Var]
        ) [SingleVar]
      ) [VarDeclarations]
    ) [VarDeclaration]
  ) [VarDeclLists]
  GlobalMeths(
    OptMethods(
      OptMethods(
        OptMethods(
          NoOptMethods(
          ) [NoOptMethods]
          MethodDeclarations(
            MethodDeclTypeName(
              TypeIdentificator(
                Type(
                 int
                ) [Type]
              ) [TypeIdentificator]
             inc
            ) [MethodDeclTypeName]
            OptionalFormPars(
              SingleFormPars(
                FormParItem(
                  Type(
                   int
                  ) [Type]
                 broj
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [SingleFormPars]
            ) [OptionalFormPars]
            NoOptVars(
            ) [NoOptVars]
            OptionalStmt(
              NoOptionalStmt(
              ) [NoOptionalStmt]
              ReturnStmt(
                RetExpr(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           broj
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    WithAddTerms(
                      NoAddTerms(
                      ) [NoAddTerms]
                      PlusOp(
                      ) [PlusOp]
                      Terms(
                        DesignFactor(
                          DesignFld(
                            DesignVar(
                              DesignatorName(
                               Broj
                              ) [DesignatorName]
                            ) [DesignVar]
                           JEDAN
                          ) [DesignFld]
                          NoMethodCall(
                          ) [NoMethodCall]
                        ) [DesignFactor]
                        NoMulFacts(
                        ) [NoMulFacts]
                      ) [Terms]
                    ) [WithAddTerms]
                  ) [Expression]
                ) [RetExpr]
              ) [ReturnStmt]
            ) [OptionalStmt]
          ) [MethodDeclarations]
        ) [OptMethods]
        MethodDeclarations(
          MethodDeclTypeName(
            VoidIdentificator(
            ) [VoidIdentificator]
           mul
          ) [MethodDeclTypeName]
          OptionalFormPars(
            MultipleFormPars(
              MultipleFormPars(
                SingleFormPars(
                  FormParItem(
                    Type(
                     int
                    ) [Type]
                   arr
                    ArrayVar(
                    ) [ArrayVar]
                  ) [FormParItem]
                ) [SingleFormPars]
                FormParItem(
                  Type(
                   int
                  ) [Type]
                 index
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [FormParItem]
              ) [MultipleFormPars]
              FormParItem(
                Type(
                 int
                ) [Type]
               b
                NoArrayVar(
                ) [NoArrayVar]
              ) [FormParItem]
            ) [MultipleFormPars]
          ) [OptionalFormPars]
          NoOptVars(
          ) [NoOptVars]
          OptionalStmt(
            NoOptionalStmt(
            ) [NoOptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignArr(
                  DesignVar(
                    DesignatorName(
                     arr
                    ) [DesignatorName]
                  ) [DesignVar]
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           index
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                ) [DesignArr]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    DesignFactor(
                      DesignArr(
                        DesignVar(
                          DesignatorName(
                           arr
                          ) [DesignatorName]
                        ) [DesignVar]
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignVar(
                                DesignatorName(
                                 index
                                ) [DesignatorName]
                              ) [DesignVar]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                      ) [DesignArr]
                      NoMethodCall(
                      ) [NoMethodCall]
                    ) [DesignFactor]
                    WithMulFacts(
                      NoMulFacts(
                      ) [NoMulFacts]
                      MultOp(
                      ) [MultOp]
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           b
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                    ) [WithMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
        ) [MethodDeclarations]
      ) [OptMethods]
      MethodDeclarations(
        MethodDeclTypeName(
          VoidIdentificator(
          ) [VoidIdentificator]
         main
        ) [MethodDeclTypeName]
        NoOptionalFormPars(
        ) [NoOptionalFormPars]
        OptVars(
          OptVars(
            NoOptVars(
            ) [NoOptVars]
            VarDeclarations(
              Type(
               int
              ) [Type]
              SingleVar(
                Var(
                 bodovi
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
            ) [VarDeclarations]
          ) [OptVars]
          VarDeclarations(
            Type(
             Broj
            ) [Type]
            MultipleVars(
              SingleVar(
                Var(
                 nula
                  NoArrayVar(
                  ) [NoArrayVar]
                ) [Var]
              ) [SingleVar]
              Var(
               jedan
                NoArrayVar(
                ) [NoArrayVar]
              ) [Var]
            ) [MultipleVars]
          ) [VarDeclarations]
        ) [OptVars]
        OptionalStmt(
          OptionalStmt(
            OptionalStmt(
              OptionalStmt(
                OptionalStmt(
                  OptionalStmt(
                    OptionalStmt(
                      OptionalStmt(
                        OptionalStmt(
                          OptionalStmt(
                            OptionalStmt(
                              OptionalStmt(
                                OptionalStmt(
                                  OptionalStmt(
                                    OptionalStmt(
                                      OptionalStmt(
                                        OptionalStmt(
                                          OptionalStmt(
                                            OptionalStmt(
                                              OptionalStmt(
                                                OptionalStmt(
                                                  OptionalStmt(
                                                    OptionalStmt(
                                                      OptionalStmt(
                                                        OptionalStmt(
                                                          OptionalStmt(
                                                            OptionalStmt(
                                                              NoOptionalStmt(
                                                              ) [NoOptionalStmt]
                                                              DesignatorStmt(
                                                                AssignOper(
                                                                  DesignVar(
                                                                    DesignatorName(
                                                                     nula
                                                                    ) [DesignatorName]
                                                                  ) [DesignVar]
                                                                  AssignOperation(
                                                                  ) [AssignOperation]
                                                                  Expression(
                                                                    Positive(
                                                                    ) [Positive]
                                                                    Terms(
                                                                      DesignFactor(
                                                                        DesignFld(
                                                                          DesignVar(
                                                                            DesignatorName(
                                                                             Broj
                                                                            ) [DesignatorName]
                                                                          ) [DesignVar]
                                                                         NULA
                                                                        ) [DesignFld]
                                                                        NoMethodCall(
                                                                        ) [NoMethodCall]
                                                                      ) [DesignFactor]
                                                                      NoMulFacts(
                                                                      ) [NoMulFacts]
                                                                    ) [Terms]
                                                                    NoAddTerms(
                                                                    ) [NoAddTerms]
                                                                  ) [Expression]
                                                                ) [AssignOper]
                                                              ) [DesignatorStmt]
                                                            ) [OptionalStmt]
                                                            DesignatorStmt(
                                                              AssignOper(
                                                                DesignVar(
                                                                  DesignatorName(
                                                                   jedan
                                                                  ) [DesignatorName]
                                                                ) [DesignVar]
                                                                AssignOperation(
                                                                ) [AssignOperation]
                                                                Expression(
                                                                  Positive(
                                                                  ) [Positive]
                                                                  Terms(
                                                                    DesignFactor(
                                                                      DesignFld(
                                                                        DesignVar(
                                                                          DesignatorName(
                                                                           Broj
                                                                          ) [DesignatorName]
                                                                        ) [DesignVar]
                                                                       JEDAN
                                                                      ) [DesignFld]
                                                                      NoMethodCall(
                                                                      ) [NoMethodCall]
                                                                    ) [DesignFactor]
                                                                    NoMulFacts(
                                                                    ) [NoMulFacts]
                                                                  ) [Terms]
                                                                  NoAddTerms(
                                                                  ) [NoAddTerms]
                                                                ) [Expression]
                                                              ) [AssignOper]
                                                            ) [DesignatorStmt]
                                                          ) [OptionalStmt]
                                                          DesignatorStmt(
                                                            AssignOper(
                                                              DesignVar(
                                                                DesignatorName(
                                                                 bodovi
                                                                ) [DesignatorName]
                                                              ) [DesignVar]
                                                              AssignOperation(
                                                              ) [AssignOperation]
                                                              Expression(
                                                                Positive(
                                                                ) [Positive]
                                                                Terms(
                                                                  NumFactor(
                                                                   0
                                                                  ) [NumFactor]
                                                                  NoMulFacts(
                                                                  ) [NoMulFacts]
                                                                ) [Terms]
                                                                NoAddTerms(
                                                                ) [NoAddTerms]
                                                              ) [Expression]
                                                            ) [AssignOper]
                                                          ) [DesignatorStmt]
                                                        ) [OptionalStmt]
                                                        DesignatorStmt(
                                                          PlusPlusSideEff(
                                                            DesignVar(
                                                              DesignatorName(
                                                               bodovi
                                                              ) [DesignatorName]
                                                            ) [DesignVar]
                                                          ) [PlusPlusSideEff]
                                                        ) [DesignatorStmt]
                                                      ) [OptionalStmt]
                                                      DesignatorStmt(
                                                        AssignOper(
                                                          DesignVar(
                                                            DesignatorName(
                                                             bodovi
                                                            ) [DesignatorName]
                                                          ) [DesignVar]
                                                          AssignOperation(
                                                          ) [AssignOperation]
                                                          Expression(
                                                            Positive(
                                                            ) [Positive]
                                                            Terms(
                                                              DesignFactor(
                                                                DesignVar(
                                                                  DesignatorName(
                                                                   bodovi
                                                                  ) [DesignatorName]
                                                                ) [DesignVar]
                                                                NoMethodCall(
                                                                ) [NoMethodCall]
                                                              ) [DesignFactor]
                                                              NoMulFacts(
                                                              ) [NoMulFacts]
                                                            ) [Terms]
                                                            WithAddTerms(
                                                              NoAddTerms(
                                                              ) [NoAddTerms]
                                                              PlusOp(
                                                              ) [PlusOp]
                                                              Terms(
                                                                DesignFactor(
                                                                  DesignFld(
                                                                    DesignVar(
                                                                      DesignatorName(
                                                                       Broj
                                                                      ) [DesignatorName]
                                                                    ) [DesignVar]
                                                                   JEDAN
                                                                  ) [DesignFld]
                                                                  NoMethodCall(
                                                                  ) [NoMethodCall]
                                                                ) [DesignFactor]
                                                                NoMulFacts(
                                                                ) [NoMulFacts]
                                                              ) [Terms]
                                                            ) [WithAddTerms]
                                                          ) [Expression]
                                                        ) [AssignOper]
                                                      ) [DesignatorStmt]
                                                    ) [OptionalStmt]
                                                    DesignatorStmt(
                                                      AssignOper(
                                                        DesignVar(
                                                          DesignatorName(
                                                           bodovi
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        AssignOperation(
                                                        ) [AssignOperation]
                                                        Expression(
                                                          Positive(
                                                          ) [Positive]
                                                          Terms(
                                                            DesignFactor(
                                                              DesignVar(
                                                                DesignatorName(
                                                                 bodovi
                                                                ) [DesignatorName]
                                                              ) [DesignVar]
                                                              NoMethodCall(
                                                              ) [NoMethodCall]
                                                            ) [DesignFactor]
                                                            WithMulFacts(
                                                              NoMulFacts(
                                                              ) [NoMulFacts]
                                                              MultOp(
                                                              ) [MultOp]
                                                              DesignFactor(
                                                                DesignFld(
                                                                  DesignVar(
                                                                    DesignatorName(
                                                                     Broj
                                                                    ) [DesignatorName]
                                                                  ) [DesignVar]
                                                                 PET
                                                                ) [DesignFld]
                                                                NoMethodCall(
                                                                ) [NoMethodCall]
                                                              ) [DesignFactor]
                                                            ) [WithMulFacts]
                                                          ) [Terms]
                                                          NoAddTerms(
                                                          ) [NoAddTerms]
                                                        ) [Expression]
                                                      ) [AssignOper]
                                                    ) [DesignatorStmt]
                                                  ) [OptionalStmt]
                                                  DesignatorStmt(
                                                    MinusMinusSideEff(
                                                      DesignVar(
                                                        DesignatorName(
                                                         bodovi
                                                        ) [DesignatorName]
                                                      ) [DesignVar]
                                                    ) [MinusMinusSideEff]
                                                  ) [DesignatorStmt]
                                                ) [OptionalStmt]
                                                PrintStmt(
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      DesignFactor(
                                                        DesignVar(
                                                          DesignatorName(
                                                           bodovi
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        NoMethodCall(
                                                        ) [NoMethodCall]
                                                      ) [DesignFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                  OptNumConstDerived2(
                                                  ) [OptNumConstDerived2]
                                                ) [PrintStmt]
                                              ) [OptionalStmt]
                                              DesignatorStmt(
                                                AssignOper(
                                                  DesignVar(
                                                    DesignatorName(
                                                     niz
                                                    ) [DesignatorName]
                                                  ) [DesignVar]
                                                  AssignOperation(
                                                  ) [AssignOperation]
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      NewArrFactor(
                                                        Type(
                                                         int
                                                        ) [Type]
                                                        Expression(
                                                          Positive(
                                                          ) [Positive]
                                                          Terms(
                                                            NumFactor(
                                                             2
                                                            ) [NumFactor]
                                                            NoMulFacts(
                                                            ) [NoMulFacts]
                                                          ) [Terms]
                                                          NoAddTerms(
                                                          ) [NoAddTerms]
                                                        ) [Expression]
                                                      ) [NewArrFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [AssignOper]
                                              ) [DesignatorStmt]
                                            ) [OptionalStmt]
                                            DesignatorStmt(
                                              AssignOper(
                                                DesignArr(
                                                  DesignVar(
                                                    DesignatorName(
                                                     niz
                                                    ) [DesignatorName]
                                                  ) [DesignVar]
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      DesignFactor(
                                                        DesignVar(
                                                          DesignatorName(
                                                           nula
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        NoMethodCall(
                                                        ) [NoMethodCall]
                                                      ) [DesignFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [DesignArr]
                                                AssignOperation(
                                                ) [AssignOperation]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    DesignFactor(
                                                      DesignVar(
                                                        DesignatorName(
                                                         pet
                                                        ) [DesignatorName]
                                                      ) [DesignVar]
                                                      NoMethodCall(
                                                      ) [NoMethodCall]
                                                    ) [DesignFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [AssignOper]
                                            ) [DesignatorStmt]
                                          ) [OptionalStmt]
                                          DesignatorStmt(
                                            AssignOper(
                                              DesignArr(
                                                DesignVar(
                                                  DesignatorName(
                                                   niz
                                                  ) [DesignatorName]
                                                ) [DesignVar]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    NumFactor(
                                                     1
                                                    ) [NumFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [DesignArr]
                                              AssignOperation(
                                              ) [AssignOperation]
                                              Expression(
                                                Positive(
                                                ) [Positive]
                                                Terms(
                                                  DesignFactor(
                                                    DesignFld(
                                                      DesignVar(
                                                        DesignatorName(
                                                         Broj
                                                        ) [DesignatorName]
                                                      ) [DesignVar]
                                                     DESET
                                                    ) [DesignFld]
                                                    NoMethodCall(
                                                    ) [NoMethodCall]
                                                  ) [DesignFactor]
                                                  NoMulFacts(
                                                  ) [NoMulFacts]
                                                ) [Terms]
                                                NoAddTerms(
                                                ) [NoAddTerms]
                                              ) [Expression]
                                            ) [AssignOper]
                                          ) [DesignatorStmt]
                                        ) [OptionalStmt]
                                        DesignatorStmt(
                                          ProcCall(
                                            DesignVar(
                                              DesignatorName(
                                               mul
                                              ) [DesignatorName]
                                            ) [DesignVar]
                                            WithActPars(
                                              MultiActPars(
                                                MultiActPars(
                                                  SingleActPars(
                                                    Expression(
                                                      Positive(
                                                      ) [Positive]
                                                      Terms(
                                                        DesignFactor(
                                                          DesignVar(
                                                            DesignatorName(
                                                             niz
                                                            ) [DesignatorName]
                                                          ) [DesignVar]
                                                          NoMethodCall(
                                                          ) [NoMethodCall]
                                                        ) [DesignFactor]
                                                        NoMulFacts(
                                                        ) [NoMulFacts]
                                                      ) [Terms]
                                                      NoAddTerms(
                                                      ) [NoAddTerms]
                                                    ) [Expression]
                                                  ) [SingleActPars]
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      DesignFactor(
                                                        DesignVar(
                                                          DesignatorName(
                                                           inc
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        WithMethodCall(
                                                          WithActPars(
                                                            SingleActPars(
                                                              Expression(
                                                                Positive(
                                                                ) [Positive]
                                                                Terms(
                                                                  NumFactor(
                                                                   0
                                                                  ) [NumFactor]
                                                                  NoMulFacts(
                                                                  ) [NoMulFacts]
                                                                ) [Terms]
                                                                NoAddTerms(
                                                                ) [NoAddTerms]
                                                              ) [Expression]
                                                            ) [SingleActPars]
                                                          ) [WithActPars]
                                                        ) [WithMethodCall]
                                                      ) [DesignFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [MultiActPars]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    NumFactor(
                                                     2
                                                    ) [NumFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [MultiActPars]
                                            ) [WithActPars]
                                          ) [ProcCall]
                                        ) [DesignatorStmt]
                                      ) [OptionalStmt]
                                      DesignatorStmt(
                                        ProcCall(
                                          DesignVar(
                                            DesignatorName(
                                             mul
                                            ) [DesignatorName]
                                          ) [DesignVar]
                                          WithActPars(
                                            MultiActPars(
                                              MultiActPars(
                                                SingleActPars(
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      DesignFactor(
                                                        DesignVar(
                                                          DesignatorName(
                                                           niz
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                        NoMethodCall(
                                                        ) [NoMethodCall]
                                                      ) [DesignFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [SingleActPars]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    DesignFactor(
                                                      DesignFld(
                                                        DesignVar(
                                                          DesignatorName(
                                                           Broj
                                                          ) [DesignatorName]
                                                        ) [DesignVar]
                                                       NULA
                                                      ) [DesignFld]
                                                      NoMethodCall(
                                                      ) [NoMethodCall]
                                                    ) [DesignFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [MultiActPars]
                                              Expression(
                                                Positive(
                                                ) [Positive]
                                                Terms(
                                                  DesignFactor(
                                                    DesignVar(
                                                      DesignatorName(
                                                       inc
                                                      ) [DesignatorName]
                                                    ) [DesignVar]
                                                    WithMethodCall(
                                                      WithActPars(
                                                        SingleActPars(
                                                          Expression(
                                                            Positive(
                                                            ) [Positive]
                                                            Terms(
                                                              DesignFactor(
                                                                DesignVar(
                                                                  DesignatorName(
                                                                   inc
                                                                  ) [DesignatorName]
                                                                ) [DesignVar]
                                                                WithMethodCall(
                                                                  WithActPars(
                                                                    SingleActPars(
                                                                      Expression(
                                                                        Positive(
                                                                        ) [Positive]
                                                                        Terms(
                                                                          DesignFactor(
                                                                            DesignFld(
                                                                              DesignVar(
                                                                                DesignatorName(
                                                                                 Broj
                                                                                ) [DesignatorName]
                                                                              ) [DesignVar]
                                                                             JEDAN
                                                                            ) [DesignFld]
                                                                            NoMethodCall(
                                                                            ) [NoMethodCall]
                                                                          ) [DesignFactor]
                                                                          NoMulFacts(
                                                                          ) [NoMulFacts]
                                                                        ) [Terms]
                                                                        NoAddTerms(
                                                                        ) [NoAddTerms]
                                                                      ) [Expression]
                                                                    ) [SingleActPars]
                                                                  ) [WithActPars]
                                                                ) [WithMethodCall]
                                                              ) [DesignFactor]
                                                              NoMulFacts(
                                                              ) [NoMulFacts]
                                                            ) [Terms]
                                                            WithAddTerms(
                                                              NoAddTerms(
                                                              ) [NoAddTerms]
                                                              PlusOp(
                                                              ) [PlusOp]
                                                              Terms(
                                                                NumFactor(
                                                                 1
                                                                ) [NumFactor]
                                                                NoMulFacts(
                                                                ) [NoMulFacts]
                                                              ) [Terms]
                                                            ) [WithAddTerms]
                                                          ) [Expression]
                                                        ) [SingleActPars]
                                                      ) [WithActPars]
                                                    ) [WithMethodCall]
                                                  ) [DesignFactor]
                                                  NoMulFacts(
                                                  ) [NoMulFacts]
                                                ) [Terms]
                                                NoAddTerms(
                                                ) [NoAddTerms]
                                              ) [Expression]
                                            ) [MultiActPars]
                                          ) [WithActPars]
                                        ) [ProcCall]
                                      ) [DesignatorStmt]
                                    ) [OptionalStmt]
                                    DesignatorStmt(
                                      AssignOper(
                                        DesignVar(
                                          DesignatorName(
                                           bodovi
                                          ) [DesignatorName]
                                        ) [DesignVar]
                                        AssignOperation(
                                        ) [AssignOperation]
                                        Expression(
                                          Positive(
                                          ) [Positive]
                                          Terms(
                                            DesignFactor(
                                              DesignArr(
                                                DesignVar(
                                                  DesignatorName(
                                                   niz
                                                  ) [DesignatorName]
                                                ) [DesignVar]
                                                Expression(
                                                  Positive(
                                                  ) [Positive]
                                                  Terms(
                                                    NumFactor(
                                                     1
                                                    ) [NumFactor]
                                                    NoMulFacts(
                                                    ) [NoMulFacts]
                                                  ) [Terms]
                                                  NoAddTerms(
                                                  ) [NoAddTerms]
                                                ) [Expression]
                                              ) [DesignArr]
                                              NoMethodCall(
                                              ) [NoMethodCall]
                                            ) [DesignFactor]
                                            WithMulFacts(
                                              NoMulFacts(
                                              ) [NoMulFacts]
                                              DivOp(
                                              ) [DivOp]
                                              DesignFactor(
                                                DesignArr(
                                                  DesignVar(
                                                    DesignatorName(
                                                     niz
                                                    ) [DesignatorName]
                                                  ) [DesignVar]
                                                  Expression(
                                                    Positive(
                                                    ) [Positive]
                                                    Terms(
                                                      NumFactor(
                                                       0
                                                      ) [NumFactor]
                                                      NoMulFacts(
                                                      ) [NoMulFacts]
                                                    ) [Terms]
                                                    NoAddTerms(
                                                    ) [NoAddTerms]
                                                  ) [Expression]
                                                ) [DesignArr]
                                                NoMethodCall(
                                                ) [NoMethodCall]
                                              ) [DesignFactor]
                                            ) [WithMulFacts]
                                          ) [Terms]
                                          NoAddTerms(
                                          ) [NoAddTerms]
                                        ) [Expression]
                                      ) [AssignOper]
                                    ) [DesignatorStmt]
                                  ) [OptionalStmt]
                                  PrintStmt(
                                    Expression(
                                      Positive(
                                      ) [Positive]
                                      Terms(
                                        DesignFactor(
                                          DesignVar(
                                            DesignatorName(
                                             bodovi
                                            ) [DesignatorName]
                                          ) [DesignVar]
                                          NoMethodCall(
                                          ) [NoMethodCall]
                                        ) [DesignFactor]
                                        NoMulFacts(
                                        ) [NoMulFacts]
                                      ) [Terms]
                                      NoAddTerms(
                                      ) [NoAddTerms]
                                    ) [Expression]
                                    OptNumConstDerived2(
                                    ) [OptNumConstDerived2]
                                  ) [PrintStmt]
                                ) [OptionalStmt]
                                PrintStmt(
                                  Expression(
                                    Positive(
                                    ) [Positive]
                                    Terms(
                                      DesignFactor(
                                        DesignArr(
                                          DesignVar(
                                            DesignatorName(
                                             niz
                                            ) [DesignatorName]
                                          ) [DesignVar]
                                          Expression(
                                            Positive(
                                            ) [Positive]
                                            Terms(
                                              DesignFactor(
                                                DesignFld(
                                                  DesignVar(
                                                    DesignatorName(
                                                     Broj
                                                    ) [DesignatorName]
                                                  ) [DesignVar]
                                                 JEDAN
                                                ) [DesignFld]
                                                NoMethodCall(
                                                ) [NoMethodCall]
                                              ) [DesignFactor]
                                              NoMulFacts(
                                              ) [NoMulFacts]
                                            ) [Terms]
                                            NoAddTerms(
                                            ) [NoAddTerms]
                                          ) [Expression]
                                        ) [DesignArr]
                                        NoMethodCall(
                                        ) [NoMethodCall]
                                      ) [DesignFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                  ) [Expression]
                                  OptNumConstDerived2(
                                  ) [OptNumConstDerived2]
                                ) [PrintStmt]
                              ) [OptionalStmt]
                              DesignatorStmt(
                                AssignOper(
                                  DesignVar(
                                    DesignatorName(
                                     nizch
                                    ) [DesignatorName]
                                  ) [DesignVar]
                                  AssignOperation(
                                  ) [AssignOperation]
                                  Expression(
                                    Positive(
                                    ) [Positive]
                                    Terms(
                                      NewArrFactor(
                                        Type(
                                         char
                                        ) [Type]
                                        Expression(
                                          Positive(
                                          ) [Positive]
                                          Terms(
                                            NumFactor(
                                             3
                                            ) [NumFactor]
                                            NoMulFacts(
                                            ) [NoMulFacts]
                                          ) [Terms]
                                          NoAddTerms(
                                          ) [NoAddTerms]
                                        ) [Expression]
                                      ) [NewArrFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                  ) [Expression]
                                ) [AssignOper]
                              ) [DesignatorStmt]
                            ) [OptionalStmt]
                            DesignatorStmt(
                              AssignOper(
                                DesignArr(
                                  DesignVar(
                                    DesignatorName(
                                     nizch
                                    ) [DesignatorName]
                                  ) [DesignVar]
                                  Expression(
                                    Positive(
                                    ) [Positive]
                                    Terms(
                                      NumFactor(
                                       0
                                      ) [NumFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                  ) [Expression]
                                ) [DesignArr]
                                AssignOperation(
                                ) [AssignOperation]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    CharFactor(
                                     a
                                    ) [CharFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [AssignOper]
                            ) [DesignatorStmt]
                          ) [OptionalStmt]
                          DesignatorStmt(
                            AssignOper(
                              DesignArr(
                                DesignVar(
                                  DesignatorName(
                                   nizch
                                  ) [DesignatorName]
                                ) [DesignVar]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    DesignFactor(
                                      DesignVar(
                                        DesignatorName(
                                         jedan
                                        ) [DesignatorName]
                                      ) [DesignVar]
                                      NoMethodCall(
                                      ) [NoMethodCall]
                                    ) [DesignFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [DesignArr]
                              AssignOperation(
                              ) [AssignOperation]
                              Expression(
                                Positive(
                                ) [Positive]
                                Terms(
                                  CharFactor(
                                   b
                                  ) [CharFactor]
                                  NoMulFacts(
                                  ) [NoMulFacts]
                                ) [Terms]
                                NoAddTerms(
                                ) [NoAddTerms]
                              ) [Expression]
                            ) [AssignOper]
                          ) [DesignatorStmt]
                        ) [OptionalStmt]
                        DesignatorStmt(
                          AssignOper(
                            DesignArr(
                              DesignVar(
                                DesignatorName(
                                 nizch
                                ) [DesignatorName]
                              ) [DesignVar]
                              Expression(
                                Positive(
                                ) [Positive]
                                Terms(
                                  DesignFactor(
                                    DesignVar(
                                      DesignatorName(
                                       pet
                                      ) [DesignatorName]
                                    ) [DesignVar]
                                    NoMethodCall(
                                    ) [NoMethodCall]
                                  ) [DesignFactor]
                                  NoMulFacts(
                                  ) [NoMulFacts]
                                ) [Terms]
                                WithAddTerms(
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                  MinusOp(
                                  ) [MinusOp]
                                  Terms(
                                    NumFactor(
                                     3
                                    ) [NumFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                ) [WithAddTerms]
                              ) [Expression]
                            ) [DesignArr]
                            AssignOperation(
                            ) [AssignOperation]
                            Expression(
                              Positive(
                              ) [Positive]
                              Terms(
                                CharFactor(
                                 c
                                ) [CharFactor]
                                NoMulFacts(
                                ) [NoMulFacts]
                              ) [Terms]
                              NoAddTerms(
                              ) [NoAddTerms]
                            ) [Expression]
                          ) [AssignOper]
                        ) [DesignatorStmt]
                      ) [OptionalStmt]
                      PrintStmt(
                        Expression(
                          Positive(
                          ) [Positive]
                          Terms(
                            DesignFactor(
                              DesignArr(
                                DesignVar(
                                  DesignatorName(
                                   nizch
                                  ) [DesignatorName]
                                ) [DesignVar]
                                Expression(
                                  Positive(
                                  ) [Positive]
                                  Terms(
                                    DesignFactor(
                                      DesignVar(
                                        DesignatorName(
                                         inc
                                        ) [DesignatorName]
                                      ) [DesignVar]
                                      WithMethodCall(
                                        WithActPars(
                                          SingleActPars(
                                            Expression(
                                              Positive(
                                              ) [Positive]
                                              Terms(
                                                NumFactor(
                                                 0
                                                ) [NumFactor]
                                                NoMulFacts(
                                                ) [NoMulFacts]
                                              ) [Terms]
                                              NoAddTerms(
                                              ) [NoAddTerms]
                                            ) [Expression]
                                          ) [SingleActPars]
                                        ) [WithActPars]
                                      ) [WithMethodCall]
                                    ) [DesignFactor]
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                  ) [Terms]
                                  NoAddTerms(
                                  ) [NoAddTerms]
                                ) [Expression]
                              ) [DesignArr]
                              NoMethodCall(
                              ) [NoMethodCall]
                            ) [DesignFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                          NoAddTerms(
                          ) [NoAddTerms]
                        ) [Expression]
                        OptNumConstDerived2(
                        ) [OptNumConstDerived2]
                      ) [PrintStmt]
                    ) [OptionalStmt]
                    PrintStmt(
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          DesignFactor(
                            DesignArr(
                              DesignVar(
                                DesignatorName(
                                 nizch
                                ) [DesignatorName]
                              ) [DesignVar]
                              Expression(
                                Positive(
                                ) [Positive]
                                Terms(
                                  DesignFactor(
                                    DesignVar(
                                      DesignatorName(
                                       jedan
                                      ) [DesignatorName]
                                    ) [DesignVar]
                                    NoMethodCall(
                                    ) [NoMethodCall]
                                  ) [DesignFactor]
                                  WithMulFacts(
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                    MultOp(
                                    ) [MultOp]
                                    NumFactor(
                                     2
                                    ) [NumFactor]
                                  ) [WithMulFacts]
                                ) [Terms]
                                NoAddTerms(
                                ) [NoAddTerms]
                              ) [Expression]
                            ) [DesignArr]
                            NoMethodCall(
                            ) [NoMethodCall]
                          ) [DesignFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        NoAddTerms(
                        ) [NoAddTerms]
                      ) [Expression]
                      OptNumConstDerived2(
                      ) [OptNumConstDerived2]
                    ) [PrintStmt]
                  ) [OptionalStmt]
                  DesignatorStmt(
                    AssignOper(
                      DesignVar(
                        DesignatorName(
                         bodovi
                        ) [DesignatorName]
                      ) [DesignVar]
                      AssignOperation(
                      ) [AssignOperation]
                      Expression(
                        Positive(
                        ) [Positive]
                        Terms(
                          DesignFactor(
                            DesignVar(
                              DesignatorName(
                               bodovi
                              ) [DesignatorName]
                            ) [DesignVar]
                            NoMethodCall(
                            ) [NoMethodCall]
                          ) [DesignFactor]
                          NoMulFacts(
                          ) [NoMulFacts]
                        ) [Terms]
                        WithAddTerms(
                          NoAddTerms(
                          ) [NoAddTerms]
                          PlusOp(
                          ) [PlusOp]
                          Terms(
                            ExprFactor(
                              Expression(
                                Positive(
                                ) [Positive]
                                Terms(
                                  ExprFactor(
                                    Expression(
                                      Positive(
                                      ) [Positive]
                                      Terms(
                                        DesignFactor(
                                          DesignVar(
                                            DesignatorName(
                                             pet
                                            ) [DesignatorName]
                                          ) [DesignVar]
                                          NoMethodCall(
                                          ) [NoMethodCall]
                                        ) [DesignFactor]
                                        WithMulFacts(
                                          NoMulFacts(
                                          ) [NoMulFacts]
                                          MultOp(
                                          ) [MultOp]
                                          DesignFactor(
                                            DesignVar(
                                              DesignatorName(
                                               jedan
                                              ) [DesignatorName]
                                            ) [DesignVar]
                                            NoMethodCall(
                                            ) [NoMethodCall]
                                          ) [DesignFactor]
                                        ) [WithMulFacts]
                                      ) [Terms]
                                      WithAddTerms(
                                        NoAddTerms(
                                        ) [NoAddTerms]
                                        MinusOp(
                                        ) [MinusOp]
                                        Terms(
                                          NumFactor(
                                           1
                                          ) [NumFactor]
                                          NoMulFacts(
                                          ) [NoMulFacts]
                                        ) [Terms]
                                      ) [WithAddTerms]
                                    ) [Expression]
                                  ) [ExprFactor]
                                  WithMulFacts(
                                    NoMulFacts(
                                    ) [NoMulFacts]
                                    MultOp(
                                    ) [MultOp]
                                    DesignFactor(
                                      DesignVar(
                                        DesignatorName(
                                         inc
                                        ) [DesignatorName]
                                      ) [DesignVar]
                                      WithMethodCall(
                                        WithActPars(
                                          SingleActPars(
                                            Expression(
                                              Positive(
                                              ) [Positive]
                                              Terms(
                                                DesignFactor(
                                                  DesignFld(
                                                    DesignVar(
                                                      DesignatorName(
                                                       Broj
                                                      ) [DesignatorName]
                                                    ) [DesignVar]
                                                   JEDAN
                                                  ) [DesignFld]
                                                  NoMethodCall(
                                                  ) [NoMethodCall]
                                                ) [DesignFactor]
                                                NoMulFacts(
                                                ) [NoMulFacts]
                                              ) [Terms]
                                              NoAddTerms(
                                              ) [NoAddTerms]
                                            ) [Expression]
                                          ) [SingleActPars]
                                        ) [WithActPars]
                                      ) [WithMethodCall]
                                    ) [DesignFactor]
                                  ) [WithMulFacts]
                                ) [Terms]
                                WithAddTerms(
                                  WithAddTerms(
                                    NoAddTerms(
                                    ) [NoAddTerms]
                                    MinusOp(
                                    ) [MinusOp]
                                    Terms(
                                      ExprFactor(
                                        Expression(
                                          Positive(
                                          ) [Positive]
                                          Terms(
                                            NumFactor(
                                             3
                                            ) [NumFactor]
                                            WithMulFacts(
                                              NoMulFacts(
                                              ) [NoMulFacts]
                                              ModOp(
                                              ) [ModOp]
                                              NumFactor(
                                               2
                                              ) [NumFactor]
                                            ) [WithMulFacts]
                                          ) [Terms]
                                          WithAddTerms(
                                            WithAddTerms(
                                              NoAddTerms(
                                              ) [NoAddTerms]
                                              PlusOp(
                                              ) [PlusOp]
                                              Terms(
                                                NumFactor(
                                                 3
                                                ) [NumFactor]
                                                WithMulFacts(
                                                  NoMulFacts(
                                                  ) [NoMulFacts]
                                                  MultOp(
                                                  ) [MultOp]
                                                  NumFactor(
                                                   2
                                                  ) [NumFactor]
                                                ) [WithMulFacts]
                                              ) [Terms]
                                            ) [WithAddTerms]
                                            MinusOp(
                                            ) [MinusOp]
                                            Terms(
                                              NumFactor(
                                               3
                                              ) [NumFactor]
                                              NoMulFacts(
                                              ) [NoMulFacts]
                                            ) [Terms]
                                          ) [WithAddTerms]
                                        ) [Expression]
                                      ) [ExprFactor]
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                    ) [Terms]
                                  ) [WithAddTerms]
                                  MinusOp(
                                  ) [MinusOp]
                                  Terms(
                                    DesignFactor(
                                      DesignVar(
                                        DesignatorName(
                                         inc
                                        ) [DesignatorName]
                                      ) [DesignVar]
                                      WithMethodCall(
                                        WithActPars(
                                          SingleActPars(
                                            Expression(
                                              Positive(
                                              ) [Positive]
                                              Terms(
                                                DesignFactor(
                                                  DesignFld(
                                                    DesignVar(
                                                      DesignatorName(
                                                       Broj
                                                      ) [DesignatorName]
                                                    ) [DesignVar]
                                                   NULA
                                                  ) [DesignFld]
                                                  NoMethodCall(
                                                  ) [NoMethodCall]
                                                ) [DesignFactor]
                                                NoMulFacts(
                                                ) [NoMulFacts]
                                              ) [Terms]
                                              NoAddTerms(
                                              ) [NoAddTerms]
                                            ) [Expression]
                                          ) [SingleActPars]
                                        ) [WithActPars]
                                      ) [WithMethodCall]
                                    ) [DesignFactor]
                                    WithMulFacts(
                                      NoMulFacts(
                                      ) [NoMulFacts]
                                      MultOp(
                                      ) [MultOp]
                                      NumFactor(
                                       0
                                      ) [NumFactor]
                                    ) [WithMulFacts]
                                  ) [Terms]
                                ) [WithAddTerms]
                              ) [Expression]
                            ) [ExprFactor]
                            NoMulFacts(
                            ) [NoMulFacts]
                          ) [Terms]
                        ) [WithAddTerms]
                      ) [Expression]
                    ) [AssignOper]
                  ) [DesignatorStmt]
                ) [OptionalStmt]
                PrintStmt(
                  Expression(
                    Positive(
                    ) [Positive]
                    Terms(
                      DesignFactor(
                        DesignVar(
                          DesignatorName(
                           bodovi
                          ) [DesignatorName]
                        ) [DesignVar]
                        NoMethodCall(
                        ) [NoMethodCall]
                      ) [DesignFactor]
                      NoMulFacts(
                      ) [NoMulFacts]
                    ) [Terms]
                    NoAddTerms(
                    ) [NoAddTerms]
                  ) [Expression]
                  OptNumConstDerived2(
                  ) [OptNumConstDerived2]
                ) [PrintStmt]
              ) [OptionalStmt]
              ReadStmt(
                DesignVar(
                  DesignatorName(
                   bodovi
                  ) [DesignatorName]
                ) [DesignVar]
              ) [ReadStmt]
            ) [OptionalStmt]
            DesignatorStmt(
              AssignOper(
                DesignVar(
                  DesignatorName(
                   bodovi
                  ) [DesignatorName]
                ) [DesignVar]
                AssignOperation(
                ) [AssignOperation]
                Expression(
                  Positive(
                  ) [Positive]
                  Terms(
                    DesignFactor(
                      DesignVar(
                        DesignatorName(
                         inc
                        ) [DesignatorName]
                      ) [DesignVar]
                      WithMethodCall(
                        WithActPars(
                          SingleActPars(
                            Expression(
                              Positive(
                              ) [Positive]
                              Terms(
                                DesignFactor(
                                  DesignVar(
                                    DesignatorName(
                                     bodovi
                                    ) [DesignatorName]
                                  ) [DesignVar]
                                  NoMethodCall(
                                  ) [NoMethodCall]
                                ) [DesignFactor]
                                NoMulFacts(
                                ) [NoMulFacts]
                              ) [Terms]
                              NoAddTerms(
                              ) [NoAddTerms]
                            ) [Expression]
                          ) [SingleActPars]
                        ) [WithActPars]
                      ) [WithMethodCall]
                    ) [DesignFactor]
                    NoMulFacts(
                    ) [NoMulFacts]
                  ) [Terms]
                  NoAddTerms(
                  ) [NoAddTerms]
                ) [Expression]
              ) [AssignOper]
            ) [DesignatorStmt]
          ) [OptionalStmt]
          PrintStmt(
            Expression(
              Positive(
              ) [Positive]
              Terms(
                DesignFactor(
                  DesignVar(
                    DesignatorName(
                     bodovi
                    ) [DesignatorName]
                  ) [DesignVar]
                  NoMethodCall(
                  ) [NoMethodCall]
                ) [DesignFactor]
                NoMulFacts(
                ) [NoMulFacts]
              ) [Terms]
              NoAddTerms(
              ) [NoAddTerms]
            ) [Expression]
            OptNumConstDerived2(
            ) [OptNumConstDerived2]
          ) [PrintStmt]
        ) [OptionalStmt]
      ) [MethodDeclarations]
    ) [OptMethods]
  ) [GlobalMeths]
) [Program]
INFO  11:46:41,796 - ===================================
INFO  11:46:41,796 - INFO:  Pocetak programa test301 na liniji 3
INFO  11:46:41,796 - INFO:  Definisan enum tip Broj na liniji 5
INFO  11:46:41,796 - INFO:  Deklarisana konstanta jedan na liniji 7
INFO  11:46:41,796 - INFO:  Deklarisana konstanta pet na liniji 8
INFO  11:46:41,796 - INFO:  Deklarisan niz niz na liniji 10
INFO  11:46:41,796 - INFO:  Deklarisan niz nizch na liniji 11
INFO  11:46:41,796 - INFO:  Obradjuje se funkcija inc na liniji 14
INFO  11:46:41,796 - INFO:  Deklarisan formalni parametar broj na liniji 14
INFO  11:46:41,796 - INFO:  Pristup simbolu broj na liniji 16
INFO  11:46:41,796 - INFO:  Pristup simbolu Broj na liniji 16
INFO  11:46:41,796 - INFO:  Pristup konstanti Broj.JEDAN na liniji 16
INFO  11:46:41,796 - INFO:  Deklarisan metod inc na liniji 14
INFO  11:46:41,796 - INFO:  Obradjuje se funkcija mul na liniji 19
INFO  11:46:41,796 - INFO:  Deklarisan formalni parametar arr na liniji 19
INFO  11:46:41,796 - INFO:  Deklarisan formalni parametar index na liniji 19
INFO  11:46:41,796 - INFO:  Deklarisan formalni parametar b na liniji 19
INFO  11:46:41,796 - INFO:  Pristup simbolu arr na liniji 21
INFO  11:46:41,796 - INFO:  Pristup simbolu index na liniji 21
INFO  11:46:41,796 - INFO:  Pristup elementu niza arr na liniji 21
INFO  11:46:41,796 - INFO:  Pristup simbolu arr na liniji 21
INFO  11:46:41,796 - INFO:  Pristup simbolu index na liniji 21
INFO  11:46:41,796 - INFO:  Pristup elementu niza arr na liniji 21
INFO  11:46:41,796 - INFO:  Pristup simbolu b na liniji 21
INFO  11:46:41,796 - INFO:  Deklarisan metod mul na liniji 19
INFO  11:46:41,796 - INFO:  Obradjuje se funkcija main na liniji 25
INFO  11:46:41,796 - INFO:  Deklarisana promenljiva bodovi na liniji 26
INFO  11:46:41,796 - INFO:  Deklarisana promenljiva nula na liniji 27
INFO  11:46:41,796 - INFO:  Deklarisana promenljiva jedan na liniji 27
INFO  11:46:41,796 - INFO:  Pristup simbolu nula na liniji 31
INFO  11:46:41,796 - INFO:  Pristup simbolu Broj na liniji 31
INFO  11:46:41,796 - INFO:  Pristup konstanti Broj.NULA na liniji 31
INFO  11:46:41,796 - INFO:  Pristup simbolu jedan na liniji 32
INFO  11:46:41,796 - INFO:  Pristup simbolu Broj na liniji 32
INFO  11:46:41,796 - INFO:  Pristup konstanti Broj.JEDAN na liniji 32
INFO  11:46:41,796 - INFO:  Pristup simbolu bodovi na liniji 34
INFO  11:46:41,796 - INFO:  Pristup simbolu bodovi na liniji 35
INFO  11:46:41,796 - INFO:  Pristup simbolu bodovi na liniji 36
INFO  11:46:41,796 - INFO:  Pristup simbolu bodovi na liniji 36
INFO  11:46:41,796 - INFO:  Pristup simbolu Broj na liniji 36
INFO  11:46:41,796 - INFO:  Pristup konstanti Broj.JEDAN na liniji 36
INFO  11:46:41,796 - INFO:  Pristup simbolu bodovi na liniji 37
INFO  11:46:41,796 - INFO:  Pristup simbolu bodovi na liniji 37
INFO  11:46:41,801 - INFO:  Pristup simbolu Broj na liniji 37
INFO  11:46:41,801 - INFO:  Pristup konstanti Broj.PET na liniji 37
INFO  11:46:41,801 - INFO:  Pristup simbolu bodovi na liniji 38
INFO  11:46:41,801 - INFO:  Pristup simbolu bodovi na liniji 39
INFO  11:46:41,801 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:41,801 - INFO:  Pristup simbolu niz na liniji 42
INFO  11:46:41,801 - INFO:  Pristup simbolu niz na liniji 43
INFO  11:46:41,801 - INFO:  Pristup simbolu nula na liniji 43
INFO  11:46:41,801 - INFO:  Pristup elementu niza niz na liniji 43
INFO  11:46:41,801 - INFO:  Pristup simbolu pet na liniji 43
INFO  11:46:41,801 - INFO:  Pristup simbolu niz na liniji 44
INFO  11:46:41,801 - INFO:  Pristup elementu niza niz na liniji 44
INFO  11:46:41,801 - INFO:  Pristup simbolu Broj na liniji 44
INFO  11:46:41,801 - INFO:  Pristup konstanti Broj.DESET na liniji 44
INFO  11:46:41,801 - INFO:  Pristup metodi mul na liniji 45
INFO  11:46:41,801 - INFO:  Pristup simbolu niz na liniji 45
INFO  11:46:41,801 - INFO:  Pristup metodi inc na liniji 45
INFO  11:46:41,801 - INFO:  Pozvana metoda inc na liniji 45
INFO  11:46:41,801 - INFO:  Pozvana metoda mul na liniji 45
INFO  11:46:41,801 - INFO:  Pristup metodi mul na liniji 46
INFO  11:46:41,801 - INFO:  Pristup simbolu niz na liniji 46
INFO  11:46:41,801 - INFO:  Pristup simbolu Broj na liniji 46
INFO  11:46:41,801 - INFO:  Pristup konstanti Broj.NULA na liniji 46
INFO  11:46:41,801 - INFO:  Pristup metodi inc na liniji 46
INFO  11:46:41,801 - INFO:  Pristup metodi inc na liniji 46
INFO  11:46:41,801 - INFO:  Pristup simbolu Broj na liniji 46
INFO  11:46:41,801 - INFO:  Pristup konstanti Broj.JEDAN na liniji 46
INFO  11:46:41,801 - INFO:  Pozvana metoda inc na liniji 46
INFO  11:46:41,801 - INFO:  Pozvana metoda inc na liniji 46
INFO  11:46:41,801 - INFO:  Pozvana metoda mul na liniji 46
INFO  11:46:41,801 - INFO:  Pristup simbolu bodovi na liniji 47
INFO  11:46:41,801 - INFO:  Pristup simbolu niz na liniji 47
INFO  11:46:41,801 - INFO:  Pristup elementu niza niz na liniji 47
INFO  11:46:41,801 - INFO:  Pristup simbolu niz na liniji 47
INFO  11:46:41,801 - INFO:  Pristup elementu niza niz na liniji 47
INFO  11:46:41,801 - INFO:  Pristup simbolu bodovi na liniji 48
INFO  11:46:41,801 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:41,801 - INFO:  Pristup simbolu niz na liniji 49
INFO  11:46:41,801 - INFO:  Pristup simbolu Broj na liniji 49
INFO  11:46:41,801 - INFO:  Pristup konstanti Broj.JEDAN na liniji 49
INFO  11:46:41,801 - INFO:  Pristup elementu niza niz na liniji 49
INFO  11:46:41,801 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:41,801 - INFO:  Pristup simbolu nizch na liniji 52
INFO  11:46:41,801 - INFO:  Pristup simbolu nizch na liniji 53
INFO  11:46:41,801 - INFO:  Pristup elementu niza nizch na liniji 53
INFO  11:46:41,801 - INFO:  Pristup simbolu nizch na liniji 54
INFO  11:46:41,801 - INFO:  Pristup simbolu jedan na liniji 54
INFO  11:46:41,801 - INFO:  Pristup elementu niza nizch na liniji 54
INFO  11:46:41,801 - INFO:  Pristup simbolu nizch na liniji 55
INFO  11:46:41,801 - INFO:  Pristup simbolu pet na liniji 55
INFO  11:46:41,801 - INFO:  Pristup elementu niza nizch na liniji 55
INFO  11:46:41,801 - INFO:  Pristup simbolu nizch na liniji 56
INFO  11:46:41,801 - INFO:  Pristup metodi inc na liniji 56
INFO  11:46:41,801 - INFO:  Pozvana metoda inc na liniji 56
INFO  11:46:41,801 - INFO:  Pristup elementu niza nizch na liniji 56
INFO  11:46:41,801 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:41,801 - INFO:  Pristup simbolu nizch na liniji 57
INFO  11:46:41,801 - INFO:  Pristup simbolu jedan na liniji 57
INFO  11:46:41,801 - INFO:  Pristup elementu niza nizch na liniji 57
INFO  11:46:41,801 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:41,801 - INFO:  Pristup simbolu bodovi na liniji 60
INFO  11:46:41,801 - INFO:  Pristup simbolu bodovi na liniji 60
INFO  11:46:41,801 - INFO:  Pristup simbolu pet na liniji 60
INFO  11:46:41,801 - INFO:  Pristup simbolu jedan na liniji 60
INFO  11:46:41,801 - INFO:  Pristup metodi inc na liniji 60
INFO  11:46:41,801 - INFO:  Pristup simbolu Broj na liniji 60
INFO  11:46:41,801 - INFO:  Pristup konstanti Broj.JEDAN na liniji 60
INFO  11:46:41,801 - INFO:  Pozvana metoda inc na liniji 60
INFO  11:46:41,801 - INFO:  Pristup metodi inc na liniji 60
INFO  11:46:41,806 - INFO:  Pristup simbolu Broj na liniji 60
INFO  11:46:41,806 - INFO:  Pristup konstanti Broj.NULA na liniji 60
INFO  11:46:41,806 - INFO:  Pozvana metoda inc na liniji 60
INFO  11:46:41,806 - INFO:  Pristup simbolu bodovi na liniji 61
INFO  11:46:41,806 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:41,806 - INFO:  Pristup simbolu bodovi na liniji 64
INFO  11:46:41,806 - INFO:  Poziv READ funkcije na liniji 64
INFO  11:46:41,806 - INFO:  Pristup simbolu bodovi na liniji 65
INFO  11:46:41,806 - INFO:  Pristup metodi inc na liniji 65
INFO  11:46:41,806 - INFO:  Pristup simbolu bodovi na liniji 65
INFO  11:46:41,806 - INFO:  Pozvana metoda inc na liniji 65
INFO  11:46:41,806 - INFO:  Pristup simbolu bodovi na liniji 66
INFO  11:46:41,806 - INFO:  Poziv PRINT funkcije na liniji 7
INFO  11:46:41,806 - INFO:  Deklarisan metod main na liniji 25
INFO  11:46:41,806 - ===================================
INFO  11:46:41,816 - Uspesno parsiranje!
